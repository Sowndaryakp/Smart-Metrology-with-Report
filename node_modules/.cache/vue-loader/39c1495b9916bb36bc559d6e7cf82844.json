{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\src\\components\\DxfViewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\src\\components\\DxfViewer.vue","mtime":1710400638000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICBpbXBvcnQge0R4ZlZpZXdlcn0gZnJvbSAiZHhmLXZpZXdlciIKICAgIGltcG9ydCAqIGFzIHRocmVlIGZyb20gInRocmVlIgogICAgaW1wb3J0IER4ZlZpZXdlcldvcmtlciBmcm9tICJ3b3JrZXItbG9hZGVyIS4vRHhmVmlld2VyV29ya2VyIgogICAgCiAgICAvKiogRXZlbnRzOiBhbGwgRHhmVmlld2VyIHN1cHBvcnRlZCBldmVudHMgKHNlZSBEeGZWaWV3ZXIuU3Vic2NyaWJlKCkpLCBwcmVmaXhlZCB3aXRoICJkeGYtIi4gKi8KICAgIGV4cG9ydCBkZWZhdWx0IHsKICAgICAgICBuYW1lOiAiRHhmVmlld2VyIiwKICAgIAogICAgICAgIHByb3BzOiB7CiAgICAgICAgICAgIGR4ZlVybDogewogICAgICAgICAgICAgICAgZGVmYXVsdDogbnVsbAogICAgICAgICAgICB9LAogICAgICAgICAgICAvKiogTGlzdCBvZiBmb250IFVSTHMuIEZpbGVzIHNob3VsZCBoYXZlIFRURiBmb3JtYXQuIEZvbnRzIGFyZSB1c2VkIGluIHRoZSBzcGVjaWZpZWQgb3JkZXIsCiAgICAgICAgICAgICAqIGVhY2ggb25lIGlzIGNoZWNrZWQgdW50aWwgbmVjZXNzYXJ5IGdseXBoIGlzIGZvdW5kLiBUZXh0IGlzIG5vdCByZW5kZXJlZCBpZiBmb250cyBhcmUgbm90CiAgICAgICAgICAgICAqIHNwZWNpZmllZC4KICAgICAgICAgICAgICovCiAgICAgICAgICAgIGZvbnRzOiB7CiAgICAgICAgICAgICAgICBkZWZhdWx0OiBudWxsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgIGRlZmF1bHQoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJDb2xvcjogbmV3IHRocmVlLkNvbG9yKCIjZmZmIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9SZXNpemU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yQ29ycmVjdGlvbjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVPcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXJlZnJhbWVNZXNoOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgCiAgICAgICAgZGF0YSgpIHsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgICAgICAgICBwcm9ncmVzczogbnVsbCwKICAgICAgICAgICAgICAgIHByb2dyZXNzVGV4dDogbnVsbCwKICAgICAgICAgICAgICAgIGN1clByb2dyZXNzUGhhc2U6IG51bGwsCiAgICAgICAgICAgICAgICBlcnJvcjogbnVsbAogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgIAogICAgICAgIHdhdGNoOiB7CiAgICAgICAgICAgIGFzeW5jIGR4ZlVybChkeGZVcmwpIHsKICAgICAgICAgICAgICAgIGlmIChkeGZVcmwgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLkxvYWQoZHhmVXJsKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmR4ZlZpZXdlci5DbGVhcigpCiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGwKICAgICAgICAgICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IG51bGwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAKICAgICAgICBtZXRob2RzOiB7CiAgICAgICAgYXN5bmMgTG9hZCh1cmwpIHsKICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgYXdhaXQgdGhpcy5keGZWaWV3ZXIuTG9hZCh7CiAgICAgICAgICAgICAgdXJsLAogICAgICAgICAgICAgIGZvbnRzOiB0aGlzLmZvbnRzLAogICAgICAgICAgICAgIHByb2dyZXNzQ2JrOiB0aGlzLl9PblByb2dyZXNzLmJpbmQodGhpcyksCiAgICAgICAgICAgICAgd29ya2VyRmFjdG9yeTogRHhmVmlld2VyV29ya2VyCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAvLyBFbWl0IGEgY3VzdG9tIGV2ZW50IHdoZW4gYSBoYW5kbGUgaXMgY2xpY2tlZAogICAgICAgICAgICB0aGlzLmR4ZlZpZXdlci5TdWJzY3JpYmUoImhhbmRsZUNsaWNrIiwgKGhhbmRsZSkgPT4gewogICAgICAgICAgICAgIHRoaXMuJGVtaXQoImhhbmRsZS1jbGljayIsIGhhbmRsZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTsKICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yLnRvU3RyaW5nKCk7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgICAgICB0aGlzLnByb2dyZXNzVGV4dCA9IG51bGw7CiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBudWxsOwogICAgICAgICAgICB0aGlzLmN1clByb2dyZXNzUGhhc2UgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgQ2hhbmdlRGltZW5zaW9uQ29sb3IoaGFuZGxlLCBjb2xvcikgewogICAgICAgICAgLy8gSW1wbGVtZW50IHRoZSBsb2dpYyB0byBjaGFuZ2UgdGhlIGNvbG9yIG9mIHRoZSBzcGVjaWZpZWQgZGltZW5zaW9uIGluIHRoZSBEWEYgZGlhZ3JhbQogICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGNoYW5nZSB0aGUgY29sb3Igb3IgYXBwbHkgYSB2aXN1YWwgaGlnaGxpZ2h0IHRvIHRoZSBkaW1lbnNpb24KICAgICAgICAgIGNvbnNvbGUubG9nKGBEaW1lbnNpb24gd2l0aCBoYW5kbGUgJHtoYW5kbGV9IGNvbG9yIGNoYW5nZWQgdG8gJHtjb2xvcn1gKTsKICAgICAgICB9LAogICAgCiAgICAgICAgSGlnaGxpZ2h0SGFuZGxlKGhhbmRsZSkgewogICAgICAgICAgLy8gSW1wbGVtZW50IHRoZSBsb2dpYyB0byBoaWdobGlnaHQgdGhlIHNwZWNpZmllZCBoYW5kbGUgaW4gdGhlIERYRiBkaWFncmFtCiAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgY2hhbmdlIHRoZSBjb2xvciBvciBhcHBseSBhIHZpc3VhbCBoaWdobGlnaHQgdG8gdGhlIGhhbmRsZQogICAgICAgICAgY29uc29sZS5sb2coYEhhbmRsZSAke2hhbmRsZX0gaGlnaGxpZ2h0ZWQgaW4gdGhlIERYRiBkaWFncmFtLmApOwogICAgICAgIH0sCiAgICAKICAgICAgICAgICAgLyoqIEByZXR1cm4ge0R4ZlZpZXdlcn0gKi8KICAgICAgICAgICAgR2V0Vmlld2VyKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHhmVmlld2VyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIAogICAgICAgICAgICBfT25Qcm9ncmVzcyhwaGFzZSwgc2l6ZSwgdG90YWxTaXplKSB7CiAgICAgICAgICAgICAgICBpZiAocGhhc2UgIT09IHRoaXMuY3VyUHJvZ3Jlc3NQaGFzZSkgewogICAgICAgICAgICAgICAgICAgIHN3aXRjaChwaGFzZSkgewogICAgICAgICAgICAgICAgICAgIGNhc2UgImZvbnQiOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzVGV4dCA9ICJGZXRjaGluZyBmb250cy4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBjYXNlICJmZXRjaCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NUZXh0ID0gIkZldGNoaW5nIGZpbGUuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgY2FzZSAicGFyc2UiOgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzVGV4dCA9ICJQYXJzaW5nIGZpbGUuLi4iCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgY2FzZSAicHJlcGFyZSI6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NUZXh0ID0gIlByZXBhcmluZyByZW5kZXJpbmcgZGF0YS4uLiIKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJQcm9ncmVzc1BoYXNlID0gcGhhc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0b3RhbFNpemUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gLTEKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IHNpemUgLyB0b3RhbFNpemUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgCiAgICAgICAgbW91bnRlZCgpIHsKICAgICAgICAgICAgdGhpcy5keGZWaWV3ZXIgPSBuZXcgRHhmVmlld2VyKHRoaXMuJHJlZnMuY2FudmFzQ29udGFpbmVyLCB0aGlzLm9wdGlvbnMpCiAgICAgICAgICAgIGNvbnN0IFN1YnNjcmliZSA9IGV2ZW50TmFtZSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLmR4ZlZpZXdlci5TdWJzY3JpYmUoZXZlbnROYW1lLCBlID0+IHRoaXMuJGVtaXQoImR4Zi0iICsgZXZlbnROYW1lLCBlKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50TmFtZSBvZiBbImxvYWRlZCIsICJjbGVhcmVkIiwgImRlc3Ryb3llZCIsICJyZXNpemVkIiwgInBvaW50ZXJkb3duIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwb2ludGVydXAiLCAidmlld0NoYW5nZWQiLCAibWVzc2FnZSJdKSB7CiAgICAgICAgICAgICAgICBTdWJzY3JpYmUoZXZlbnROYW1lKQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgIAogICAgICAgIGRlc3Ryb3llZCgpIHsKICAgICAgICAgICAgdGhpcy5keGZWaWV3ZXIuRGVzdHJveSgpCiAgICAgICAgICAgIHRoaXMuZHhmVmlld2VyID0gbnVsbAogICAgICAgIH0KICAgIH0KICAgIA=="},{"version":3,"sources":["DxfViewer.vue"],"names":[],"mappings":";AAcfile":"DxfViewer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"canvasContainer\" ref=\"canvasContainer\">\n        <q-inner-loading :showing=\"isLoading\" color=\"primary\" style=\"z-index: 10\"/>\n        <div v-if=\"progress !== null\" class=\"progress\">\n            <q-linear-progress color=\"primary\" :indeterminate=\"progress < 0\" :value=\"progress\" />\n            <div v-if=\"progressText !== null\" class=\"progressText\">{{progressText}}</div>\n        </div>\n        <div v-if=\"error !== null\" class=\"error\" :title=\"error\">\n            <q-icon name=\"warning\" class=\"text-red\" style=\"font-size: 4rem;\" /> Error occurred: {{error}}\n        </div>\n    </div>\n    </template>\n    \n    <script>\n    import {DxfViewer} from \"dxf-viewer\"\n    import * as three from \"three\"\n    import DxfViewerWorker from \"worker-loader!./DxfViewerWorker\"\n    \n    /** Events: all DxfViewer supported events (see DxfViewer.Subscribe()), prefixed with \"dxf-\". */\n    export default {\n        name: \"DxfViewer\",\n    \n        props: {\n            dxfUrl: {\n                default: null\n            },\n            /** List of font URLs. Files should have TTF format. Fonts are used in the specified order,\n             * each one is checked until necessary glyph is found. Text is not rendered if fonts are not\n             * specified.\n             */\n            fonts: {\n                default: null\n            },\n            options: {\n                default() {\n                    return {\n                        clearColor: new three.Color(\"#fff\"),\n                        autoResize: true,\n                        colorCorrection: true,\n                        sceneOptions: {\n                            wireframeMesh: true\n                        }\n                    }\n                }\n            }\n        },\n    \n        data() {\n            return {\n                isLoading: false,\n                progress: null,\n                progressText: null,\n                curProgressPhase: null,\n                error: null\n            }\n        },\n    \n        watch: {\n            async dxfUrl(dxfUrl) {\n                if (dxfUrl !== null) {\n                    await this.Load(dxfUrl)\n                } else {\n                    this.dxfViewer.Clear()\n                    this.error = null\n                    this.isLoading = false\n                    this.progress = null\n                }\n            }\n        },\n    \n        methods: {\n        async Load(url) {\n          this.isLoading = true;\n          this.error = null;\n          try {\n            await this.dxfViewer.Load({\n              url,\n              fonts: this.fonts,\n              progressCbk: this._OnProgress.bind(this),\n              workerFactory: DxfViewerWorker\n            });\n            // Emit a custom event when a handle is clicked\n            this.dxfViewer.Subscribe(\"handleClick\", (handle) => {\n              this.$emit(\"handle-click\", handle);\n            });\n          } catch (error) {\n            console.warn(error);\n            this.error = error.toString();\n          } finally {\n            this.isLoading = false;\n            this.progressText = null;\n            this.progress = null;\n            this.curProgressPhase = null;\n          }\n        },\n        ChangeDimensionColor(handle, color) {\n          // Implement the logic to change the color of the specified dimension in the DXF diagram\n          // For example, change the color or apply a visual highlight to the dimension\n          console.log(`Dimension with handle ${handle} color changed to ${color}`);\n        },\n    \n        HighlightHandle(handle) {\n          // Implement the logic to highlight the specified handle in the DXF diagram\n          // For example, change the color or apply a visual highlight to the handle\n          console.log(`Handle ${handle} highlighted in the DXF diagram.`);\n        },\n    \n            /** @return {DxfViewer} */\n            GetViewer() {\n                return this.dxfViewer\n            },\n            \n            _OnProgress(phase, size, totalSize) {\n                if (phase !== this.curProgressPhase) {\n                    switch(phase) {\n                    case \"font\":\n                        this.progressText = \"Fetching fonts...\"\n                        break\n                    case \"fetch\":\n                        this.progressText = \"Fetching file...\"\n                        break\n                    case \"parse\":\n                        this.progressText = \"Parsing file...\"\n                        break\n                    case \"prepare\":\n                        this.progressText = \"Preparing rendering data...\"\n                        break\n                    }\n                    this.curProgressPhase = phase\n                }\n                if (totalSize === null) {\n                    this.progress = -1\n                } else {\n                    this.progress = size / totalSize\n                }\n            }\n        },\n        \n        mounted() {\n            this.dxfViewer = new DxfViewer(this.$refs.canvasContainer, this.options)\n            const Subscribe = eventName => {\n                this.dxfViewer.Subscribe(eventName, e => this.$emit(\"dxf-\" + eventName, e))\n            }\n            for (const eventName of [\"loaded\", \"cleared\", \"destroyed\", \"resized\", \"pointerdown\",\n                                     \"pointerup\", \"viewChanged\", \"message\"]) {\n                Subscribe(eventName)\n            }\n        },\n    \n        destroyed() {\n            this.dxfViewer.Destroy()\n            this.dxfViewer = null\n        }\n    }\n    </script>\n    \n    <style scoped lang=\"less\">\n    \n    .canvasContainer {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        min-width: 100px;\n        min-height: 100px;\n    \n        .progress {\n            position: absolute;\n            z-index: 20;\n            width: 90%;\n            margin: 20px 5%;\n    \n            .progressText {\n                margin: 10px 20px;\n                font-size: 14px;\n                color: #262d33;\n                text-align: center;\n            }\n        }\n    \n        .error {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            z-index: 20;\n            padding: 30px;\n    \n            img {\n                width: 24px;\n                height: 24px;\n                vertical-align: middle;\n                margin: 4px;\n            }\n        }\n    }\n    \n    </style>\n    "]}]}