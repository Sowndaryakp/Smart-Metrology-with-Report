{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\src\\components\\PdfViewerPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\src\\components\\PdfViewerPage.vue","mtime":1711618098000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIGltcG9ydCBQZGZWaWV3ZXIgZnJvbSAiQC9jb21wb25lbnRzL1BkZlZpZXdlciI7DQogIGltcG9ydCBWdWUgZnJvbSAidnVlIjsNCiAgaW1wb3J0IExheWVyc0xpc3QgZnJvbSAiQC9jb21wb25lbnRzL0xheWVyc0xpc3QiOw0KICBpbXBvcnQgUGRmRGF0YVRhYmxlIGZyb20gIkAvY29tcG9uZW50cy9QZGZEYXRhVGFibGUiOw0KICBpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOw0KICBpbXBvcnQgQ29ubmVjdGlvbnMgZnJvbSAnLi9Db25uZWN0aW9ucy52dWUnOw0KICANCiAgZXhwb3J0IGRlZmF1bHQgew0KICAgbmFtZTogIlBkZlZpZXdlclBhZ2UiLA0KICAgY29tcG9uZW50czogeyBMYXllcnNMaXN0LCBQZGZWaWV3ZXIsIFBkZkRhdGFUYWJsZSxDb25uZWN0aW9ucyB9LA0KICANCiAgIHByb3BzOiB7DQogICBkeGZVcmw6IHsNCiAgICAgICB0eXBlOiBTdHJpbmcsDQogICAgICAgdXBsb2FkZWRGaWxlOiBPYmplY3QsDQogIA0KICAgICB9LA0KICAgfSwNCiAgDQogICBkYXRhKCkgew0KICAgICByZXR1cm4gew0KICAgICAgIGxheWVyczogbnVsbCwNCiAgICAgICBmb250czogW10sDQogICAgICAgdXBsb2FkZWRGaWxlQ29udGVudDogbnVsbCwgLy8gQWRkIGEgdmFyaWFibGUgdG8gaG9sZCB1cGxvYWRlZCBmaWxlIGNvbnRlbnQNCiAgICAgICBmaWxlbmFtZW5ldzogInAxMDAwIiwNCiAgICAgICBpbnNwZWN0aW9uUmVwb3J0TnVtYmVyOiAnJywgLy8gQWRkaXRpb25hbCBmaWVsZA0KICAgICAgICBwcm9qZWN0TnVtYmVyOiAnJywgLy8gQWRkaXRpb25hbCBmaWVsZA0KICAgICAgICBwcm9qZWN0TmFtZTogJycsIC8vIEFkZGl0aW9uYWwgZmllbGQNCiAgICAgICAgZ3JvdXA6ICcnLCAvLyBBZGRpdGlvbmFsIGZpZWxkDQogICAgICAgIHBhcnROdW1iZXI6ICcnLCAvLyBBZGRpdGlvbmFsIGZpZWxkDQogICAgICAgIHBhcnROYW1lOiAnJywgLy8gQWRkaXRpb25hbCBmaWVsZA0KICAgICAgICBzZWxlY3RlZFBkZkZpbGVOYW1lOiAnJyAvLyBJbml0aWFsaXplIHNlbGVjdGVkRmlsZU5hbWUgaW4gZGF0YQ0KICAgICB9Ow0KICAgfSwNCiAgDQogICBtZXRob2RzOiB7DQogICAgIF9PbkxvYWRlZCgpIHsNCiAgICAgICBjb25zdCBsYXllcnMgPSB0aGlzLiRyZWZzLnZpZXdlci5HZXRWaWV3ZXIoKS5HZXRMYXllcnMoKTsNCiAgICAgICBsYXllcnMuZm9yRWFjaCgobHlyKSA9PiBWdWUuc2V0KGx5ciwgImlzVmlzaWJsZSIsIHRydWUpKTsNCiAgICAgICB0aGlzLmxheWVycyA9IGxheWVyczsNCiAgICAgICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPSJmaWxlIl0nKTsgLy8gQXNzdW1pbmcgeW91IGhhdmUgb25seSBvbmUgZmlsZSBpbnB1dA0KICANCiAgaWYgKGZpbGVJbnB1dCAmJiBmaWxlSW5wdXQuZmlsZXMubGVuZ3RoID4gMCkgew0KICAgLy8gR2V0IHRoZSB1cGxvYWRlZCBmaWxlIGRhdGENCiAgIHRoaXMudXBsb2FkZWRGaWxlID0gZmlsZUlucHV0LmZpbGVzWzBdOw0KICANCiAgfSBlbHNlIHsNCiAgIGNvbnNvbGUuZXJyb3IoJ05vIGZpbGUgdXBsb2FkZWQgb3IgZmlsZSBpbnB1dCBub3QgZm91bmQuJyk7DQogIH0NCiAgdGhpcy51cGxvYWRBbmRQYXJzZUZpbGUoKTsNCiAgdGhpcy4kZW1pdCgnZHhmLWZpbGUtbG9hZGVkJywgdGhpcy51cGxvYWRlZEZpbGVDb250ZW50KTsNCiAgY29uc29sZS5sb2coIlZpZXdlclBhZ2UgU2VsZWN0ZWQgZmlsZW5hbWU6IiwgdGhpcy51cGxvYWRlZEZpbGUubmFtZSk7DQogIHRoaXMuZmlsZW5hbWVuZXcgPSB0aGlzLnVwbG9hZGVkRmlsZS5uYW1lDQogIA0KICB0aGlzLiRlbWl0KCdmaWxlLWxvYWRlZCcsIHRoaXMudXBsb2FkZWRGaWxlLm5hbWUpOw0KICAgICB9LA0KICBoYW5kbGVTdWJtaXREYXRhKGRhdGEpIHsNCiAgICAgLy9Mb2cgdGhlIHNlbGVjdGVkIGZpbGUgbmFtZSBhbmQgdGFibGUgZGF0YSBpbiB0aGUgY29uc29sZQ0KICAgICAvLyBjb25zb2xlLmxvZygid29ya2luZyIpOw0KICAgICB0aGlzLiRlbWl0KCdzdWJtaXQtZGF0YScsIGRhdGEpOw0KICAgfSwNCiAgIG9uU3VibWl0RGF0YVRhYmxlKGRhdGFUb1N1Ym1pdCl7DQogICAgY29uc29sZS5sb2coZGF0YVRvU3VibWl0KTsNCiAgICAgIGNvbnNvbGUubG9nKCdEYXRhIHRvIGJlIHN1Ym1pdHRlZDonLCBkYXRhVG9TdWJtaXQpOyAvLyBBZGQgdGhpcyBsaW5lIGZvciBkZWJ1Z2dpbmcNCiAgICAgIHRoaXMuJGVtaXQoJ3N1Ym1pdC1kYXRhJywgZGF0YVRvU3VibWl0KTsNCiAgIH0sDQogIA0KICAgaGFuZGxlRW50ZXJlZFZhbHVlcyhkYXRhKSB7DQogICAgICBjb25zdCBkYXRhVG9TdWJtaXQgPSB7DQogICAgICBpbnNwZWN0aW9uX3JlcG9ydF9udW1iZXI6IHRoaXMuaW5zcGVjdGlvblJlcG9ydE51bWJlciwNCiAgICAgIHByb2plY3RfbnVtYmVyOiB0aGlzLnByb2plY3ROdW1iZXIsDQogICAgICBwcm9qZWN0X25hbWU6IHRoaXMucHJvamVjdE5hbWUsDQogICAgICBncm91cDogdGhpcy5ncm91cCwNCiAgICAgIHBhcnRfbnVtYmVyOiB0aGlzLnBhcnROdW1iZXIsDQogICAgICBwYXJ0X25hbWU6IHRoaXMucGFydE5hbWUsDQogICAgICB1cGxvYWRlZEZpbGVDb250ZW50OiBkYXRhDQogICAgICB9Ow0KICAgICAgY29uc29sZS5sb2coJ0RhdGEgdG8gYmUgc3VibWl0dGVkOicsIGRhdGFUb1N1Ym1pdCk7IC8vIEFkZCB0aGlzIGxpbmUgZm9yIGRlYnVnZ2luZw0KICAgICAgdGhpcy4kZW1pdCgnc3VibWl0LWRhdGEnLCBkYXRhVG9TdWJtaXQpOw0KICAgICAgY29uc29sZS5sb2coJ0VudGVyZWQgdmFsdWVzIGZyb20gRGF0YVRhYmxlOicsIGRhdGFUb1N1Ym1pdCk7IC8vIEVuc3VyZSB0aGlzIGxpbmUgaXMgY29ycmVjdGx5IHBsYWNlZA0KICB9LA0KICANCiAgDQogIA0KICAgICBfT25DbGVhcmVkKCkgew0KICAgICAgIHRoaXMubGF5ZXJzID0gbnVsbDsNCiAgICAgICB0aGlzLnVwbG9hZGVkRmlsZUNvbnRlbnQgPSAnJzsgLy8gQ2xlYXIgdXBsb2FkZWQgZmlsZSBjb250ZW50IHdoZW4gY2xlYXJlZA0KICAgICB9LA0KICANCiAgICAgX09uVG9nZ2xlTGF5ZXIobGF5ZXIsIG5ld1N0YXRlKSB7DQogICAgICAgbGF5ZXIuaXNWaXNpYmxlID0gbmV3U3RhdGU7DQogICAgICAgdGhpcy4kcmVmcy52aWV3ZXIuR2V0Vmlld2VyKCkuU2hvd0xheWVyKGxheWVyLm5hbWUsIG5ld1N0YXRlKTsNCiAgICAgfSwNCiAgDQogICAgIF9PblRvZ2dsZUFsbChuZXdTdGF0ZSkgew0KICAgICAgIGlmICh0aGlzLmxheWVycykgew0KICAgICAgICAgZm9yIChjb25zdCBsYXllciBvZiB0aGlzLmxheWVycykgew0KICAgICAgICAgICBpZiAobGF5ZXIuaXNWaXNpYmxlICE9PSBuZXdTdGF0ZSkgew0KICAgICAgICAgICAgIHRoaXMuX09uVG9nZ2xlTGF5ZXIobGF5ZXIsIG5ld1N0YXRlKTsNCiAgICAgICAgICAgfQ0KICAgICAgICAgfQ0KICAgICAgIH0NCiAgICAgfSwNCiAgICAgX2hhbmRsZUR4ZkhhbmRsZUNsaWNrRHhmKGhhbmRsZSkgew0KICAgICAvLyBDaGFuZ2UgdGhlIGNvbG9yIG9mIHRoZSBjb3JyZXNwb25kaW5nIGRpbWVuc2lvbiBpbiB0aGUgRFhGIGRpYWdyYW0NCiAgICAgdGhpcy4kcmVmcy52aWV3ZXIuR2V0Vmlld2VyKCkuQ2hhbmdlRGltZW5zaW9uQ29sb3IoaGFuZGxlLCAiI2ZmMDAwMCIpOw0KICAgfSwNCiAgDQogIA0KICAgX2hhbmRsZURhdGFUYWJsZUhhbmRsZUNsaWNrKGhhbmRsZSkgew0KICAgICAvLyBIYW5kbGUgdGhlIGNsaWNrIGV2ZW50IGZyb20gRGF0YVRhYmxlDQogICAgIC8vIEZvciBleGFtcGxlLCB1cGRhdGUgdGhlIGNvbG9yIG9mIHRoZSBjbGlja2VkIGhhbmRsZSBpbiB0aGUgRHhmVmlld2VyIGNvbXBvbmVudA0KICAgICB0aGlzLiRyZWZzLnZpZXdlci5HZXRWaWV3ZXIoKS5DaGFuZ2VIYW5kbGVDb2xvcihoYW5kbGUsICIjZmYwMDAwIik7DQogICB9LA0KICANCiAgICAgICAgIC8vIEFkZCBhIG5ldyBmdW5jdGlvbiB0byBoYW5kbGUgZmlsZSB1cGxvYWQgYW5kIHNlbmQgaXQgdG8gdGhlIGJhY2tlbmQNCiAgIGFzeW5jIHVwbG9hZEFuZFBhcnNlRmlsZSgpIHsNCiAgICAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT0iZmlsZSJdJyk7DQogICAgIGlmICghZmlsZUlucHV0IHx8IGZpbGVJbnB1dC5maWxlcy5sZW5ndGggPT09IDApIHsNCiAgICAgICBjb25zb2xlLmVycm9yKCdObyBmaWxlIHVwbG9hZGVkIG9yIGZpbGUgaW5wdXQgbm90IGZvdW5kLicpOw0KICAgICAgIHJldHVybjsNCiAgICAgfQ0KICANCiAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsNCiAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZUlucHV0LmZpbGVzWzBdKTsNCiAgICAgdHJ5IHsNCiAgICAgICAvLyBTZW5kIHRoZSBmaWxlIHRvIHRoZSBiYWNrZW5kIHVzaW5nIEF4aW9zDQogICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KCdodHRwOi8vMTcyLjE4LjEwMC4yNDA6OTk5OS9wYXJzZV9keGYvJywgZm9ybURhdGEsIHsNCiAgICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywNCiAgICAgICAgIH0sDQogICAgICAgfSk7DQogICAgICAgdGhpcy51cGxvYWRlZEZpbGVDb250ZW50ID0gcmVzcG9uc2UuZGF0YTsNCiAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGxvYWRpbmcgYW5kIHBhcnNpbmcgZmlsZTonLCBlcnJvcik7DQogICAgIH0NCiAgIH0sDQogIA0KICAgfSwNCiAgIGhhbmRsZVBkZkZpbGVTZWxlY3RlZChmaWxlTmFtZSkgew0KICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpbGVOYW1lID0gZmlsZU5hbWU7IC8vIFJlY2VpdmUgdGhlIHNlbGVjdGVkIGZpbGVuYW1lDQogICAgICAgICAgICBjb25zb2xlLmxvZygnUGRmVmlld2VyUGFnZSBmaWxlIG5hbWU6JywgZmlsZU5hbWUpOyAvLyBMb2cgdGhlIHNlbGVjdGVkIGZpbGUgbmFtZSANCiAgICAgICAgICB9DQogICAgICANCiAgfTsNCiAg"},{"version":3,"sources":["PdfViewerPage.vue"],"names":[],"mappings":";AAmBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"PdfViewerPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <q-page class=\"page-wrapper row items-stretch root\">\r\n   <!-- Left Card for PdfViewer -->\r\n   <q-card class=\"col-auto\" style=\"width: 1216px; height: 780px;\">\r\n     <q-card-section style=\" height: 739px;\">\r\n      <PdfViewer @pdf-file-selected=\"handlePdfFileSelected\" />\r\n     </q-card-section>\r\n   </q-card>\r\n   <q-card class=\"col-auto\" style=\"width: 700px;height: 780px;\">\r\n     <q-card-section style=\"height: 780px;\">\r\n      <PdfDataTable :pdfSelectedFile=\"selectedPdfFileName\" />\r\n     </q-card-section>\r\n   </q-card>\r\n  <connections  style=\"height: 80px;\"\r\n  />\r\n  </q-page>\r\n  </template>\r\n  \r\n  <script>\r\n  import PdfViewer from \"@/components/PdfViewer\";\r\n  import Vue from \"vue\";\r\n  import LayersList from \"@/components/LayersList\";\r\n  import PdfDataTable from \"@/components/PdfDataTable\";\r\n  import axios from 'axios';\r\n  import Connections from './Connections.vue';\r\n  \r\n  export default {\r\n   name: \"PdfViewerPage\",\r\n   components: { LayersList, PdfViewer, PdfDataTable,Connections },\r\n  \r\n   props: {\r\n   dxfUrl: {\r\n       type: String,\r\n       uploadedFile: Object,\r\n  \r\n     },\r\n   },\r\n  \r\n   data() {\r\n     return {\r\n       layers: null,\r\n       fonts: [],\r\n       uploadedFileContent: null, // Add a variable to hold uploaded file content\r\n       filenamenew: \"p1000\",\r\n       inspectionReportNumber: '', // Additional field\r\n        projectNumber: '', // Additional field\r\n        projectName: '', // Additional field\r\n        group: '', // Additional field\r\n        partNumber: '', // Additional field\r\n        partName: '', // Additional field\r\n        selectedPdfFileName: '' // Initialize selectedFileName in data\r\n     };\r\n   },\r\n  \r\n   methods: {\r\n     _OnLoaded() {\r\n       const layers = this.$refs.viewer.GetViewer().GetLayers();\r\n       layers.forEach((lyr) => Vue.set(lyr, \"isVisible\", true));\r\n       this.layers = layers;\r\n       const fileInput = document.querySelector('input[type=\"file\"]'); // Assuming you have only one file input\r\n  \r\n  if (fileInput && fileInput.files.length > 0) {\r\n   // Get the uploaded file data\r\n   this.uploadedFile = fileInput.files[0];\r\n  \r\n  } else {\r\n   console.error('No file uploaded or file input not found.');\r\n  }\r\n  this.uploadAndParseFile();\r\n  this.$emit('dxf-file-loaded', this.uploadedFileContent);\r\n  console.log(\"ViewerPage Selected filename:\", this.uploadedFile.name);\r\n  this.filenamenew = this.uploadedFile.name\r\n  \r\n  this.$emit('file-loaded', this.uploadedFile.name);\r\n     },\r\n  handleSubmitData(data) {\r\n     //Log the selected file name and table data in the console\r\n     // console.log(\"working\");\r\n     this.$emit('submit-data', data);\r\n   },\r\n   onSubmitDataTable(dataToSubmit){\r\n    console.log(dataToSubmit);\r\n      console.log('Data to be submitted:', dataToSubmit); // Add this line for debugging\r\n      this.$emit('submit-data', dataToSubmit);\r\n   },\r\n  \r\n   handleEnteredValues(data) {\r\n      const dataToSubmit = {\r\n      inspection_report_number: this.inspectionReportNumber,\r\n      project_number: this.projectNumber,\r\n      project_name: this.projectName,\r\n      group: this.group,\r\n      part_number: this.partNumber,\r\n      part_name: this.partName,\r\n      uploadedFileContent: data\r\n      };\r\n      console.log('Data to be submitted:', dataToSubmit); // Add this line for debugging\r\n      this.$emit('submit-data', dataToSubmit);\r\n      console.log('Entered values from DataTable:', dataToSubmit); // Ensure this line is correctly placed\r\n  },\r\n  \r\n  \r\n  \r\n     _OnCleared() {\r\n       this.layers = null;\r\n       this.uploadedFileContent = ''; // Clear uploaded file content when cleared\r\n     },\r\n  \r\n     _OnToggleLayer(layer, newState) {\r\n       layer.isVisible = newState;\r\n       this.$refs.viewer.GetViewer().ShowLayer(layer.name, newState);\r\n     },\r\n  \r\n     _OnToggleAll(newState) {\r\n       if (this.layers) {\r\n         for (const layer of this.layers) {\r\n           if (layer.isVisible !== newState) {\r\n             this._OnToggleLayer(layer, newState);\r\n           }\r\n         }\r\n       }\r\n     },\r\n     _handleDxfHandleClickDxf(handle) {\r\n     // Change the color of the corresponding dimension in the DXF diagram\r\n     this.$refs.viewer.GetViewer().ChangeDimensionColor(handle, \"#ff0000\");\r\n   },\r\n  \r\n  \r\n   _handleDataTableHandleClick(handle) {\r\n     // Handle the click event from DataTable\r\n     // For example, update the color of the clicked handle in the DxfViewer component\r\n     this.$refs.viewer.GetViewer().ChangeHandleColor(handle, \"#ff0000\");\r\n   },\r\n  \r\n         // Add a new function to handle file upload and send it to the backend\r\n   async uploadAndParseFile() {\r\n     const fileInput = document.querySelector('input[type=\"file\"]');\r\n     if (!fileInput || fileInput.files.length === 0) {\r\n       console.error('No file uploaded or file input not found.');\r\n       return;\r\n     }\r\n  \r\n     const formData = new FormData();\r\n     formData.append('file', fileInput.files[0]);\r\n     try {\r\n       // Send the file to the backend using Axios\r\n       const response = await axios.post('http://172.18.100.240:9999/parse_dxf/', formData, {\r\n         headers: {\r\n           'Content-Type': 'multipart/form-data',\r\n         },\r\n       });\r\n       this.uploadedFileContent = response.data;\r\n     } catch (error) {\r\n       console.error('Error uploading and parsing file:', error);\r\n     }\r\n   },\r\n  \r\n   },\r\n   handlePdfFileSelected(fileName) {\r\n            this.selectedFileName = fileName; // Receive the selected filename\r\n            console.log('PdfViewerPage file name:', fileName); // Log the selected file name \r\n          }\r\n      \r\n  };\r\n  </script>\r\n  \r\n  <style scoped lang=\"less\">\r\n  \r\n  \r\n  </style>\r\n  "]}]}