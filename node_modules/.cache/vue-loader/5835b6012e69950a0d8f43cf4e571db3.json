{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\ViewerPage.vue?vue&type=style&index=0&id=f9ddfd1e&scoped=true&lang=less&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\ViewerPage.vue","mtime":1711605358000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\less-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoNCg0KLnBhZ2Utd3JhcHBlciB7DQp3aWR0aDogMTAwJTsgLyogU2V0IHdpZHRoIHRvIGZpbGwgdGhlIHZpZXdwb3J0ICovDQpoZWlnaHQ6IDkwdmg7IC8qIFNldCBoZWlnaHQgdG8gZmlsbCB0aGUgdmlld3BvcnQgaGVpZ2h0ICovDQpvdmVyZmxvdzogaGlkZGVuOyAvKiBQcmV2ZW50IHNjcm9sbGluZyAqLw0KfQ0KLnJvb3Qgew0KIC5sYXllcnNDb2wgew0KICAgYm9yZGVyLWxlZnQ6ICNEQkRCREIgc29saWQgMXB4Ow0KIH0NCn0NCg=="},{"version":3,"sources":["ViewerPage.vue"],"names":[],"mappings":";;;AA4NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ViewerPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <q-page class=\"page-wrapper row items-stretch root\">\r\n <!-- Left Card for DxfViewer -->\r\n <q-card class=\"col-auto\" style=\"width: 1216px; height: 780px;\">\r\n   <q-card-section style=\" height: 739px;\">\r\n     <slot></slot> <!-- Include the slot here -->\r\n     <DxfViewer  ref=\"viewer\" :dxfUrl=\"dxfUrl\" :fonts=\"fonts\" @dxf-loaded=\"_OnLoaded\" @dxf-cleared=\"_OnCleared\" @dxf-message=\"_OnMessage\" />\r\n   </q-card-section>\r\n </q-card>\r\n\r\n <!-- Center Card for LayersList -->\r\n <!-- <q-card class=\"col-auto\" style=\"width: 300px;height: 780px; \">\r\n   <q-card-section style=\"height: 780px;\">\r\n     <LayersList :layers=\"layers\" @toggleLayer=\"_OnToggleLayer\" @toggleAll=\"_OnToggleAll\" />\r\n   </q-card-section>\r\n </q-card> -->\r\n\r\n <!-- Right Card for DataTable -->\r\n <q-card class=\"col-auto\" style=\"width: 700px;height: 780px;\">\r\n   <q-card-section style=\"height: 780px;\">\r\n     <DataTable v-if=\"uploadedFileContent\" :uploadedFileContent=\"uploadedFileContent\" :fileName=\"uploadedFile.name\" @set-data=\"onSubmitDataTable\" @save-request=\"handleSubmitData\"  @dataToSubmit=\"handleEnteredValues\" :uploadedFileContentnew=\"this.filenamenew\"/>\r\n   </q-card-section>\r\n </q-card>\r\n\r\n<!-- <connections style=\"height: 80px;\" @submit-data=\"handleSubmitData\" @save-request=\"handleSubmitData\"   /> -->\r\n\r\n<!---Set data WORKING-->\r\n<!-- <connections style=\"height: 80px;\" @save-request=\"handleSubmitData\"/> -->\r\n<connections :uploadedFileContentnew=\"this.filenamenew\" style=\"height: 80px;\"\r\n/>\r\n\r\n</q-page>\r\n</template>\r\n\r\n<script>\r\nimport DxfViewer from \"@/components/DxfViewer\";\r\nimport { DxfViewer as _DxfViewer } from \"dxf-viewer\";\r\nimport Vue from \"vue\";\r\nimport mainFont from \"@/assets/fonts/Roboto-LightItalic.ttf\";\r\nimport aux1Font from \"@/assets/fonts/NotoSansDisplay-SemiCondensedLightItalic.ttf\";\r\nimport aux2Font from \"@/assets/fonts/HanaMinA.ttf\";\r\nimport aux3Font from \"@/assets/fonts/NanumGothic-Regular.ttf\";\r\nimport LayersList from \"@/components/LayersList\";\r\nimport DataTable from \"@/components/DataTable\";\r\nimport axios from 'axios';\r\nimport Connections from './Connections.vue';\r\n\r\nexport default {\r\n name: \"ViewerPage\",\r\n components: { LayersList, DxfViewer, DataTable,Connections },\r\n\r\n props: {\r\n dxfUrl: {\r\n     type: String,\r\n     uploadedFile: Object,\r\n\r\n   },\r\n },\r\n\r\n data() {\r\n   return {\r\n     layers: null,\r\n     fonts: [],\r\n     uploadedFileContent: null, // Add a variable to hold uploaded file content\r\n     filenamenew: \"p1000\",\r\n     inspectionReportNumber: '', // Additional field\r\n   projectNumber: '', // Additional field\r\n   projectName: '', // Additional field\r\n   group: '', // Additional field\r\n   partNumber: '', // Additional field\r\n   partName: '' // Additional field\r\n     \r\n   };\r\n },\r\n\r\n methods: {\r\n   _OnLoaded() {\r\n     const layers = this.$refs.viewer.GetViewer().GetLayers();\r\n     layers.forEach((lyr) => Vue.set(lyr, \"isVisible\", true));\r\n     this.layers = layers;\r\n     const fileInput = document.querySelector('input[type=\"file\"]'); // Assuming you have only one file input\r\n\r\n      if (fileInput && fileInput.files.length > 0) {\r\n      // Get the uploaded file data\r\n      this.uploadedFile = fileInput.files[0];\r\n\r\n      } else {\r\n      console.error('No file uploaded or file input not found.');\r\n      }\r\n      this.uploadAndParseFile();\r\n      this.$emit('dxf-file-loaded', this.uploadedFileContent);\r\n      console.log(\"ViewerPage Selected filename:\", this.uploadedFile.name);\r\n      this.filenamenew = this.uploadedFile.name\r\n\r\n      this.$emit('file-loaded', this.uploadedFile.name);\r\n    },\r\nhandleSubmitData(data) {\r\n   //Log the selected file name and table data in the console\r\n   // console.log(\"working\");\r\n   this.$emit('submit-data', data);\r\n },\r\n onSubmitDataTable(dataToSubmit){\r\n  console.log(dataToSubmit);\r\n    console.log('Data to be submitted:', dataToSubmit); // Add this line for debugging\r\n    this.$emit('submit-data', dataToSubmit);\r\n },\r\n\r\n handleEnteredValues(data) {\r\n    const dataToSubmit = {\r\n    inspection_report_number: this.inspectionReportNumber,\r\n    project_number: this.projectNumber,\r\n    project_name: this.projectName,\r\n    group: this.group,\r\n    part_number: this.partNumber,\r\n    part_name: this.partName,\r\n    uploadedFileContent: data\r\n    };\r\n    console.log('Data to be submitted:', dataToSubmit); // Add this line for debugging\r\n    this.$emit('submit-data', dataToSubmit);\r\n    console.log('Entered values from DataTable:', dataToSubmit); // Ensure this line is correctly placed\r\n},\r\n\r\n\r\n\r\n   _OnCleared() {\r\n     this.layers = null;\r\n     this.uploadedFileContent = ''; // Clear uploaded file content when cleared\r\n   },\r\n\r\n   _OnToggleLayer(layer, newState) {\r\n     layer.isVisible = newState;\r\n     this.$refs.viewer.GetViewer().ShowLayer(layer.name, newState);\r\n   },\r\n\r\n   _OnToggleAll(newState) {\r\n     if (this.layers) {\r\n       for (const layer of this.layers) {\r\n         if (layer.isVisible !== newState) {\r\n           this._OnToggleLayer(layer, newState);\r\n         }\r\n       }\r\n     }\r\n   },\r\n   _handleDxfHandleClickDxf(handle) {\r\n   // Change the color of the corresponding dimension in the DXF diagram\r\n   this.$refs.viewer.GetViewer().ChangeDimensionColor(handle, \"#ff0000\");\r\n },\r\n\r\n\r\n _handleDataTableHandleClick(handle) {\r\n   // Handle the click event from DataTable\r\n   // For example, update the color of the clicked handle in the DxfViewer component\r\n   this.$refs.viewer.GetViewer().ChangeHandleColor(handle, \"#ff0000\");\r\n },\r\n   _OnMessage(e) {\r\n     let type = \"info\";\r\n     switch (e.detail.level) {\r\n       case _DxfViewer.MessageLevel.WARN:\r\n         type = \"warning\";\r\n         break;\r\n       case _DxfViewer.MessageLevel.ERROR:\r\n         type = \"negative\";\r\n         break;\r\n     }\r\n     this.$q.notify({ type, message: e.detail.message });\r\n   },\r\n\r\n\r\n       // Add a new function to handle file upload and send it to the backend\r\n async uploadAndParseFile() {\r\n   const fileInput = document.querySelector('input[type=\"file\"]');\r\n   if (!fileInput || fileInput.files.length === 0) {\r\n     console.error('No file uploaded or file input not found.');\r\n     return;\r\n   }\r\n\r\n   const formData = new FormData();\r\n   formData.append('file', fileInput.files[0]);\r\n   try {\r\n     // Send the file to the backend using Axios\r\n     const response = await axios.post('http://172.18.100.240:9999/parse_dxf/', formData, {\r\n       headers: {\r\n         'Content-Type': 'multipart/form-data',\r\n       },\r\n     });\r\n     this.uploadedFileContent = response.data;\r\n   } catch (error) {\r\n     console.error('Error uploading and parsing file:', error);\r\n   }\r\n },\r\n handleDxfFileLoaded(data) {\r\n         // Update uploadedFileContent when the DXF file is loaded\r\n         this.uploadedFileContent = data;\r\n     },\r\n     handleFileSelected(file) {\r\n   // Render the DXF file in the viewer\r\n   // Assuming you have a method to render DXF files\r\n   this.renderDxfFile(file);\r\n },\r\n renderDxfFile(blob) {\r\n // Assuming you have a reference to the DxfViewer component named \"dxfViewer\"\r\n // Load the DXF file content into the DxfViewer\r\n this.$refs.dxfViewer.Load(blob);\r\n}\r\n },\r\n\r\n created() {\r\n   this.fonts = [mainFont, aux1Font, aux2Font, aux3Font];\r\n   this.$parent.$on('file-selected', this.handleFileSelected);\r\n },\r\n beforeDestroy() {\r\n // Remove event listener to prevent memory leaks\r\n this.$parent.$off('file-selected', this.handleFileSelected);\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n\r\n\r\n.page-wrapper {\r\nwidth: 100%; /* Set width to fill the viewport */\r\nheight: 90vh; /* Set height to fill the viewport height */\r\noverflow: hidden; /* Prevent scrolling */\r\n}\r\n.root {\r\n .layersCol {\r\n   border-left: #DBDBDB solid 1px;\r\n }\r\n}\r\n</style>\r\n"]}]}