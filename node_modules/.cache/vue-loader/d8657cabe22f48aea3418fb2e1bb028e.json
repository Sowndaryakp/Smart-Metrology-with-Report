{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\DxfViewer.vue?vue&type=style&index=0&id=142ff504&scoped=true&lang=less&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\DxfViewer.vue","mtime":1710400638000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\less-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgouY2FudmFzQ29udGFpbmVyIHsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIHdpZHRoOiAxMDAlOwogICAgaGVpZ2h0OiAxMDAlOwogICAgbWluLXdpZHRoOiAxMDBweDsKICAgIG1pbi1oZWlnaHQ6IDEwMHB4OwoKICAgIC5wcm9ncmVzcyB7CiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgIHotaW5kZXg6IDIwOwogICAgICAgIHdpZHRoOiA5MCU7CiAgICAgICAgbWFyZ2luOiAyMHB4IDUlOwoKICAgICAgICAucHJvZ3Jlc3NUZXh0IHsKICAgICAgICAgICAgbWFyZ2luOiAxMHB4IDIwcHg7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICAgICAgY29sb3I6ICMyNjJkMzM7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICB9CgogICAgLmVycm9yIHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgIHotaW5kZXg6IDIwOwogICAgICAgIHBhZGRpbmc6IDMwcHg7CgogICAgICAgIGltZyB7CiAgICAgICAgICAgIHdpZHRoOiAyNHB4OwogICAgICAgICAgICBoZWlnaHQ6IDI0cHg7CiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgICAgICAgICAgIG1hcmdpbjogNHB4OwogICAgICAgIH0KICAgIH0KfQoK"},{"version":3,"sources":["DxfViewer.vue"],"names":[],"mappings":";;AAsMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"DxfViewer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"canvasContainer\" ref=\"canvasContainer\">\n        <q-inner-loading :showing=\"isLoading\" color=\"primary\" style=\"z-index: 10\"/>\n        <div v-if=\"progress !== null\" class=\"progress\">\n            <q-linear-progress color=\"primary\" :indeterminate=\"progress < 0\" :value=\"progress\" />\n            <div v-if=\"progressText !== null\" class=\"progressText\">{{progressText}}</div>\n        </div>\n        <div v-if=\"error !== null\" class=\"error\" :title=\"error\">\n            <q-icon name=\"warning\" class=\"text-red\" style=\"font-size: 4rem;\" /> Error occurred: {{error}}\n        </div>\n    </div>\n    </template>\n    \n    <script>\n    import {DxfViewer} from \"dxf-viewer\"\n    import * as three from \"three\"\n    import DxfViewerWorker from \"worker-loader!./DxfViewerWorker\"\n    \n    /** Events: all DxfViewer supported events (see DxfViewer.Subscribe()), prefixed with \"dxf-\". */\n    export default {\n        name: \"DxfViewer\",\n    \n        props: {\n            dxfUrl: {\n                default: null\n            },\n            /** List of font URLs. Files should have TTF format. Fonts are used in the specified order,\n             * each one is checked until necessary glyph is found. Text is not rendered if fonts are not\n             * specified.\n             */\n            fonts: {\n                default: null\n            },\n            options: {\n                default() {\n                    return {\n                        clearColor: new three.Color(\"#fff\"),\n                        autoResize: true,\n                        colorCorrection: true,\n                        sceneOptions: {\n                            wireframeMesh: true\n                        }\n                    }\n                }\n            }\n        },\n    \n        data() {\n            return {\n                isLoading: false,\n                progress: null,\n                progressText: null,\n                curProgressPhase: null,\n                error: null\n            }\n        },\n    \n        watch: {\n            async dxfUrl(dxfUrl) {\n                if (dxfUrl !== null) {\n                    await this.Load(dxfUrl)\n                } else {\n                    this.dxfViewer.Clear()\n                    this.error = null\n                    this.isLoading = false\n                    this.progress = null\n                }\n            }\n        },\n    \n        methods: {\n        async Load(url) {\n          this.isLoading = true;\n          this.error = null;\n          try {\n            await this.dxfViewer.Load({\n              url,\n              fonts: this.fonts,\n              progressCbk: this._OnProgress.bind(this),\n              workerFactory: DxfViewerWorker\n            });\n            // Emit a custom event when a handle is clicked\n            this.dxfViewer.Subscribe(\"handleClick\", (handle) => {\n              this.$emit(\"handle-click\", handle);\n            });\n          } catch (error) {\n            console.warn(error);\n            this.error = error.toString();\n          } finally {\n            this.isLoading = false;\n            this.progressText = null;\n            this.progress = null;\n            this.curProgressPhase = null;\n          }\n        },\n        ChangeDimensionColor(handle, color) {\n          // Implement the logic to change the color of the specified dimension in the DXF diagram\n          // For example, change the color or apply a visual highlight to the dimension\n          console.log(`Dimension with handle ${handle} color changed to ${color}`);\n        },\n    \n        HighlightHandle(handle) {\n          // Implement the logic to highlight the specified handle in the DXF diagram\n          // For example, change the color or apply a visual highlight to the handle\n          console.log(`Handle ${handle} highlighted in the DXF diagram.`);\n        },\n    \n            /** @return {DxfViewer} */\n            GetViewer() {\n                return this.dxfViewer\n            },\n            \n            _OnProgress(phase, size, totalSize) {\n                if (phase !== this.curProgressPhase) {\n                    switch(phase) {\n                    case \"font\":\n                        this.progressText = \"Fetching fonts...\"\n                        break\n                    case \"fetch\":\n                        this.progressText = \"Fetching file...\"\n                        break\n                    case \"parse\":\n                        this.progressText = \"Parsing file...\"\n                        break\n                    case \"prepare\":\n                        this.progressText = \"Preparing rendering data...\"\n                        break\n                    }\n                    this.curProgressPhase = phase\n                }\n                if (totalSize === null) {\n                    this.progress = -1\n                } else {\n                    this.progress = size / totalSize\n                }\n            }\n        },\n        \n        mounted() {\n            this.dxfViewer = new DxfViewer(this.$refs.canvasContainer, this.options)\n            const Subscribe = eventName => {\n                this.dxfViewer.Subscribe(eventName, e => this.$emit(\"dxf-\" + eventName, e))\n            }\n            for (const eventName of [\"loaded\", \"cleared\", \"destroyed\", \"resized\", \"pointerdown\",\n                                     \"pointerup\", \"viewChanged\", \"message\"]) {\n                Subscribe(eventName)\n            }\n        },\n    \n        destroyed() {\n            this.dxfViewer.Destroy()\n            this.dxfViewer = null\n        }\n    }\n    </script>\n    \n    <style scoped lang=\"less\">\n    \n    .canvasContainer {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        min-width: 100px;\n        min-height: 100px;\n    \n        .progress {\n            position: absolute;\n            z-index: 20;\n            width: 90%;\n            margin: 20px 5%;\n    \n            .progressText {\n                margin: 10px 20px;\n                font-size: 14px;\n                color: #262d33;\n                text-align: center;\n            }\n        }\n    \n        .error {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            z-index: 20;\n            padding: 30px;\n    \n            img {\n                width: 24px;\n                height: 24px;\n                vertical-align: middle;\n                margin: 4px;\n            }\n        }\n    }\n    \n    </style>\n    "]}]}