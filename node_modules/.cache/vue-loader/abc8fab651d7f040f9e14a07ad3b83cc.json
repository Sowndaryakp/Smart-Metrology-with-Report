{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\ViewerPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\ViewerPage.vue","mtime":1711605358000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgRHhmVmlld2VyIGZyb20gIkAvY29tcG9uZW50cy9EeGZWaWV3ZXIiOw0KaW1wb3J0IHsgRHhmVmlld2VyIGFzIF9EeGZWaWV3ZXIgfSBmcm9tICJkeGYtdmlld2VyIjsNCmltcG9ydCBWdWUgZnJvbSAidnVlIjsNCmltcG9ydCBtYWluRm9udCBmcm9tICJAL2Fzc2V0cy9mb250cy9Sb2JvdG8tTGlnaHRJdGFsaWMudHRmIjsNCmltcG9ydCBhdXgxRm9udCBmcm9tICJAL2Fzc2V0cy9mb250cy9Ob3RvU2Fuc0Rpc3BsYXktU2VtaUNvbmRlbnNlZExpZ2h0SXRhbGljLnR0ZiI7DQppbXBvcnQgYXV4MkZvbnQgZnJvbSAiQC9hc3NldHMvZm9udHMvSGFuYU1pbkEudHRmIjsNCmltcG9ydCBhdXgzRm9udCBmcm9tICJAL2Fzc2V0cy9mb250cy9OYW51bUdvdGhpYy1SZWd1bGFyLnR0ZiI7DQppbXBvcnQgTGF5ZXJzTGlzdCBmcm9tICJAL2NvbXBvbmVudHMvTGF5ZXJzTGlzdCI7DQppbXBvcnQgRGF0YVRhYmxlIGZyb20gIkAvY29tcG9uZW50cy9EYXRhVGFibGUiOw0KaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsNCmltcG9ydCBDb25uZWN0aW9ucyBmcm9tICcuL0Nvbm5lY3Rpb25zLnZ1ZSc7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiBuYW1lOiAiVmlld2VyUGFnZSIsDQogY29tcG9uZW50czogeyBMYXllcnNMaXN0LCBEeGZWaWV3ZXIsIERhdGFUYWJsZSxDb25uZWN0aW9ucyB9LA0KDQogcHJvcHM6IHsNCiBkeGZVcmw6IHsNCiAgICAgdHlwZTogU3RyaW5nLA0KICAgICB1cGxvYWRlZEZpbGU6IE9iamVjdCwNCg0KICAgfSwNCiB9LA0KDQogZGF0YSgpIHsNCiAgIHJldHVybiB7DQogICAgIGxheWVyczogbnVsbCwNCiAgICAgZm9udHM6IFtdLA0KICAgICB1cGxvYWRlZEZpbGVDb250ZW50OiBudWxsLCAvLyBBZGQgYSB2YXJpYWJsZSB0byBob2xkIHVwbG9hZGVkIGZpbGUgY29udGVudA0KICAgICBmaWxlbmFtZW5ldzogInAxMDAwIiwNCiAgICAgaW5zcGVjdGlvblJlcG9ydE51bWJlcjogJycsIC8vIEFkZGl0aW9uYWwgZmllbGQNCiAgIHByb2plY3ROdW1iZXI6ICcnLCAvLyBBZGRpdGlvbmFsIGZpZWxkDQogICBwcm9qZWN0TmFtZTogJycsIC8vIEFkZGl0aW9uYWwgZmllbGQNCiAgIGdyb3VwOiAnJywgLy8gQWRkaXRpb25hbCBmaWVsZA0KICAgcGFydE51bWJlcjogJycsIC8vIEFkZGl0aW9uYWwgZmllbGQNCiAgIHBhcnROYW1lOiAnJyAvLyBBZGRpdGlvbmFsIGZpZWxkDQogICAgIA0KICAgfTsNCiB9LA0KDQogbWV0aG9kczogew0KICAgX09uTG9hZGVkKCkgew0KICAgICBjb25zdCBsYXllcnMgPSB0aGlzLiRyZWZzLnZpZXdlci5HZXRWaWV3ZXIoKS5HZXRMYXllcnMoKTsNCiAgICAgbGF5ZXJzLmZvckVhY2goKGx5cikgPT4gVnVlLnNldChseXIsICJpc1Zpc2libGUiLCB0cnVlKSk7DQogICAgIHRoaXMubGF5ZXJzID0gbGF5ZXJzOw0KICAgICBjb25zdCBmaWxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPSJmaWxlIl0nKTsgLy8gQXNzdW1pbmcgeW91IGhhdmUgb25seSBvbmUgZmlsZSBpbnB1dA0KDQogICAgICBpZiAoZmlsZUlucHV0ICYmIGZpbGVJbnB1dC5maWxlcy5sZW5ndGggPiAwKSB7DQogICAgICAvLyBHZXQgdGhlIHVwbG9hZGVkIGZpbGUgZGF0YQ0KICAgICAgdGhpcy51cGxvYWRlZEZpbGUgPSBmaWxlSW5wdXQuZmlsZXNbMF07DQoNCiAgICAgIH0gZWxzZSB7DQogICAgICBjb25zb2xlLmVycm9yKCdObyBmaWxlIHVwbG9hZGVkIG9yIGZpbGUgaW5wdXQgbm90IGZvdW5kLicpOw0KICAgICAgfQ0KICAgICAgdGhpcy51cGxvYWRBbmRQYXJzZUZpbGUoKTsNCiAgICAgIHRoaXMuJGVtaXQoJ2R4Zi1maWxlLWxvYWRlZCcsIHRoaXMudXBsb2FkZWRGaWxlQ29udGVudCk7DQogICAgICBjb25zb2xlLmxvZygiVmlld2VyUGFnZSBTZWxlY3RlZCBmaWxlbmFtZToiLCB0aGlzLnVwbG9hZGVkRmlsZS5uYW1lKTsNCiAgICAgIHRoaXMuZmlsZW5hbWVuZXcgPSB0aGlzLnVwbG9hZGVkRmlsZS5uYW1lDQoNCiAgICAgIHRoaXMuJGVtaXQoJ2ZpbGUtbG9hZGVkJywgdGhpcy51cGxvYWRlZEZpbGUubmFtZSk7DQogICAgfSwNCmhhbmRsZVN1Ym1pdERhdGEoZGF0YSkgew0KICAgLy9Mb2cgdGhlIHNlbGVjdGVkIGZpbGUgbmFtZSBhbmQgdGFibGUgZGF0YSBpbiB0aGUgY29uc29sZQ0KICAgLy8gY29uc29sZS5sb2coIndvcmtpbmciKTsNCiAgIHRoaXMuJGVtaXQoJ3N1Ym1pdC1kYXRhJywgZGF0YSk7DQogfSwNCiBvblN1Ym1pdERhdGFUYWJsZShkYXRhVG9TdWJtaXQpew0KICBjb25zb2xlLmxvZyhkYXRhVG9TdWJtaXQpOw0KICAgIGNvbnNvbGUubG9nKCdEYXRhIHRvIGJlIHN1Ym1pdHRlZDonLCBkYXRhVG9TdWJtaXQpOyAvLyBBZGQgdGhpcyBsaW5lIGZvciBkZWJ1Z2dpbmcNCiAgICB0aGlzLiRlbWl0KCdzdWJtaXQtZGF0YScsIGRhdGFUb1N1Ym1pdCk7DQogfSwNCg0KIGhhbmRsZUVudGVyZWRWYWx1ZXMoZGF0YSkgew0KICAgIGNvbnN0IGRhdGFUb1N1Ym1pdCA9IHsNCiAgICBpbnNwZWN0aW9uX3JlcG9ydF9udW1iZXI6IHRoaXMuaW5zcGVjdGlvblJlcG9ydE51bWJlciwNCiAgICBwcm9qZWN0X251bWJlcjogdGhpcy5wcm9qZWN0TnVtYmVyLA0KICAgIHByb2plY3RfbmFtZTogdGhpcy5wcm9qZWN0TmFtZSwNCiAgICBncm91cDogdGhpcy5ncm91cCwNCiAgICBwYXJ0X251bWJlcjogdGhpcy5wYXJ0TnVtYmVyLA0KICAgIHBhcnRfbmFtZTogdGhpcy5wYXJ0TmFtZSwNCiAgICB1cGxvYWRlZEZpbGVDb250ZW50OiBkYXRhDQogICAgfTsNCiAgICBjb25zb2xlLmxvZygnRGF0YSB0byBiZSBzdWJtaXR0ZWQ6JywgZGF0YVRvU3VibWl0KTsgLy8gQWRkIHRoaXMgbGluZSBmb3IgZGVidWdnaW5nDQogICAgdGhpcy4kZW1pdCgnc3VibWl0LWRhdGEnLCBkYXRhVG9TdWJtaXQpOw0KICAgIGNvbnNvbGUubG9nKCdFbnRlcmVkIHZhbHVlcyBmcm9tIERhdGFUYWJsZTonLCBkYXRhVG9TdWJtaXQpOyAvLyBFbnN1cmUgdGhpcyBsaW5lIGlzIGNvcnJlY3RseSBwbGFjZWQNCn0sDQoNCg0KDQogICBfT25DbGVhcmVkKCkgew0KICAgICB0aGlzLmxheWVycyA9IG51bGw7DQogICAgIHRoaXMudXBsb2FkZWRGaWxlQ29udGVudCA9ICcnOyAvLyBDbGVhciB1cGxvYWRlZCBmaWxlIGNvbnRlbnQgd2hlbiBjbGVhcmVkDQogICB9LA0KDQogICBfT25Ub2dnbGVMYXllcihsYXllciwgbmV3U3RhdGUpIHsNCiAgICAgbGF5ZXIuaXNWaXNpYmxlID0gbmV3U3RhdGU7DQogICAgIHRoaXMuJHJlZnMudmlld2VyLkdldFZpZXdlcigpLlNob3dMYXllcihsYXllci5uYW1lLCBuZXdTdGF0ZSk7DQogICB9LA0KDQogICBfT25Ub2dnbGVBbGwobmV3U3RhdGUpIHsNCiAgICAgaWYgKHRoaXMubGF5ZXJzKSB7DQogICAgICAgZm9yIChjb25zdCBsYXllciBvZiB0aGlzLmxheWVycykgew0KICAgICAgICAgaWYgKGxheWVyLmlzVmlzaWJsZSAhPT0gbmV3U3RhdGUpIHsNCiAgICAgICAgICAgdGhpcy5fT25Ub2dnbGVMYXllcihsYXllciwgbmV3U3RhdGUpOw0KICAgICAgICAgfQ0KICAgICAgIH0NCiAgICAgfQ0KICAgfSwNCiAgIF9oYW5kbGVEeGZIYW5kbGVDbGlja0R4ZihoYW5kbGUpIHsNCiAgIC8vIENoYW5nZSB0aGUgY29sb3Igb2YgdGhlIGNvcnJlc3BvbmRpbmcgZGltZW5zaW9uIGluIHRoZSBEWEYgZGlhZ3JhbQ0KICAgdGhpcy4kcmVmcy52aWV3ZXIuR2V0Vmlld2VyKCkuQ2hhbmdlRGltZW5zaW9uQ29sb3IoaGFuZGxlLCAiI2ZmMDAwMCIpOw0KIH0sDQoNCg0KIF9oYW5kbGVEYXRhVGFibGVIYW5kbGVDbGljayhoYW5kbGUpIHsNCiAgIC8vIEhhbmRsZSB0aGUgY2xpY2sgZXZlbnQgZnJvbSBEYXRhVGFibGUNCiAgIC8vIEZvciBleGFtcGxlLCB1cGRhdGUgdGhlIGNvbG9yIG9mIHRoZSBjbGlja2VkIGhhbmRsZSBpbiB0aGUgRHhmVmlld2VyIGNvbXBvbmVudA0KICAgdGhpcy4kcmVmcy52aWV3ZXIuR2V0Vmlld2VyKCkuQ2hhbmdlSGFuZGxlQ29sb3IoaGFuZGxlLCAiI2ZmMDAwMCIpOw0KIH0sDQogICBfT25NZXNzYWdlKGUpIHsNCiAgICAgbGV0IHR5cGUgPSAiaW5mbyI7DQogICAgIHN3aXRjaCAoZS5kZXRhaWwubGV2ZWwpIHsNCiAgICAgICBjYXNlIF9EeGZWaWV3ZXIuTWVzc2FnZUxldmVsLldBUk46DQogICAgICAgICB0eXBlID0gIndhcm5pbmciOw0KICAgICAgICAgYnJlYWs7DQogICAgICAgY2FzZSBfRHhmVmlld2VyLk1lc3NhZ2VMZXZlbC5FUlJPUjoNCiAgICAgICAgIHR5cGUgPSAibmVnYXRpdmUiOw0KICAgICAgICAgYnJlYWs7DQogICAgIH0NCiAgICAgdGhpcy4kcS5ub3RpZnkoeyB0eXBlLCBtZXNzYWdlOiBlLmRldGFpbC5tZXNzYWdlIH0pOw0KICAgfSwNCg0KDQogICAgICAgLy8gQWRkIGEgbmV3IGZ1bmN0aW9uIHRvIGhhbmRsZSBmaWxlIHVwbG9hZCBhbmQgc2VuZCBpdCB0byB0aGUgYmFja2VuZA0KIGFzeW5jIHVwbG9hZEFuZFBhcnNlRmlsZSgpIHsNCiAgIGNvbnN0IGZpbGVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9ImZpbGUiXScpOw0KICAgaWYgKCFmaWxlSW5wdXQgfHwgZmlsZUlucHV0LmZpbGVzLmxlbmd0aCA9PT0gMCkgew0KICAgICBjb25zb2xlLmVycm9yKCdObyBmaWxlIHVwbG9hZGVkIG9yIGZpbGUgaW5wdXQgbm90IGZvdW5kLicpOw0KICAgICByZXR1cm47DQogICB9DQoNCiAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7DQogICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlSW5wdXQuZmlsZXNbMF0pOw0KICAgdHJ5IHsNCiAgICAgLy8gU2VuZCB0aGUgZmlsZSB0byB0aGUgYmFja2VuZCB1c2luZyBBeGlvcw0KICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoJ2h0dHA6Ly8xNzIuMTguMTAwLjI0MDo5OTk5L3BhcnNlX2R4Zi8nLCBmb3JtRGF0YSwgew0KICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsDQogICAgICAgfSwNCiAgICAgfSk7DQogICAgIHRoaXMudXBsb2FkZWRGaWxlQ29udGVudCA9IHJlc3BvbnNlLmRhdGE7DQogICB9IGNhdGNoIChlcnJvcikgew0KICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGxvYWRpbmcgYW5kIHBhcnNpbmcgZmlsZTonLCBlcnJvcik7DQogICB9DQogfSwNCiBoYW5kbGVEeGZGaWxlTG9hZGVkKGRhdGEpIHsNCiAgICAgICAgIC8vIFVwZGF0ZSB1cGxvYWRlZEZpbGVDb250ZW50IHdoZW4gdGhlIERYRiBmaWxlIGlzIGxvYWRlZA0KICAgICAgICAgdGhpcy51cGxvYWRlZEZpbGVDb250ZW50ID0gZGF0YTsNCiAgICAgfSwNCiAgICAgaGFuZGxlRmlsZVNlbGVjdGVkKGZpbGUpIHsNCiAgIC8vIFJlbmRlciB0aGUgRFhGIGZpbGUgaW4gdGhlIHZpZXdlcg0KICAgLy8gQXNzdW1pbmcgeW91IGhhdmUgYSBtZXRob2QgdG8gcmVuZGVyIERYRiBmaWxlcw0KICAgdGhpcy5yZW5kZXJEeGZGaWxlKGZpbGUpOw0KIH0sDQogcmVuZGVyRHhmRmlsZShibG9iKSB7DQogLy8gQXNzdW1pbmcgeW91IGhhdmUgYSByZWZlcmVuY2UgdG8gdGhlIER4ZlZpZXdlciBjb21wb25lbnQgbmFtZWQgImR4ZlZpZXdlciINCiAvLyBMb2FkIHRoZSBEWEYgZmlsZSBjb250ZW50IGludG8gdGhlIER4ZlZpZXdlcg0KIHRoaXMuJHJlZnMuZHhmVmlld2VyLkxvYWQoYmxvYik7DQp9DQogfSwNCg0KIGNyZWF0ZWQoKSB7DQogICB0aGlzLmZvbnRzID0gW21haW5Gb250LCBhdXgxRm9udCwgYXV4MkZvbnQsIGF1eDNGb250XTsNCiAgIHRoaXMuJHBhcmVudC4kb24oJ2ZpbGUtc2VsZWN0ZWQnLCB0aGlzLmhhbmRsZUZpbGVTZWxlY3RlZCk7DQogfSwNCiBiZWZvcmVEZXN0cm95KCkgew0KIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lciB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcw0KIHRoaXMuJHBhcmVudC4kb2ZmKCdmaWxlLXNlbGVjdGVkJywgdGhpcy5oYW5kbGVGaWxlU2VsZWN0ZWQpOw0KfQ0KfTsNCg=="},{"version":3,"sources":["ViewerPage.vue"],"names":[],"mappings":";AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ViewerPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <q-page class=\"page-wrapper row items-stretch root\">\r\n <!-- Left Card for DxfViewer -->\r\n <q-card class=\"col-auto\" style=\"width: 1216px; height: 780px;\">\r\n   <q-card-section style=\" height: 739px;\">\r\n     <slot></slot> <!-- Include the slot here -->\r\n     <DxfViewer  ref=\"viewer\" :dxfUrl=\"dxfUrl\" :fonts=\"fonts\" @dxf-loaded=\"_OnLoaded\" @dxf-cleared=\"_OnCleared\" @dxf-message=\"_OnMessage\" />\r\n   </q-card-section>\r\n </q-card>\r\n\r\n <!-- Center Card for LayersList -->\r\n <!-- <q-card class=\"col-auto\" style=\"width: 300px;height: 780px; \">\r\n   <q-card-section style=\"height: 780px;\">\r\n     <LayersList :layers=\"layers\" @toggleLayer=\"_OnToggleLayer\" @toggleAll=\"_OnToggleAll\" />\r\n   </q-card-section>\r\n </q-card> -->\r\n\r\n <!-- Right Card for DataTable -->\r\n <q-card class=\"col-auto\" style=\"width: 700px;height: 780px;\">\r\n   <q-card-section style=\"height: 780px;\">\r\n     <DataTable v-if=\"uploadedFileContent\" :uploadedFileContent=\"uploadedFileContent\" :fileName=\"uploadedFile.name\" @set-data=\"onSubmitDataTable\" @save-request=\"handleSubmitData\"  @dataToSubmit=\"handleEnteredValues\" :uploadedFileContentnew=\"this.filenamenew\"/>\r\n   </q-card-section>\r\n </q-card>\r\n\r\n<!-- <connections style=\"height: 80px;\" @submit-data=\"handleSubmitData\" @save-request=\"handleSubmitData\"   /> -->\r\n\r\n<!---Set data WORKING-->\r\n<!-- <connections style=\"height: 80px;\" @save-request=\"handleSubmitData\"/> -->\r\n<connections :uploadedFileContentnew=\"this.filenamenew\" style=\"height: 80px;\"\r\n/>\r\n\r\n</q-page>\r\n</template>\r\n\r\n<script>\r\nimport DxfViewer from \"@/components/DxfViewer\";\r\nimport { DxfViewer as _DxfViewer } from \"dxf-viewer\";\r\nimport Vue from \"vue\";\r\nimport mainFont from \"@/assets/fonts/Roboto-LightItalic.ttf\";\r\nimport aux1Font from \"@/assets/fonts/NotoSansDisplay-SemiCondensedLightItalic.ttf\";\r\nimport aux2Font from \"@/assets/fonts/HanaMinA.ttf\";\r\nimport aux3Font from \"@/assets/fonts/NanumGothic-Regular.ttf\";\r\nimport LayersList from \"@/components/LayersList\";\r\nimport DataTable from \"@/components/DataTable\";\r\nimport axios from 'axios';\r\nimport Connections from './Connections.vue';\r\n\r\nexport default {\r\n name: \"ViewerPage\",\r\n components: { LayersList, DxfViewer, DataTable,Connections },\r\n\r\n props: {\r\n dxfUrl: {\r\n     type: String,\r\n     uploadedFile: Object,\r\n\r\n   },\r\n },\r\n\r\n data() {\r\n   return {\r\n     layers: null,\r\n     fonts: [],\r\n     uploadedFileContent: null, // Add a variable to hold uploaded file content\r\n     filenamenew: \"p1000\",\r\n     inspectionReportNumber: '', // Additional field\r\n   projectNumber: '', // Additional field\r\n   projectName: '', // Additional field\r\n   group: '', // Additional field\r\n   partNumber: '', // Additional field\r\n   partName: '' // Additional field\r\n     \r\n   };\r\n },\r\n\r\n methods: {\r\n   _OnLoaded() {\r\n     const layers = this.$refs.viewer.GetViewer().GetLayers();\r\n     layers.forEach((lyr) => Vue.set(lyr, \"isVisible\", true));\r\n     this.layers = layers;\r\n     const fileInput = document.querySelector('input[type=\"file\"]'); // Assuming you have only one file input\r\n\r\n      if (fileInput && fileInput.files.length > 0) {\r\n      // Get the uploaded file data\r\n      this.uploadedFile = fileInput.files[0];\r\n\r\n      } else {\r\n      console.error('No file uploaded or file input not found.');\r\n      }\r\n      this.uploadAndParseFile();\r\n      this.$emit('dxf-file-loaded', this.uploadedFileContent);\r\n      console.log(\"ViewerPage Selected filename:\", this.uploadedFile.name);\r\n      this.filenamenew = this.uploadedFile.name\r\n\r\n      this.$emit('file-loaded', this.uploadedFile.name);\r\n    },\r\nhandleSubmitData(data) {\r\n   //Log the selected file name and table data in the console\r\n   // console.log(\"working\");\r\n   this.$emit('submit-data', data);\r\n },\r\n onSubmitDataTable(dataToSubmit){\r\n  console.log(dataToSubmit);\r\n    console.log('Data to be submitted:', dataToSubmit); // Add this line for debugging\r\n    this.$emit('submit-data', dataToSubmit);\r\n },\r\n\r\n handleEnteredValues(data) {\r\n    const dataToSubmit = {\r\n    inspection_report_number: this.inspectionReportNumber,\r\n    project_number: this.projectNumber,\r\n    project_name: this.projectName,\r\n    group: this.group,\r\n    part_number: this.partNumber,\r\n    part_name: this.partName,\r\n    uploadedFileContent: data\r\n    };\r\n    console.log('Data to be submitted:', dataToSubmit); // Add this line for debugging\r\n    this.$emit('submit-data', dataToSubmit);\r\n    console.log('Entered values from DataTable:', dataToSubmit); // Ensure this line is correctly placed\r\n},\r\n\r\n\r\n\r\n   _OnCleared() {\r\n     this.layers = null;\r\n     this.uploadedFileContent = ''; // Clear uploaded file content when cleared\r\n   },\r\n\r\n   _OnToggleLayer(layer, newState) {\r\n     layer.isVisible = newState;\r\n     this.$refs.viewer.GetViewer().ShowLayer(layer.name, newState);\r\n   },\r\n\r\n   _OnToggleAll(newState) {\r\n     if (this.layers) {\r\n       for (const layer of this.layers) {\r\n         if (layer.isVisible !== newState) {\r\n           this._OnToggleLayer(layer, newState);\r\n         }\r\n       }\r\n     }\r\n   },\r\n   _handleDxfHandleClickDxf(handle) {\r\n   // Change the color of the corresponding dimension in the DXF diagram\r\n   this.$refs.viewer.GetViewer().ChangeDimensionColor(handle, \"#ff0000\");\r\n },\r\n\r\n\r\n _handleDataTableHandleClick(handle) {\r\n   // Handle the click event from DataTable\r\n   // For example, update the color of the clicked handle in the DxfViewer component\r\n   this.$refs.viewer.GetViewer().ChangeHandleColor(handle, \"#ff0000\");\r\n },\r\n   _OnMessage(e) {\r\n     let type = \"info\";\r\n     switch (e.detail.level) {\r\n       case _DxfViewer.MessageLevel.WARN:\r\n         type = \"warning\";\r\n         break;\r\n       case _DxfViewer.MessageLevel.ERROR:\r\n         type = \"negative\";\r\n         break;\r\n     }\r\n     this.$q.notify({ type, message: e.detail.message });\r\n   },\r\n\r\n\r\n       // Add a new function to handle file upload and send it to the backend\r\n async uploadAndParseFile() {\r\n   const fileInput = document.querySelector('input[type=\"file\"]');\r\n   if (!fileInput || fileInput.files.length === 0) {\r\n     console.error('No file uploaded or file input not found.');\r\n     return;\r\n   }\r\n\r\n   const formData = new FormData();\r\n   formData.append('file', fileInput.files[0]);\r\n   try {\r\n     // Send the file to the backend using Axios\r\n     const response = await axios.post('http://172.18.100.240:9999/parse_dxf/', formData, {\r\n       headers: {\r\n         'Content-Type': 'multipart/form-data',\r\n       },\r\n     });\r\n     this.uploadedFileContent = response.data;\r\n   } catch (error) {\r\n     console.error('Error uploading and parsing file:', error);\r\n   }\r\n },\r\n handleDxfFileLoaded(data) {\r\n         // Update uploadedFileContent when the DXF file is loaded\r\n         this.uploadedFileContent = data;\r\n     },\r\n     handleFileSelected(file) {\r\n   // Render the DXF file in the viewer\r\n   // Assuming you have a method to render DXF files\r\n   this.renderDxfFile(file);\r\n },\r\n renderDxfFile(blob) {\r\n // Assuming you have a reference to the DxfViewer component named \"dxfViewer\"\r\n // Load the DXF file content into the DxfViewer\r\n this.$refs.dxfViewer.Load(blob);\r\n}\r\n },\r\n\r\n created() {\r\n   this.fonts = [mainFont, aux1Font, aux2Font, aux3Font];\r\n   this.$parent.$on('file-selected', this.handleFileSelected);\r\n },\r\n beforeDestroy() {\r\n // Remove event listener to prevent memory leaks\r\n this.$parent.$off('file-selected', this.handleFileSelected);\r\n}\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"less\">\r\n\r\n\r\n.page-wrapper {\r\nwidth: 100%; /* Set width to fill the viewport */\r\nheight: 90vh; /* Set height to fill the viewport height */\r\noverflow: hidden; /* Prevent scrolling */\r\n}\r\n.root {\r\n .layersCol {\r\n   border-left: #DBDBDB solid 1px;\r\n }\r\n}\r\n</style>\r\n"]}]}