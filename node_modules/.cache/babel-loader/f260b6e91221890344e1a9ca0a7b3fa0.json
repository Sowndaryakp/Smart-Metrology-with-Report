{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\MTextFormatParser.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\MTextFormatParser.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqIFBhcnNlcyBNVEVYVCBmb3JtYXR0ZWQgdGV4dCBpbnRvIG1vcmUgY29udmVuaWVudCBpbnRlcm1lZGlhdGUgcmVwcmVzZW50YXRpb24uIFRoZSBNVEVYVAogKiBmb3JtYXR0aW5nIGlzIG5vdCB3ZWxsIGRvY3VtZW50ZWQsIHRoZSBvbmx5IHNvdXJjZSBJIGZvdW5kOgogKiBodHRwczovL2FkbmRldmJsb2cudHlwZXBhZC5jb20vYXV0b2NhZC8yMDE3LzA5L2Rpc3NlY3RpbmctbXRleHQtZm9ybWF0LWNvZGVzLmh0bWwKICovCgpjb25zdCBTdGF0ZSA9IE9iamVjdC5mcmVlemUoewogIFRFWFQ6IDAsCiAgRVNDQVBFOiAxLAogIC8qIFNraXAgY3VycmVudGx5IHVuc3VwcG9ydGVkIGZvcm1hdCBjb2RlcyB0aWxsICc7JyAqLwogIFNLSVBfRk9STUFUOiAyLAogIC8qIEZvciBccHhxKiBwYXJhZ3JhcGggZm9ybWF0dGluZy4gTm90IGZvdW5kIGRvY3VtZW50YXRpb24geWV0LCBzbyB0ZW1wb3JhbCBuYW1pbmcgZm9yIG5vdy4gKi8KICBQQVJBR1JBUEgxOiAzLAogIFBBUkFHUkFQSDI6IDQsCiAgUEFSQUdSQVBIMzogNQp9KTsKY29uc3QgRW50aXR5VHlwZSA9IE9iamVjdC5mcmVlemUoewogIFRFWFQ6IDAsCiAgU0NPUEU6IDEsCiAgUEFSQUdSQVBIOiAyLAogIE5PTl9CUkVBS0lOR19TUEFDRTogMywKICAvKiogImFsaWdubWVudCIgcHJvcGVydHkgaXMgZWl0aGVyICJyIiwgImMiLCAibCIsICJqIiwgImQiIGZvciByaWdodCwgY2VudGVyLCBsZWZ0LCBqdXN0aWZ5CiAgICogKHNlZW1zIHRvIGJlIHRoZSBzYW1lIGFzIGxlZnQpLCBkaXN0cmlidXRlIChqdXN0aWZ5KSBhbGlnbm1lbnQuCiAgICovCiAgUEFSQUdSQVBIX0FMSUdOTUVOVDogNAoKICAvKiBNYW55IG90aGVycyBhcmUgbm90IHlldCBpbXBsZW1lbnRlZC4gKi8KfSk7CgovKiogU2luZ2xlIGxldHRlciBmb3JtYXQgY29kZXMgd2hpY2ggYXJlIG5vdCB0ZXJtaW5hdGVkIGJ5ICI7Ii4gKi8KY29uc3Qgc2hvcnRGb3JtYXRzID0gbmV3IFNldChbIkwiLCAibCIsICJPIiwgIm8iLCAiSyIsICJrIiwgIlAiLCAiWCIsICJ+Il0pOwpjb25zdCBsb25nRm9ybWF0cyA9IG5ldyBTZXQoWyJmIiwgIkYiLCAicCIsICJRIiwgIkgiLCAiVyIsICJTIiwgIkEiLCAiQyIsICJUIl0pOwpjb25zdCB2YWxpZEVzY2FwZXMgPSBuZXcgU2V0KFsiXFwiLCAieyIsICJ9Il0pOwpleHBvcnQgY2xhc3MgTVRleHRGb3JtYXRQYXJzZXIgewogIGNvbnN0cnVjdG9yKCkgewogICAgdGhpcy5lbnRpdGllcyA9IFtdOwogIH0KICBQYXJzZSh0ZXh0KSB7CiAgICBjb25zdCBuID0gdGV4dC5sZW5ndGg7CiAgICBsZXQgdGV4dFN0YXJ0ID0gMDsKICAgIGxldCBzdGF0ZSA9IFN0YXRlLlRFWFQ7CiAgICBsZXQgc2NvcGVTdGFjayA9IFtdOwogICAgbGV0IGN1ckVudGl0aWVzID0gdGhpcy5lbnRpdGllczsKICAgIGxldCBjdXJQb3MgPSAwOwogICAgY29uc3QgX3RoaXMgPSB0aGlzOwogICAgZnVuY3Rpb24gRW1pdFRleHQoKSB7CiAgICAgIGlmIChzdGF0ZSAhPT0gU3RhdGUuVEVYVCB8fCB0ZXh0U3RhcnQgPT09IGN1clBvcykgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjdXJFbnRpdGllcy5wdXNoKHsKICAgICAgICB0eXBlOiBFbnRpdHlUeXBlLlRFWFQsCiAgICAgICAgY29udGVudDogdGV4dC5zbGljZSh0ZXh0U3RhcnQsIGN1clBvcykKICAgICAgfSk7CiAgICAgIHRleHRTdGFydCA9IGN1clBvczsKICAgIH0KICAgIGZ1bmN0aW9uIEVtaXRFbnRpdHkodHlwZSkgewogICAgICBjdXJFbnRpdGllcy5wdXNoKHsKICAgICAgICB0eXBlOiB0eXBlCiAgICAgIH0pOwogICAgfQogICAgZnVuY3Rpb24gUHVzaFNjb3BlKCkgewogICAgICBjb25zdCBzY29wZSA9IHsKICAgICAgICB0eXBlOiBFbnRpdHlUeXBlLlNDT1BFLAogICAgICAgIGNvbnRlbnQ6IFtdCiAgICAgIH07CiAgICAgIGN1ckVudGl0aWVzLnB1c2goc2NvcGUpOwogICAgICBjdXJFbnRpdGllcyA9IHNjb3BlLmNvbnRlbnQ7CiAgICAgIHNjb3BlU3RhY2sucHVzaChzY29wZSk7CiAgICB9CiAgICBmdW5jdGlvbiBQb3BTY29wZSgpIHsKICAgICAgaWYgKHNjb3BlU3RhY2subGVuZ3RoID09PSAwKSB7CiAgICAgICAgLyogU3RhY2sgdW5kZXJmbG93LCBqdXN0IGlnbm9yZSBub3cuICovCiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHNjb3BlU3RhY2sucG9wKCk7CiAgICAgIGlmIChzY29wZVN0YWNrLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGN1ckVudGl0aWVzID0gX3RoaXMuZW50aXRpZXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3VyRW50aXRpZXMgPSBzY29wZVN0YWNrW3Njb3BlU3RhY2subGVuZ3RoIC0gMV0uY29udGVudDsKICAgICAgfQogICAgfQogICAgZm9yICg7IGN1clBvcyA8IG47IGN1clBvcysrKSB7CiAgICAgIGNvbnN0IGMgPSB0ZXh0LmNoYXJBdChjdXJQb3MpOwogICAgICBzd2l0Y2ggKHN0YXRlKSB7CiAgICAgICAgY2FzZSBTdGF0ZS5URVhUOgogICAgICAgICAgaWYgKGMgPT09ICJ7IikgewogICAgICAgICAgICBFbWl0VGV4dCgpOwogICAgICAgICAgICBQdXNoU2NvcGUoKTsKICAgICAgICAgICAgdGV4dFN0YXJ0ID0gY3VyUG9zICsgMTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoYyA9PT0gIn0iKSB7CiAgICAgICAgICAgIEVtaXRUZXh0KCk7CiAgICAgICAgICAgIFBvcFNjb3BlKCk7CiAgICAgICAgICAgIHRleHRTdGFydCA9IGN1clBvcyArIDE7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGMgPT09ICJcXCIpIHsKICAgICAgICAgICAgRW1pdFRleHQoKTsKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5FU0NBUEU7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY29udGludWU7CiAgICAgICAgY2FzZSBTdGF0ZS5FU0NBUEU6CiAgICAgICAgICBpZiAoc2hvcnRGb3JtYXRzLmhhcyhjKSkgewogICAgICAgICAgICBzd2l0Y2ggKGMpIHsKICAgICAgICAgICAgICBjYXNlICJQIjoKICAgICAgICAgICAgICAgIEVtaXRFbnRpdHkoRW50aXR5VHlwZS5QQVJBR1JBUEgpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAifiI6CiAgICAgICAgICAgICAgICBFbWl0RW50aXR5KEVudGl0eVR5cGUuTk9OX0JSRUFLSU5HX1NQQUNFKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0YXRlID0gU3RhdGUuVEVYVDsKICAgICAgICAgICAgdGV4dFN0YXJ0ID0gY3VyUG9zICsgMTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAobG9uZ0Zvcm1hdHMuaGFzKGMpKSB7CiAgICAgICAgICAgIHN3aXRjaCAoYykgewogICAgICAgICAgICAgIGNhc2UgInAiOgogICAgICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5QQVJBR1JBUEgxOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5TS0lQX0ZPUk1BVDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICAvKiBJbmNsdWRlIGN1cnJlbnQgY2hhcmFjdGVyIGludG8gYSBuZXh0IHRleHQgY2h1bmsuIEJhY2tzbGFzaCBpcyBhbHNvIGluY2x1ZGVkIGlmCiAgICAgICAgICAgKiBjaGFyYWN0ZXIgaXMgbm90IGFtb25nIGFsbG93ZWQgb25lcyAodGhhdCBpcyBob3cgQXV0b2Rlc2sgdmlld2VyIGJlaGF2ZXMpLgogICAgICAgICAgICovCiAgICAgICAgICBpZiAodmFsaWRFc2NhcGVzLmhhcyhjKSkgewogICAgICAgICAgICB0ZXh0U3RhcnQgPSBjdXJQb3M7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0ZXh0U3RhcnQgPSBjdXJQb3MgLSAxOwogICAgICAgICAgfQogICAgICAgICAgc3RhdGUgPSBTdGF0ZS5URVhUOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgY2FzZSBTdGF0ZS5QQVJBR1JBUEgxOgogICAgICAgICAgc3RhdGUgPSBjID09PSAieCIgPyBTdGF0ZS5QQVJBR1JBUEgyIDogU3RhdGUuU0tJUF9GT1JNQVQ7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICBjYXNlIFN0YXRlLlBBUkFHUkFQSDI6CiAgICAgICAgICBzdGF0ZSA9IGMgPT09ICJxIiA/IFN0YXRlLlBBUkFHUkFQSDMgOiBTdGF0ZS5TS0lQX0ZPUk1BVDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIGNhc2UgU3RhdGUuUEFSQUdSQVBIMzoKICAgICAgICAgIGN1ckVudGl0aWVzLnB1c2goewogICAgICAgICAgICB0eXBlOiBFbnRpdHlUeXBlLlBBUkFHUkFQSF9BTElHTk1FTlQsCiAgICAgICAgICAgIGFsaWdubWVudDogYwogICAgICAgICAgfSk7CiAgICAgICAgICBzdGF0ZSA9IFN0YXRlLlNLSVBfRk9STUFUOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgY2FzZSBTdGF0ZS5TS0lQX0ZPUk1BVDoKICAgICAgICAgIGlmIChjID09PSAiOyIpIHsKICAgICAgICAgICAgdGV4dFN0YXJ0ID0gY3VyUG9zICsgMTsKICAgICAgICAgICAgc3RhdGUgPSBTdGF0ZS5URVhUOwogICAgICAgICAgfQogICAgICAgICAgY29udGludWU7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5oYW5kbGVkIHN0YXRlIik7CiAgICAgIH0KICAgIH0KICAgIEVtaXRUZXh0KCk7CiAgfQoKICAvKiogQHR5cGVkZWYgTVRleHRGb3JtYXRFbnRpdHkKICAgKiBAcHJvcGVydHkgdHlwZSBPbmUgb2YgRW50aXR5VHlwZQogICAqCiAgICogQHJldHVybiB7TVRleHRGb3JtYXRFbnRpdHlbXX0gTGlzdCBvZiBmb3JtYXQgY2h1bmtzLiBFYWNoIGNodW5rIGlzIGVpdGhlciBhIHRleHQgY2h1bmsgd2l0aAogICAqIFRFWFQgdHlwZSBvciBzb21lIGZvcm1hdCBlbnRpdHkuIEVudGl0eSB3aXRoIHR5cGUgU0NPUEUgcmVwcmVzZW50cyBmb3JtYXQgc2NvcGUgd2hpY2ggaGFzCiAgICogbmVzdGVkIGxpc3Qgb2YgZW50aXRpZXMgaW4gImNvbnRlbnQiIHByb3BlcnR5LgogICAqLwogIEdldENvbnRlbnQoKSB7CiAgICByZXR1cm4gdGhpcy5lbnRpdGllczsKICB9CgogIC8qKiBSZXR1cm4gb25seSB0ZXh0IGNodW5rcyBpbiBhIGZsYXR0ZW5lZCBzZXF1ZW5jZSBvZiBzdHJpbmdzLiAqLwogICpHZXRUZXh0KCkgewogICAgZnVuY3Rpb24qIFRyYXZlcnNlSXRlbXMoaXRlbXMpIHsKICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7CiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gRW50aXR5VHlwZS5URVhUKSB7CiAgICAgICAgICB5aWVsZCBpdGVtLmNvbnRlbnQ7CiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IEVudGl0eVR5cGUuU0NPUEUpIHsKICAgICAgICAgIHlpZWxkKiBUcmF2ZXJzZUl0ZW1zKGl0ZW0uY29udGVudCk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICB5aWVsZCogVHJhdmVyc2VJdGVtcyh0aGlzLkdldENvbnRlbnQoKSk7CiAgfQp9Ck1UZXh0Rm9ybWF0UGFyc2VyLkVudGl0eVR5cGUgPSBFbnRpdHlUeXBlOw=="},{"version":3,"names":["State","Object","freeze","TEXT","ESCAPE","SKIP_FORMAT","PARAGRAPH1","PARAGRAPH2","PARAGRAPH3","EntityType","SCOPE","PARAGRAPH","NON_BREAKING_SPACE","PARAGRAPH_ALIGNMENT","shortFormats","Set","longFormats","validEscapes","MTextFormatParser","constructor","entities","Parse","text","n","length","textStart","state","scopeStack","curEntities","curPos","_this","EmitText","push","type","content","slice","EmitEntity","PushScope","scope","PopScope","pop","c","charAt","has","alignment","Error","GetContent","GetText","TraverseItems","items","item"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI ALL PROJECTS/GERB-INDIA(CLIENT)/GerbIndiaDashboard-CMTI-Full/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/MTextFormatParser.js"],"sourcesContent":["/** Parses MTEXT formatted text into more convenient intermediate representation. The MTEXT\n * formatting is not well documented, the only source I found:\n * https://adndevblog.typepad.com/autocad/2017/09/dissecting-mtext-format-codes.html\n */\n\nconst State = Object.freeze({\n    TEXT: 0,\n    ESCAPE: 1,\n    /* Skip currently unsupported format codes till ';' */\n    SKIP_FORMAT: 2,\n    /* For \\pxq* paragraph formatting. Not found documentation yet, so temporal naming for now. */\n    PARAGRAPH1: 3,\n    PARAGRAPH2: 4,\n    PARAGRAPH3: 5\n})\n\nconst EntityType = Object.freeze({\n    TEXT: 0,\n    SCOPE: 1,\n    PARAGRAPH: 2,\n    NON_BREAKING_SPACE: 3,\n    /** \"alignment\" property is either \"r\", \"c\", \"l\", \"j\", \"d\" for right, center, left, justify\n     * (seems to be the same as left), distribute (justify) alignment.\n     */\n    PARAGRAPH_ALIGNMENT: 4\n\n    /* Many others are not yet implemented. */\n})\n\n/** Single letter format codes which are not terminated by \";\". */\nconst shortFormats = new Set([\n    \"L\", \"l\", \"O\", \"o\", \"K\", \"k\", \"P\", \"X\", \"~\"\n])\n\nconst longFormats = new Set([\n    \"f\", \"F\", \"p\", \"Q\", \"H\", \"W\", \"S\", \"A\", \"C\", \"T\"\n])\n\nconst validEscapes = new Set([\n    \"\\\\\", \"{\", \"}\"\n])\n\nexport class MTextFormatParser {\n\n    constructor() {\n        this.entities = []\n    }\n\n    Parse(text) {\n        const n = text.length\n        let textStart = 0\n        let state = State.TEXT\n        let scopeStack = []\n        let curEntities = this.entities\n        let curPos = 0\n        const _this = this\n\n        function EmitText() {\n            if (state !== State.TEXT || textStart === curPos) {\n                return\n            }\n            curEntities.push({\n                type: EntityType.TEXT,\n                content: text.slice(textStart, curPos)\n            })\n            textStart = curPos\n        }\n\n        function EmitEntity(type) {\n            curEntities.push({type: type})\n        }\n\n        function PushScope() {\n            const scope = {\n                type: EntityType.SCOPE,\n                content: []\n            }\n            curEntities.push(scope)\n            curEntities = scope.content\n            scopeStack.push(scope)\n        }\n\n        function PopScope() {\n            if (scopeStack.length === 0) {\n                /* Stack underflow, just ignore now. */\n                return\n            }\n            scopeStack.pop()\n            if (scopeStack.length === 0) {\n                curEntities = _this.entities\n            } else {\n                curEntities = scopeStack[scopeStack.length - 1].content\n            }\n        }\n\n        for ( ;curPos < n; curPos++) {\n            const c = text.charAt(curPos)\n\n            switch (state) {\n\n            case State.TEXT:\n                if (c === \"{\") {\n                    EmitText()\n                    PushScope()\n                    textStart = curPos + 1\n                    continue\n                }\n                if (c === \"}\") {\n                    EmitText()\n                    PopScope()\n                    textStart = curPos + 1\n                    continue\n                }\n                if (c === \"\\\\\") {\n                    EmitText()\n                    state = State.ESCAPE\n                    continue\n                }\n                continue\n\n            case State.ESCAPE:\n                if (shortFormats.has(c)) {\n                    switch (c) {\n                    case \"P\":\n                        EmitEntity(EntityType.PARAGRAPH)\n                        break\n                    case \"~\":\n                        EmitEntity(EntityType.NON_BREAKING_SPACE)\n                        break\n                    }\n                    state = State.TEXT\n                    textStart = curPos + 1\n                    continue\n                }\n                if (longFormats.has(c)) {\n                    switch (c) {\n                    case \"p\":\n                        state = State.PARAGRAPH1\n                        continue\n                    }\n                    state = State.SKIP_FORMAT\n                    continue\n                }\n                /* Include current character into a next text chunk. Backslash is also included if\n                 * character is not among allowed ones (that is how Autodesk viewer behaves).\n                 */\n                if (validEscapes.has(c)) {\n                    textStart = curPos\n                } else {\n                    textStart = curPos - 1\n                }\n                state = State.TEXT\n                continue\n\n            case State.PARAGRAPH1:\n                state = c === \"x\" ? State.PARAGRAPH2 : State.SKIP_FORMAT\n                continue\n\n            case State.PARAGRAPH2:\n                state = c === \"q\" ? State.PARAGRAPH3 : State.SKIP_FORMAT\n                continue\n\n            case State.PARAGRAPH3:\n                curEntities.push({type: EntityType.PARAGRAPH_ALIGNMENT, alignment: c})\n                state = State.SKIP_FORMAT\n                continue\n\n            case State.SKIP_FORMAT:\n                if (c === \";\") {\n                    textStart = curPos + 1\n                    state = State.TEXT\n                }\n                continue\n\n            default:\n                throw new Error(\"Unhandled state\")\n            }\n        }\n\n        EmitText()\n    }\n\n    /** @typedef MTextFormatEntity\n     * @property type One of EntityType\n     *\n     * @return {MTextFormatEntity[]} List of format chunks. Each chunk is either a text chunk with\n     * TEXT type or some format entity. Entity with type SCOPE represents format scope which has\n     * nested list of entities in \"content\" property.\n     */\n    GetContent() {\n        return this.entities\n    }\n\n    /** Return only text chunks in a flattened sequence of strings. */\n    *GetText() {\n\n        function *TraverseItems(items) {\n            for (const item of items) {\n                if (item.type === EntityType.TEXT) {\n                    yield item.content\n                } else if (item.type === EntityType.SCOPE) {\n                    yield *TraverseItems(item.content)\n                }\n            }\n        }\n\n        yield *TraverseItems(this.GetContent())\n    }\n}\n\nMTextFormatParser.EntityType = EntityType"],"mappings":"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"}]}