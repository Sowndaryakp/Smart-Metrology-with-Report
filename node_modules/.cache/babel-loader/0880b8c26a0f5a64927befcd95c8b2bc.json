{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\BatchingKey.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\BatchingKey.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqIEtleSBmb3IgcmVuZGVyIGJhdGNoZXMuICovCmV4cG9ydCBjbGFzcyBCYXRjaGluZ0tleSB7CiAgLyoqCiAgICogQ29tcG9uZW50cyBvcmRlciBtYXR0ZXJzIGZvciBsb29rdXAgYnkgcHJlZml4LgogICAqIEBwYXJhbSBsYXllck5hbWUgez9TdHJpbmd9IExheWVyIG5hbWUsIG51bGwgaWYgbm90IGJvdW5kIHRvIGEgbGF5ZXIgKGUuZy4gYmxvY2sgZGVmaW5pdGlvbikuCiAgICogQHBhcmFtIGJsb2NrTmFtZSB7P1N0cmluZ30gQmxvY2sgbmFtZSBpZiBhcHBsaWNhYmxlLiBJZiBzcGVjaWZpZWQgYW5kIGdlb21ldHJ5VHlwZSBpcyBub3QKICAgKiAgQkxPQ0tfSU5TVEFOQ0UsIHRoZSBiYXRjaCBpcyBwYXJ0IG9mIGJsb2NrIGRlZmluaXRpb24uIE90aGVyd2lzZSBpdCBpcyBibG9jayBpbnN0YW5jZS4KICAgKiBAcGFyYW0gZ2VvbWV0cnlUeXBlIHs/bnVtYmVyfSBPbmUgb2YgQmF0Y2hpbmdLZXkuR2VvbWV0cnlUeXBlLgogICAqIEBwYXJhbSBjb2xvciB7bnVtYmVyfSBDb2xvciBBUkdCIHZhbHVlLgogICAqIEBwYXJhbSBsaW5lVHlwZSB7P251bWJlcn0gTGluZSB0eXBlIElELCBudWxsIGZvciBub24tbGluZXMuIFplcm8gaXMgZGVmYXVsdCB0eXBlIChzb2xpZAogICAqICBsaW5lKS4KICAgKi8KICBjb25zdHJ1Y3RvcihsYXllck5hbWUsIGJsb2NrTmFtZSwgZ2VvbWV0cnlUeXBlLCBjb2xvciwgbGluZVR5cGUpIHsKICAgIHRoaXMubGF5ZXJOYW1lID0gbGF5ZXJOYW1lICE9PSBudWxsICYmIGxheWVyTmFtZSAhPT0gdm9pZCAwID8gbGF5ZXJOYW1lIDogbnVsbDsKICAgIHRoaXMuYmxvY2tOYW1lID0gYmxvY2tOYW1lICE9PSBudWxsICYmIGJsb2NrTmFtZSAhPT0gdm9pZCAwID8gYmxvY2tOYW1lIDogbnVsbDsKICAgIHRoaXMuZ2VvbWV0cnlUeXBlID0gZ2VvbWV0cnlUeXBlICE9PSBudWxsICYmIGdlb21ldHJ5VHlwZSAhPT0gdm9pZCAwID8gZ2VvbWV0cnlUeXBlIDogbnVsbDsKICAgIHRoaXMuY29sb3IgPSBjb2xvcjsKICAgIHRoaXMubGluZVR5cGUgPSBsaW5lVHlwZSAhPT0gbnVsbCAmJiBsaW5lVHlwZSAhPT0gdm9pZCAwID8gbGluZVR5cGUgOiBudWxsOwogIH0KCiAgLyoqIENvbXBhcmF0b3IgZnVuY3Rpb24uIEZpZWxkcyBsZXhpY2FsIG9yZGVyIGNvcnJlc3BvbmRzIHRvIHRoZSBjb25zdHJ1Y3RvciBhcmd1bWVudHMgb3JkZXIuCiAgICogTnVsbCB2YWx1ZXMgYXJlIGFsd2F5cyBmaXJzdC4KICAgKi8KICBDb21wYXJlKG90aGVyKSB7CiAgICBsZXQgYyA9IENvbXBhcmVWYWx1ZXModGhpcy5sYXllck5hbWUsIG90aGVyLmxheWVyTmFtZSk7CiAgICBpZiAoYyAhPT0gMCkgewogICAgICByZXR1cm4gYzsKICAgIH0KICAgIGMgPSBDb21wYXJlVmFsdWVzKHRoaXMuYmxvY2tOYW1lLCBvdGhlci5ibG9ja05hbWUpOwogICAgaWYgKGMgIT09IDApIHsKICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICBjID0gQ29tcGFyZVZhbHVlcyh0aGlzLmdlb21ldHJ5VHlwZSwgb3RoZXIuZ2VvbWV0cnlUeXBlKTsKICAgIGlmIChjICE9PSAwKSB7CiAgICAgIHJldHVybiBjOwogICAgfQogICAgYyA9IENvbXBhcmVWYWx1ZXModGhpcy5jb2xvciwgb3RoZXIuY29sb3IpOwogICAgaWYgKGMgIT09IDApIHsKICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICByZXR1cm4gQ29tcGFyZVZhbHVlcyh0aGlzLmxpbmVUeXBlLCBvdGhlci5saW5lVHlwZSk7CiAgfQogIElzSW5kZXhlZCgpIHsKICAgIHJldHVybiB0aGlzLmdlb21ldHJ5VHlwZSA9PT0gQmF0Y2hpbmdLZXkuR2VvbWV0cnlUeXBlLklOREVYRURfTElORVMgfHwgdGhpcy5nZW9tZXRyeVR5cGUgPT09IEJhdGNoaW5nS2V5Lkdlb21ldHJ5VHlwZS5JTkRFWEVEX1RSSUFOR0xFUzsKICB9CiAgSXNJbnN0YW5jZWQoKSB7CiAgICByZXR1cm4gdGhpcy5nZW9tZXRyeVR5cGUgPT09IEJhdGNoaW5nS2V5Lkdlb21ldHJ5VHlwZS5CTE9DS19JTlNUQU5DRSB8fCB0aGlzLmdlb21ldHJ5VHlwZSA9PT0gQmF0Y2hpbmdLZXkuR2VvbWV0cnlUeXBlLlBPSU5UX0lOU1RBTkNFOwogIH0KfQpCYXRjaGluZ0tleS5HZW9tZXRyeVR5cGUgPSBPYmplY3QuZnJlZXplKHsKICBQT0lOVFM6IDAsCiAgTElORVM6IDEsCiAgSU5ERVhFRF9MSU5FUzogMiwKICBUUklBTkdMRVM6IDMsCiAgSU5ERVhFRF9UUklBTkdMRVM6IDQsCiAgQkxPQ0tfSU5TVEFOQ0U6IDUsCiAgLyoqIFNoYXBlZCBwb2ludCBpbnN0YW5jZXMuICovCiAgUE9JTlRfSU5TVEFOQ0U6IDYKfSk7CgovKiogQ29tcGFyYXRvciBmdW5jdGlvbiBmb3IgYXJiaXRyYXJ5IHR5cGVzLiBOdWxsIGlzIGFsd2F5cyBmaXJzdC4gVGhpcyBpcyB1c2VkIGp1c3QgdG8gbWFrZSBzb21lCiAqIG9yZGVyaW5nIGZvciBrZXlzIGluIHRyZWUgc3RydWN0dXJlcywgc28gbm8gbG9jYWxlLWF3YXJlIHN0cmluZyBjb21wYXJpc29uLgogKi8KZXhwb3J0IGZ1bmN0aW9uIENvbXBhcmVWYWx1ZXModjEsIHYyKSB7CiAgaWYgKHYxID09PSBudWxsKSB7CiAgICBpZiAodjIgPT09IG51bGwpIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgICByZXR1cm4gLTE7CiAgfQogIGlmICh2MiA9PT0gbnVsbCkgewogICAgcmV0dXJuIDE7CiAgfQogIGlmICh2MSA8IHYyKSB7CiAgICByZXR1cm4gLTE7CiAgfQogIGlmICh2MSA+IHYyKSB7CiAgICByZXR1cm4gMTsKICB9CiAgcmV0dXJuIDA7Cn0="},{"version":3,"names":["BatchingKey","constructor","layerName","blockName","geometryType","color","lineType","Compare","other","c","CompareValues","IsIndexed","GeometryType","INDEXED_LINES","INDEXED_TRIANGLES","IsInstanced","BLOCK_INSTANCE","POINT_INSTANCE","Object","freeze","POINTS","LINES","TRIANGLES","v1","v2"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI Projects/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/BatchingKey.js"],"sourcesContent":["/** Key for render batches. */\nexport class BatchingKey {\n    /**\n     * Components order matters for lookup by prefix.\n     * @param layerName {?String} Layer name, null if not bound to a layer (e.g. block definition).\n     * @param blockName {?String} Block name if applicable. If specified and geometryType is not\n     *  BLOCK_INSTANCE, the batch is part of block definition. Otherwise it is block instance.\n     * @param geometryType {?number} One of BatchingKey.GeometryType.\n     * @param color {number} Color ARGB value.\n     * @param lineType {?number} Line type ID, null for non-lines. Zero is default type (solid\n     *  line).\n     */\n    constructor(layerName, blockName, geometryType, color, lineType) {\n        this.layerName = layerName ?? null\n        this.blockName = blockName ?? null\n        this.geometryType = geometryType ?? null\n        this.color = color\n        this.lineType = lineType ?? null\n    }\n\n    /** Comparator function. Fields lexical order corresponds to the constructor arguments order.\n     * Null values are always first.\n     */\n    Compare(other) {\n        let c = CompareValues(this.layerName, other.layerName)\n        if (c !== 0) {\n            return c\n        }\n        c = CompareValues(this.blockName, other.blockName)\n        if (c !== 0) {\n            return c\n        }\n        c = CompareValues(this.geometryType, other.geometryType)\n        if (c !== 0) {\n            return c\n        }\n        c = CompareValues(this.color, other.color)\n        if (c !== 0) {\n            return c\n        }\n        return CompareValues(this.lineType, other.lineType)\n    }\n\n    IsIndexed() {\n        return this.geometryType === BatchingKey.GeometryType.INDEXED_LINES ||\n               this.geometryType === BatchingKey.GeometryType.INDEXED_TRIANGLES\n    }\n\n    IsInstanced() {\n        return this.geometryType === BatchingKey.GeometryType.BLOCK_INSTANCE ||\n               this.geometryType === BatchingKey.GeometryType.POINT_INSTANCE\n    }\n}\n\nBatchingKey.GeometryType = Object.freeze({\n    POINTS: 0,\n    LINES: 1,\n    INDEXED_LINES: 2,\n    TRIANGLES: 3,\n    INDEXED_TRIANGLES: 4,\n    BLOCK_INSTANCE: 5,\n    /** Shaped point instances. */\n    POINT_INSTANCE: 6\n})\n\n/** Comparator function for arbitrary types. Null is always first. This is used just to make some\n * ordering for keys in tree structures, so no locale-aware string comparison.\n */\nexport function CompareValues(v1, v2) {\n    if (v1 === null) {\n        if (v2 === null) {\n            return 0\n        }\n        return -1\n    }\n    if (v2 === null) {\n        return 1\n    }\n    if (v1 < v2) {\n        return -1\n    }\n    if (v1 > v2) {\n        return 1\n    }\n    return 0\n}\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,WAAW,CAAC;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,SAAS,EAAEC,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IAC7D,IAAI,CAACJ,SAAS,GAAGA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI;IAClC,IAAI,CAACC,SAAS,GAAGA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAI;IAClC,IAAI,CAACC,YAAY,GAAGA,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAI,IAAI;IACxC,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,IAAI;EACpC;;EAEA;AACJ;AACA;EACIC,OAAOA,CAACC,KAAK,EAAE;IACX,IAAIC,CAAC,GAAGC,aAAa,CAAC,IAAI,CAACR,SAAS,EAAEM,KAAK,CAACN,SAAS,CAAC;IACtD,IAAIO,CAAC,KAAK,CAAC,EAAE;MACT,OAAOA,CAAC;IACZ;IACAA,CAAC,GAAGC,aAAa,CAAC,IAAI,CAACP,SAAS,EAAEK,KAAK,CAACL,SAAS,CAAC;IAClD,IAAIM,CAAC,KAAK,CAAC,EAAE;MACT,OAAOA,CAAC;IACZ;IACAA,CAAC,GAAGC,aAAa,CAAC,IAAI,CAACN,YAAY,EAAEI,KAAK,CAACJ,YAAY,CAAC;IACxD,IAAIK,CAAC,KAAK,CAAC,EAAE;MACT,OAAOA,CAAC;IACZ;IACAA,CAAC,GAAGC,aAAa,CAAC,IAAI,CAACL,KAAK,EAAEG,KAAK,CAACH,KAAK,CAAC;IAC1C,IAAII,CAAC,KAAK,CAAC,EAAE;MACT,OAAOA,CAAC;IACZ;IACA,OAAOC,aAAa,CAAC,IAAI,CAACJ,QAAQ,EAAEE,KAAK,CAACF,QAAQ,CAAC;EACvD;EAEAK,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACP,YAAY,KAAKJ,WAAW,CAACY,YAAY,CAACC,aAAa,IAC5D,IAAI,CAACT,YAAY,KAAKJ,WAAW,CAACY,YAAY,CAACE,iBAAiB;EAC3E;EAEAC,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACX,YAAY,KAAKJ,WAAW,CAACY,YAAY,CAACI,cAAc,IAC7D,IAAI,CAACZ,YAAY,KAAKJ,WAAW,CAACY,YAAY,CAACK,cAAc;EACxE;AACJ;AAEAjB,WAAW,CAACY,YAAY,GAAGM,MAAM,CAACC,MAAM,CAAC;EACrCC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRR,aAAa,EAAE,CAAC;EAChBS,SAAS,EAAE,CAAC;EACZR,iBAAiB,EAAE,CAAC;EACpBE,cAAc,EAAE,CAAC;EACjB;EACAC,cAAc,EAAE;AACpB,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,SAASP,aAAaA,CAACa,EAAE,EAAEC,EAAE,EAAE;EAClC,IAAID,EAAE,KAAK,IAAI,EAAE;IACb,IAAIC,EAAE,KAAK,IAAI,EAAE;MACb,OAAO,CAAC;IACZ;IACA,OAAO,CAAC,CAAC;EACb;EACA,IAAIA,EAAE,KAAK,IAAI,EAAE;IACb,OAAO,CAAC;EACZ;EACA,IAAID,EAAE,GAAGC,EAAE,EAAE;IACT,OAAO,CAAC,CAAC;EACb;EACA,IAAID,EAAE,GAAGC,EAAE,EAAE;IACT,OAAO,CAAC;EACZ;EACA,OAAO,CAAC;AACZ"}]}