{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\dxf-viewer\\src\\TextRenderer.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\dxf-viewer\\src\\TextRenderer.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Entity","ShapePath","ShapeUtils","Matrix3","Vector2","MTextFormatParser","SPECIAL_CHARS_RE","ParseSpecialChars","text","replaceAll","match","p1","p2","undefined","code","parseInt","isNaN","String","fromCharCode","TextRenderer","constructor","fontFetchers","options","fonts","Object","create","DefaultOptions","assign","shapes","Map","stubShapeLoaded","stubShape","FetchFonts","char","Array","from","fallbackChar","_CreateCharShape","charMissing","codePointAt","found","font","HasChar","length","fetcher","shift","_FetchFont","push","canRender","GetLineWidth","fontSize","block","TextBlock","shape","_GetCharShape","PushChar","GetCurrentPosition","Render","startPos","endPos","rotation","widthFactor","hAlign","vAlign","color","layer","RenderMText","formattedText","position","width","direction","attachment","lineSpacing","box","TextBox","bind","FeedText","get","set","path","GetCharPath","CharShape","fontFetcher","Font","curveSubdivision","glyph","advance","bounds","toShapes","vertices","indices","shapePoints","extractPoints","isClockWise","reverse","hole","holes","h","triangulateShape","_this","baseIdx","AddVertices","v","tuple","idx","GetVertices","size","map","clone","multiplyScalar","add","data","charMap","values","glyphs","unicode","fromCodePoint","scale","unitsPerEm","has","cmd","commands","type","moveTo","x","y","lineTo","quadraticCurveTo","x1","y1","bezierCurveTo","x2","y2","advanceWidth","xMin","xMax","yMin","yMax","GetKerning","c1","c2","i1","charToGlyphIndex","i2","getKerningValue","HAlign","freeze","LEFT","CENTER","RIGHT","ALIGNED","MIDDLE","FIT","VAlign","BASELINE","BOTTOM","TOP","MTextAttachment","TOP_LEFT","TOP_CENTER","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_CENTER","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT","charShapeProvider","curParagraph","Paragraph","paragraphs","spaceShape","FlattenItems","items","item","EntityType","SCOPE","content","curAlignment","TEXT","c","FeedSpace","FeedChar","PARAGRAPH","SetAlignment","NON_BREAKING_SPACE","PARAGRAPH_ALIGNMENT","a","alignment","Alignment","JUSTIFY","p","BuildLines","pWidth","GetMaxLineWidth","defaultAlignment","ApplyAlignment","Math","atan2","PI","lineHeight","height","lines","origin","Error","transform","translate","rotate","line","chunkIdx","startChunkIdx","numChunks","chunk","chunks","GetSpacingWidth","applyMatrix3","textBox","curChunk","_AddChunk","lastChar","PushSpace","boxWidth","curChunkIdx","curWidth","CommitLine","Line","chunkWidth","GetWidth","maxWidth","Chunk","paragraph","prevChunk","lastShape","leadingSpaces","spaceStartKerning","spaceEndKerning","withSpacing","_this$paragraph$align","offset","ForEachChunk","space","step","handler","i","curX","prevChar","prevFont","_endPos","_widthFactor","_hAlign","_vAlign","insertionPos","GetFitScale","Number","MIN_VALUE","GetFitRotation","f","console","warn","Type","TRIANGLES"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI- Running Projects/PiWeb Running/PiWeb-CMTI-Pdf trying/1stApril/Trying/PiWeb-CMTI (2)/PiWeb-CMTI/node_modules/dxf-viewer/src/TextRenderer.js"],"sourcesContent":["import {Entity} from \"./DxfScene\"\nimport {ShapePath} from \"three/src/extras/core/ShapePath.js\"\nimport {ShapeUtils} from \"three/src/extras/ShapeUtils.js\"\nimport {Matrix3, Vector2} from \"three\"\nimport {MTextFormatParser} from \"./MTextFormatParser\"\n\n/** Regex for parsing special characters in text entities. */\nconst SPECIAL_CHARS_RE = /(?:%%([dpcou%]))|(?:\\\\U\\+([0-9a-fA-F]{4}))/g\n\n/**\n * Parse special characters in text entities and convert them to corresponding unicode\n * characters.\n * https://knowledge.autodesk.com/support/autocad/learn-explore/caas/CloudHelp/cloudhelp/2019/ENU/AutoCAD-Core/files/GUID-518E1A9D-398C-4A8A-AC32-2D85590CDBE1-htm.html\n * @param {string} text Raw string.\n * @return {string} String with special characters replaced.\n */\nexport function ParseSpecialChars(text) {\n    return text.replaceAll(SPECIAL_CHARS_RE, (match, p1, p2) => {\n        if (p1 !== undefined) {\n            switch (p1) {\n            case \"d\":\n                return \"\\xb0\"\n            case \"p\":\n                return \"\\xb1\"\n            case \"c\":\n                return \"\\u2205\"\n            case \"o\":\n                /* Toggles overscore mode on and off, not implemented. */\n                return \"\"\n            case \"u\":\n                /* Toggles underscore mode on and off, not implemented. */\n                return \"\"\n            case \"%\":\n                return \"%\"\n            }\n        } else if (p2 !== undefined) {\n            const code = parseInt(p2, 16)\n            if (isNaN(code)) {\n                return match\n            }\n            return String.fromCharCode(code)\n        }\n        return match\n    })\n}\n\n/**\n * Helper class for rendering text.\n * Currently it is just basic very simplified implementation for MVP. Further work should include:\n *  * Support DXF text styles and weight.\n *  * Bitmap fonts generation in texture atlas for more optimal rendering.\n */\nexport class TextRenderer {\n\n    /**\n     * @param fontFetchers {?Function[]} List of font fetchers. Fetcher should return promise with\n     *  loaded font object (opentype.js). They are invoked only when necessary. Each glyph is being\n     *  searched sequentially in each provided font.\n     * @param options {?{}} See TextRenderer.DefaultOptions.\n     */\n    constructor(fontFetchers, options = null) {\n        this.fontFetchers = fontFetchers\n        this.fonts = []\n\n        this.options = Object.create(TextRenderer.DefaultOptions)\n        if (options) {\n            Object.assign(this.options, options)\n        }\n        /* Indexed by character, value is CharShape. */\n        this.shapes = new Map()\n        this.stubShapeLoaded = false\n        /* Shape to display if no glyph found in the specified fonts. May be null if fallback\n         * character can not be rendered as well.\n         */\n        this.stubShape = null\n    }\n\n    /** Fetch necessary fonts to render the provided text. Should be called for each string which\n     * will be rendered later.\n     * @param text {string}\n     * @return {Boolean} True if all characters can be rendered, false if none of the provided fonts\n     *  contains glyphs for some of the specified text characters.\n     */\n    async FetchFonts(text) {\n        if (!this.stubShapeLoaded) {\n            this.stubShapeLoaded = true\n            for (const char of Array.from(this.options.fallbackChar)) {\n                if (await this.FetchFonts(char)) {\n                    this.stubShape = this._CreateCharShape(char)\n                    break\n                }\n            }\n        }\n        let charMissing = false\n        for (const char of text) {\n            if (char.codePointAt(0) < 0x20) {\n                /* Control character. */\n                continue\n            }\n            let found = false\n            for (const font of this.fonts) {\n                if (font.HasChar(char)) {\n                    found = true\n                    break\n                }\n            }\n            if (found) {\n                continue\n            }\n            if (!this.fontFetchers) {\n                return false\n            }\n            while (this.fontFetchers.length > 0) {\n                const fetcher = this.fontFetchers.shift()\n                const font = await this._FetchFont(fetcher)\n                this.fonts.push(font)\n                if (font.HasChar(char)) {\n                    found = true\n                    break\n                }\n            }\n            if (!found) {\n                charMissing = true\n            }\n        }\n        return !charMissing\n    }\n\n    get canRender() {\n        return this.fonts !== null && this.fonts.length > 0\n    }\n\n    /** Get width in model space units for a single line of text.\n     * @param text {string}\n     * @param fontSize {number}\n     */\n    GetLineWidth(text, fontSize) {\n        const block = new TextBlock(fontSize)\n        for (const char of text) {\n            const shape = this._GetCharShape(char)\n            if (!shape) {\n                continue\n            }\n            block.PushChar(char, shape)\n        }\n        return block.GetCurrentPosition()\n    }\n\n    /**\n     * @param text {string}\n     * @param startPos {{x,y}}\n     * @param endPos {?{x,y}} TEXT group second alignment point.\n     * @param rotation {?number} Rotation attribute, deg.\n     * @param widthFactor {?number} Relative X scale factor (group 41)\n     * @param hAlign {?number} Horizontal text justification type code (group 72)\n     * @param vAlign {?number} Vertical text justification type code (group 73).\n     * @param color {number}\n     * @param layer {?string}\n     * @param fontSize {number}\n     * @return {Generator<Entity>} Rendering entities. Currently just indexed triangles for each\n     *  glyph.\n     */\n    *Render({text, startPos, endPos, rotation = 0, widthFactor = 1, hAlign = 0, vAlign = 0,\n             color, layer = null, fontSize}) {\n        const block = new TextBlock(fontSize)\n        for (const char of text) {\n            const shape = this._GetCharShape(char)\n            if (!shape) {\n                continue\n            }\n            block.PushChar(char, shape)\n        }\n        yield* block.Render(startPos, endPos, rotation, widthFactor, hAlign, vAlign, color, layer)\n    }\n\n    /**\n     * @param {MTextFormatEntity[]} formattedText Parsed formatted text.\n     * @param {{x, y}} position Insertion position.\n     * @param {Number} fontSize\n     * @param {?Number} width Text block width, no wrapping if undefined.\n     * @param {?Number} rotation Text block rotation in degrees.\n     * @param {?{x, y}} direction Text block orientation defined as direction vector. Takes a\n     * precedence over rotation if both provided.\n     * @param {number} attachment Attachment point, one of MTextAttachment values.\n     * @param {?number} lineSpacing Line spacing ratio relative to default one (5/3 of font size).\n     * @param {number} color\n     * @param {?string} layer\n     * @return {Generator<Entity>} Rendering entities. Currently just indexed triangles for each\n     *  glyph.\n     */\n    *RenderMText({formattedText, position, fontSize, width = null, rotation = 0, direction = null,\n                 attachment, lineSpacing = 1, color, layer = null}) {\n        const box = new TextBox(fontSize, this._GetCharShape.bind(this))\n        box.FeedText(formattedText)\n        yield* box.Render(position, width, rotation, direction, attachment, lineSpacing, color,\n                          layer)\n    }\n\n    /** @return {CharShape} Shape for the specified character.\n     * Each shape is indexed triangles mesh for font size 1. They should be further transformed as\n     * needed.\n     */\n    _GetCharShape(char) {\n        let shape = this.shapes.get(char)\n        if (shape) {\n            return shape\n        }\n        shape = this._CreateCharShape(char)\n        this.shapes.set(char, shape)\n        return shape\n    }\n\n    _CreateCharShape(char) {\n        for (const font of this.fonts) {\n            const path = font.GetCharPath(char)\n            if (path) {\n                return new CharShape(font, path, this.options)\n            }\n        }\n        return this.stubShape\n    }\n\n    async _FetchFont(fontFetcher) {\n        return new Font(await fontFetcher())\n    }\n}\n\n\nTextRenderer.DefaultOptions = {\n    /** Number of segments for each curve in a glyph. Currently Three.js does not have more\n     * adequate angle-based or length-based tessellation option.\n     */\n    curveSubdivision: 2,\n    /** Character to use when the specified fonts does not contain necessary glyph. Several ones can\n     * be specified, the first one available is used.\n     */\n    fallbackChar: \"\\uFFFD?\"\n}\n\n/** @typedef {Object} CharPath\n * @property advance {number}\n * @property path {?ShapePath}\n * @property bounds {xMin: number, xMax: number, yMin: number, yMax: number}\n */\n\nclass CharShape {\n    /**\n     * @param font {Font}\n     * @param glyph {CharPath}\n     * @param options {{}} Renderer options.\n     */\n    constructor(font, glyph, options) {\n        this.font = font\n        this.advance = glyph.advance\n        this.bounds = glyph.bounds\n        if (glyph.path) {\n            const shapes = glyph.path.toShapes(false)\n            this.vertices = []\n            this.indices = []\n            for (const shape of shapes) {\n                const shapePoints = shape.extractPoints(options.curveSubdivision)\n                /* Ensure proper vertices winding. */\n                if (!ShapeUtils.isClockWise(shapePoints.shape)) {\n                    shapePoints.shape = shapePoints.shape.reverse()\n                    for (const hole of shapePoints.holes) {\n                        if (ShapeUtils.isClockWise(hole)) {\n                            shapePoints.holes[h] = hole.reverse()\n                        }\n                    }\n                }\n                /* This call also removes duplicated end vertices. */\n                const indices = ShapeUtils.triangulateShape(shapePoints.shape, shapePoints.holes)\n\n                const _this = this\n                const baseIdx = this.vertices.length\n\n                function AddVertices(vertices) {\n                    for (const v of vertices) {\n                        _this.vertices.push(v)\n                    }\n                }\n\n                AddVertices(shapePoints.shape)\n                for (const hole of shapePoints.holes) {\n                    AddVertices(hole)\n                }\n                for (const tuple of indices) {\n                    for (const idx of tuple) {\n                        this.indices.push(baseIdx + idx)\n                    }\n                }\n            }\n\n        } else {\n            this.vertices = null\n        }\n    }\n\n    /** Get vertices array transformed to the specified position and with the specified size.\n     * @param position {{x,y}}\n     * @param size {number}\n     * @return {Vector2[]}\n     */\n    GetVertices(position, size) {\n        return this.vertices.map(v => v.clone().multiplyScalar(size).add(position))\n    }\n}\n\nclass Font {\n    constructor(data) {\n        this.data = data\n        this.charMap = new Map()\n        for (const glyph of Object.values(data.glyphs.glyphs)) {\n            if (glyph.unicode === undefined) {\n                continue\n            }\n            this.charMap.set(String.fromCodePoint(glyph.unicode), glyph)\n        }\n        /* Scale to transform the paths to size 1. */\n        //XXX not really clear what is the resulting unit, check, review and comment it later\n        // (100px?)\n        this.scale = 100 / ((this.data.unitsPerEm || 2048) * 72)\n    }\n\n    /**\n     * @param char {string} Character code point as string.\n     * @return {Boolean} True if the font has glyphs for the specified character.\n     */\n    HasChar(char) {\n        return this.charMap.has(char)\n    }\n\n    /**\n     * @param char {string} Character code point as string.\n     * @return {?CharPath} Path is scaled to size 1. Null if no glyphs for the specified characters.\n     */\n    GetCharPath(char) {\n        const glyph = this.charMap.get(char)\n        if (!glyph) {\n            return null\n        }\n        const scale = this.scale\n        const path = new ShapePath()\n        for (const cmd of glyph.path.commands) {\n            switch (cmd.type) {\n\n            case 'M':\n                path.moveTo(cmd.x * scale, cmd.y * scale)\n                break\n\n            case 'L':\n                path.lineTo(cmd.x * scale, cmd.y * scale)\n                break\n\n            case 'Q':\n                path.quadraticCurveTo(cmd.x1 * scale, cmd.y1 * scale,\n                                      cmd.x * scale, cmd.y * scale)\n                break\n\n            case 'C':\n                path.bezierCurveTo(cmd.x1 * scale, cmd.y1 * scale,\n                                   cmd.x2 * scale, cmd.y2 * scale,\n                                   cmd.x * scale, cmd.y * scale)\n                break\n            }\n        }\n        return {advance: glyph.advanceWidth * scale, path,\n                bounds: {xMin: glyph.xMin * scale, xMax: glyph.xMax * scale,\n                         yMin: glyph.yMin * scale, yMax: glyph.yMax * scale}}\n    }\n\n    /**\n     * @param c1 {string}\n     * @param c2 {string}\n     * @return {number}\n     */\n    GetKerning(c1, c2) {\n        const i1 = this.data.charToGlyphIndex(c1)\n        if (i1 === 0) {\n            return 0\n        }\n        const i2 = this.data.charToGlyphIndex(c1)\n        if (i2 === 0) {\n            return 0\n        }\n        return this.data.getKerningValue(i1, i2) * this.scale\n    }\n}\n\n/** TEXT group attribute 72 values. */\nexport const HAlign = Object.freeze({\n    LEFT: 0,\n    CENTER: 1,\n    RIGHT: 2,\n    ALIGNED: 3,\n    MIDDLE: 4,\n    FIT: 5\n})\n\n/** TEXT group attribute 73 values. */\nexport const VAlign = Object.freeze({\n    BASELINE: 0,\n    BOTTOM: 1,\n    MIDDLE: 2,\n    TOP: 3\n})\n\n/** MTEXT group attribute 71 values. */\nconst MTextAttachment = Object.freeze({\n    TOP_LEFT: 1,\n    TOP_CENTER: 2,\n    TOP_RIGHT: 3,\n    MIDDLE_LEFT: 4,\n    MIDDLE_CENTER: 5,\n    MIDDLE_RIGHT: 6,\n    BOTTOM_LEFT: 7,\n    BOTTOM_CENTER: 8,\n    BOTTOM_RIGHT: 9\n})\n\n/** Encapsulates layout calculations for a multiline-line text block. */\nclass TextBox {\n    /**\n     * @param fontSize\n     * @param {Function<CharShape, String>} charShapeProvider\n     */\n    constructor(fontSize, charShapeProvider) {\n        this.fontSize = fontSize\n        this.charShapeProvider = charShapeProvider\n        this.curParagraph = new TextBox.Paragraph(this)\n        this.paragraphs = [this.curParagraph]\n        this.spaceShape = charShapeProvider(\" \")\n    }\n\n    /** Add some formatted text to the box.\n     * @param {MTextFormatEntity[]} formattedText Parsed formatted text.\n     */\n    FeedText(formattedText) {\n        /* For now advanced formatting is not implemented so scopes are just flattened. */\n        function *FlattenItems(items) {\n            for (const item of items) {\n                if (item.type === MTextFormatParser.EntityType.SCOPE) {\n                    yield *FlattenItems(item.content)\n                } else {\n                    yield item\n                }\n            }\n        }\n\n        /* Null is default alignment which depends on attachment point. */\n        let curAlignment = null\n\n        for (const item of FlattenItems(formattedText)) {\n            switch(item.type) {\n\n            case MTextFormatParser.EntityType.TEXT:\n                for (const c of item.content) {\n                    if (c === \" \") {\n                        this.curParagraph.FeedSpace()\n                    } else {\n                        this.curParagraph.FeedChar(c)\n                    }\n                }\n                break\n\n            case MTextFormatParser.EntityType.PARAGRAPH:\n                this.curParagraph = new TextBox.Paragraph(this)\n                this.curParagraph.SetAlignment(curAlignment)\n                this.paragraphs.push(this.curParagraph)\n                break\n\n            case MTextFormatParser.EntityType.NON_BREAKING_SPACE:\n                this.curParagraph.FeedChar(\" \")\n                break\n\n            case MTextFormatParser.EntityType.PARAGRAPH_ALIGNMENT:\n                let a = null\n                switch (item.alignment) {\n                case \"l\":\n                    a = TextBox.Paragraph.Alignment.LEFT\n                    break\n                case \"c\":\n                    a = TextBox.Paragraph.Alignment.CENTER\n                    break\n                case \"r\":\n                    a = TextBox.Paragraph.Alignment.RIGHT\n                    break\n                case \"d\":\n                    a = TextBox.Paragraph.Alignment.JUSTIFY\n                    break\n                case \"j\":\n                    a = null\n                    break\n                }\n                this.curParagraph.SetAlignment(a)\n                curAlignment = a\n                break\n            }\n        }\n    }\n\n    *Render(position, width, rotation, direction, attachment, lineSpacing, color, layer) {\n        for (const p of this.paragraphs) {\n            p.BuildLines(width)\n        }\n        if (width === null || width === 0) {\n            /* Find maximal paragraph width which will define overall box width. */\n            width = 0\n            for (const p of this.paragraphs) {\n                const pWidth = p.GetMaxLineWidth()\n                if (pWidth > width) {\n                    width = pWidth\n                }\n            }\n        }\n\n        let defaultAlignment = TextBox.Paragraph.Alignment.LEFT\n        switch (attachment) {\n        case MTextAttachment.TOP_CENTER:\n        case MTextAttachment.MIDDLE_CENTER:\n        case MTextAttachment.BOTTOM_CENTER:\n            defaultAlignment = TextBox.Paragraph.Alignment.CENTER\n            break\n        case MTextAttachment.TOP_RIGHT:\n        case MTextAttachment.MIDDLE_RIGHT:\n        case MTextAttachment.BOTTOM_RIGHT:\n            defaultAlignment = TextBox.Paragraph.Alignment.RIGHT\n            break\n        }\n\n        for (const p of this.paragraphs) {\n            p.ApplyAlignment(width, defaultAlignment)\n        }\n\n        /* Box local coordinates have top-left corner origin, so Y values are negative. The\n         * specified attachment should be used to obtain attachment point offset relatively to box\n         * CS origin.\n         */\n\n        if (direction !== null) {\n            /* Direction takes precedence over rotation if specified. */\n            rotation = Math.atan2(direction.y, direction.x) * 180 / Math.PI\n        }\n\n        const lineHeight = lineSpacing * 5 * this.fontSize / 3\n\n        let height = 0\n        for (const p of this.paragraphs) {\n            if (p.lines === null) {\n                /* Paragraph always occupies at least one line. */\n                height++\n            } else {\n                height += p.lines.length\n            }\n        }\n        height *= lineHeight\n\n        let origin = new Vector2()\n        switch (attachment) {\n        case MTextAttachment.TOP_LEFT:\n            break\n        case MTextAttachment.TOP_CENTER:\n            origin.x = width / 2\n            break\n        case MTextAttachment.TOP_RIGHT:\n            origin.x = width\n            break\n        case MTextAttachment.MIDDLE_LEFT:\n            origin.y = -height / 2\n            break\n        case MTextAttachment.MIDDLE_CENTER:\n            origin.x = width / 2\n            origin.y = -height / 2\n            break\n        case MTextAttachment.MIDDLE_RIGHT:\n            origin.x = width\n            origin.y = -height / 2\n            break\n        case MTextAttachment.BOTTOM_LEFT:\n            origin.y = -height\n            break\n        case MTextAttachment.BOTTOM_CENTER:\n            origin.x = width / 2\n            origin.y = -height\n            break\n        case MTextAttachment.BOTTOM_RIGHT:\n            origin.x = width\n            origin.y = -height\n            break\n        default:\n            throw new Error(\"Unhandled alignment\")\n        }\n\n        /* Transform for each chunk insertion point. */\n        const transform = new Matrix3().translate(-origin.x, -origin.y)\n            .rotate(-rotation * Math.PI / 180).translate(position.x, position.y)\n\n        let y = -this.fontSize\n        for (const p of this.paragraphs) {\n            if (p.lines === null) {\n                y -= lineHeight\n                continue\n            }\n            for (const line of p.lines) {\n                for (let chunkIdx = line.startChunkIdx;\n                     chunkIdx < line.startChunkIdx + line.numChunks;\n                     chunkIdx++) {\n\n                    const chunk = p.chunks[chunkIdx]\n                    let x = chunk.position\n                    /* First chunk of continuation line never prepended by whitespace. */\n                    if (chunkIdx === 0 || chunkIdx !== line.startChunkIdx) {\n                        x += chunk.GetSpacingWidth()\n                    }\n                    const v = new Vector2(x, y)\n                    v.applyMatrix3(transform)\n                    if (chunk.block) {\n                        yield* chunk.block.Render(v, null, rotation, null,\n                                                  HAlign.LEFT, VAlign.BASELINE,\n                                                  color, layer)\n                    }\n                }\n                y -= lineHeight\n            }\n        }\n    }\n}\n\nTextBox.Paragraph = class {\n    constructor(textBox) {\n        this.textBox = textBox\n        this.chunks = []\n        this.curChunk = null\n        this.alignment = null\n        this.lines = null\n    }\n\n    /** Feed character for current chunk. Spaces should be fed by FeedSpace() method. If space\n     * character is fed into this method, it is interpreted as non-breaking space.\n     */\n    FeedChar(c) {\n        const shape = this.textBox.charShapeProvider(c)\n        if (shape === null) {\n            return\n        }\n        if (this.curChunk === null) {\n            this._AddChunk()\n        }\n        this.curChunk.PushChar(c, shape)\n    }\n\n    FeedSpace() {\n        if (this.curChunk === null || this.curChunk.lastChar !== null) {\n            this._AddChunk()\n        }\n        this.curChunk.PushSpace()\n    }\n\n    SetAlignment(alignment) {\n        this.alignment = alignment\n    }\n\n    /** Group chunks into lines.\n     *\n     * @param {?number} boxWidth Box width. Do not wrap lines if null (one line is created).\n     */\n    BuildLines(boxWidth) {\n        if (this.curChunk === null) {\n            return\n        }\n        this.lines = []\n        let startChunkIdx = 0\n        let curChunkIdx = 0\n        let curWidth = 0\n\n        const CommitLine = () => {\n            this.lines.push(new TextBox.Paragraph.Line(this,\n                                                       startChunkIdx,\n                                                       curChunkIdx - startChunkIdx,\n                                                       curWidth))\n            startChunkIdx = curChunkIdx\n            curWidth = 0\n        }\n\n        for (; curChunkIdx < this.chunks.length; curChunkIdx++) {\n            const chunk = this.chunks[curChunkIdx]\n            const chunkWidth = chunk.GetWidth(startChunkIdx === 0 || curChunkIdx !== startChunkIdx)\n            if (boxWidth !== null && boxWidth !== 0 && curWidth !== 0 &&\n                curWidth + chunkWidth > boxWidth) {\n\n                CommitLine()\n            }\n            chunk.position = curWidth\n            curWidth += chunkWidth\n        }\n        if (startChunkIdx !== curChunkIdx && curWidth !== 0) {\n            CommitLine()\n        }\n    }\n\n    GetMaxLineWidth() {\n        if (this.lines === null) {\n            return 0\n        }\n        let maxWidth = 0\n        for (const line of this.lines) {\n            if (line.width > maxWidth) {\n                maxWidth = line.width\n            }\n        }\n        return maxWidth\n    }\n\n    ApplyAlignment(boxWidth, defaultAlignment) {\n        if (this.lines) {\n            for (const line of this.lines) {\n                line.ApplyAlignment(boxWidth, defaultAlignment)\n            }\n        }\n    }\n\n    _AddChunk() {\n        this.curChunk = new TextBox.Paragraph.Chunk(this, this.textBox.fontSize, this.curChunk)\n        this.chunks.push(this.curChunk)\n    }\n}\n\nTextBox.Paragraph.Alignment = Object.freeze({\n    LEFT: 0,\n    CENTER: 1,\n    RIGHT: 2,\n    JUSTIFY: 3\n})\n\nTextBox.Paragraph.Chunk = class {\n    /**\n     * @param {TextBox.Paragraph} paragraph\n     * @param {number} fontSize\n     * @param {?TextBox.Paragraph.Chunk} prevChunk\n     */\n    constructor(paragraph, fontSize, prevChunk) {\n        this.paragraph = paragraph\n        this.fontSize = fontSize\n        this.prevChunk = prevChunk\n        this.lastChar = null\n        this.lastShape = null\n        this.leadingSpaces = 0\n        this.spaceStartKerning = null\n        this.spaceEndKerning = null\n        this.block = null\n        this.position = null\n    }\n\n    PushSpace() {\n        if (this.block) {\n            throw new Error(\"Illegal operation\")\n        }\n        this.leadingSpaces++\n    }\n\n    /**\n     * @param char {string}\n     * @param shape {CharShape}\n     */\n    PushChar(char, shape) {\n        if (this.spaceStartKerning === null) {\n            if (this.leadingSpaces === 0) {\n                this.spaceStartKerning = 0\n                this.spaceEndKerning = 0\n            } else {\n                if (this.prevChunk && this.prevChunk.lastShape &&\n                    this.prevChunk.fontSize === this.fontSize &&\n                    this.prevChunk.lastShape.font === this.paragraph.textBox.spaceShape.font) {\n\n                    this.spaceStartKerning =\n                        this.prevChunk.lastShape.font.GetKerning(this.prevChunk.lastChar, \" \")\n                } else {\n                    this.spaceStartKerning = 0\n                }\n                if (shape.font === this.paragraph.textBox.spaceShape.font) {\n                    this.spaceEndKerning = shape.font.GetKerning(\" \", char)\n                } else {\n                    this.spaceEndKerning = 0\n                }\n            }\n        }\n\n        if (this.block === null) {\n            this.block = new TextBlock(this.fontSize)\n        }\n        this.block.PushChar(char, shape)\n\n        this.lastChar = char\n        this.lastShape = shape\n    }\n\n    GetSpacingWidth() {\n        return (this.leadingSpaces * this.paragraph.textBox.spaceShape.advance +\n            this.spaceStartKerning + this.spaceEndKerning) * this.fontSize\n    }\n\n    GetWidth(withSpacing) {\n        if (this.block === null) {\n            return 0\n        }\n        let width = this.block.GetCurrentPosition()\n        if (withSpacing) {\n            width += this.GetSpacingWidth()\n        }\n        return width\n    }\n}\n\nTextBox.Paragraph.Line = class {\n    constructor(paragraph, startChunkIdx, numChunks, width) {\n        this.paragraph = paragraph\n        this.startChunkIdx = startChunkIdx\n        this.numChunks = numChunks\n        this.width = width\n    }\n\n    ApplyAlignment(boxWidth, defaultAlignment) {\n        let alignment = this.paragraph.alignment ?? defaultAlignment\n        switch (alignment) {\n        case TextBox.Paragraph.Alignment.LEFT:\n            break\n        case TextBox.Paragraph.Alignment.CENTER: {\n            const offset = (boxWidth - this.width) / 2\n            this.ForEachChunk(chunk => chunk.position += offset)\n            break\n        }\n        case TextBox.Paragraph.Alignment.RIGHT: {\n            const offset = boxWidth - this.width\n            this.ForEachChunk(chunk => chunk.position += offset)\n            break\n        }\n        case TextBox.Paragraph.Alignment.JUSTIFY: {\n            const space = boxWidth - this.width\n            if (space <= 0 || this.numChunks === 1) {\n                break\n            }\n            const step = space / (this.numChunks - 1)\n            let offset = 0\n            this.ForEachChunk(chunk => {\n                chunk.position += offset\n                offset += step\n            })\n            break\n        }\n        default:\n            throw new Error(\"Unhandled alignment: \" + this.paragraph.alignment)\n        }\n    }\n\n    ForEachChunk(handler) {\n        for (let i = 0; i < this.numChunks; i++) {\n            handler(this.paragraph.chunks[this.startChunkIdx + i])\n        }\n    }\n}\n\n/** Encapsulates calculations for a single-line text block. */\nclass TextBlock {\n    constructor(fontSize) {\n        this.fontSize = fontSize\n        /* Element is {shape: CharShape, vertices: ?{Vector2}[]} */\n        this.glyphs = []\n        this.bounds = null\n        this.curX = 0\n        this.prevChar = null\n        this.prevFont = null\n    }\n\n    /**\n     * @param char {string}\n     * @param shape {CharShape}\n     */\n    PushChar(char, shape) {\n        /* Initially store with just font size and characters position applied. Origin is the first\n         * character base point.\n         */\n        let offset\n        if (this.prevChar !== null && this.prevFont === shape.font) {\n            offset = this.prevFont.GetKerning(this.prevChar, char)\n        } else {\n            offset = 0\n        }\n        const x = this.curX + offset * this.fontSize\n        let vertices\n        if (shape.vertices) {\n            vertices = shape.GetVertices({x, y: 0}, this.fontSize)\n            const xMin = x + shape.bounds.xMin * this.fontSize\n            const xMax = x + shape.bounds.xMax * this.fontSize\n            const yMin = shape.bounds.yMin * this.fontSize\n            const yMax = shape.bounds.yMax * this.fontSize\n            /* Leading/trailing spaces not accounted intentionally now. */\n            if (this.bounds === null) {\n                this.bounds = {xMin, xMax, yMin, yMax}\n            } else {\n                if (xMin < this.bounds.xMin) {\n                    this.bounds.xMin = xMin\n                }\n                if (yMin < this.bounds.yMin) {\n                    this.bounds.yMin = yMin\n                }\n                if (xMax > this.bounds.xMax) {\n                    this.bounds.xMax = xMax\n                }\n                if (yMax > this.bounds.yMax) {\n                    this.bounds.yMax = yMax\n                }\n            }\n        } else {\n            vertices = null\n        }\n        this.curX = x + shape.advance * this.fontSize\n        this.glyphs.push({shape, vertices})\n        this.prevChar = char\n        this.prevFont = shape.font\n    }\n\n    GetCurrentPosition() {\n        return this.curX\n    }\n\n    /**\n     * @param startPos {{x,y}} TEXT group first alignment point.\n     * @param endPos {?{x,y}} TEXT group second alignment point.\n     * @param rotation {?number} Rotation attribute, deg.\n     * @param widthFactor {?number} Relative X scale factor (group 41).\n     * @param hAlign {?number} Horizontal text justification type code (group 72).\n     * @param vAlign {?number} Vertical text justification type code (group 73).\n     * @param color {number}\n     * @param layer {?string}\n     * @return {Generator<Entity>} Rendering entities. Currently just indexed triangles for each\n     *  glyph.\n     */\n    *Render(startPos, endPos, rotation, widthFactor, hAlign, vAlign, color, layer) {\n\n        if (this.bounds === null) {\n            return\n        }\n\n        endPos = endPos ?? startPos\n        if (rotation) {\n            rotation *= -Math.PI / 180\n        } else {\n            rotation = 0\n        }\n        widthFactor = widthFactor ?? 1\n        hAlign = hAlign ?? HAlign.LEFT\n        vAlign = vAlign ?? VAlign.BASELINE\n\n        let origin = new Vector2()\n        let scale = new Vector2(widthFactor, 1)\n        let insertionPos =\n            (hAlign === HAlign.LEFT && vAlign === VAlign.BASELINE) ||\n            hAlign === HAlign.FIT || hAlign === HAlign.ALIGNED ?\n            new Vector2(startPos.x, startPos.y) : new Vector2(endPos.x, endPos.y)\n\n        const GetFitScale = () => {\n            const width = endPos.x - startPos.x\n            if (width < Number.MIN_VALUE * 2) {\n                return widthFactor\n            }\n            return width / (this.bounds.xMax - this.bounds.xMin)\n        }\n\n        const GetFitRotation = () => {\n            return -Math.atan2(endPos.y - startPos.y, endPos.x - startPos.x)\n        }\n\n        switch (hAlign) {\n        case HAlign.LEFT:\n            origin.x = this.bounds.xMin\n            break\n        case HAlign.CENTER:\n            origin.x = (this.bounds.xMax - this.bounds.xMin) / 2\n            break\n        case HAlign.RIGHT:\n            origin.x = this.bounds.xMax\n            break\n        case HAlign.MIDDLE:\n            origin.x = (this.bounds.xMax - this.bounds.xMin) / 2\n            origin.y = (this.bounds.yMax - this.bounds.yMin) / 2\n            break\n        case HAlign.ALIGNED: {\n            const f = GetFitScale()\n            scale.x = f\n            scale.y = f\n            rotation = GetFitRotation()\n            break\n        }\n        case HAlign.FIT:\n            scale.x = GetFitScale()\n            rotation = GetFitRotation()\n            break\n        default:\n            console.warn(\"Unrecognized hAlign value: \" + hAlign)\n        }\n\n        switch (vAlign) {\n        case VAlign.BASELINE:\n            break\n        case VAlign.BOTTOM:\n            origin.y = this.bounds.yMin\n            break\n        case VAlign.MIDDLE:\n            origin.y = (this.bounds.yMax - this.bounds.yMin) / 2\n            break\n        case VAlign.TOP:\n            origin.y = this.bounds.yMax\n            break\n        default:\n            console.warn(\"Unrecognized vAlign value: \" + vAlign)\n        }\n\n        const transform = new Matrix3().translate(-origin.x, -origin.y).scale(scale.x, scale.y)\n            .rotate(rotation).translate(insertionPos.x, insertionPos.y)\n\n        for (const glyph of this.glyphs) {\n            if (glyph.vertices) {\n                for (const v of glyph.vertices) {\n                    v.applyMatrix3(transform)\n                }\n                yield new Entity({\n                   type: Entity.Type.TRIANGLES,\n                   vertices: glyph.vertices,\n                   indices: glyph.shape.indices,\n                   layer, color\n               })\n            }\n        }\n    }\n}\n"],"mappings":"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"}]}