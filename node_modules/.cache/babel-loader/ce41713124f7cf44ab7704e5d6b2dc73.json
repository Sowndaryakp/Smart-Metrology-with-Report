{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\parser\\ParseHelpers.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\parser\\ParseHelpers.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEFVVE9fQ0FEX0NPTE9SX0lOREVYIGZyb20gJy4vQXV0b0NhZENvbG9ySW5kZXgnOwppbXBvcnQgRXh0ZW5kZWREYXRhUGFyc2VyIGZyb20gJy4vRXh0ZW5kZWREYXRhUGFyc2VyJzsKCi8qKgogKiBSZXR1cm5zIHRoZSB0cnVlY29sb3IgdmFsdWUgb2YgdGhlIGdpdmVuIEF1dG9DYWQgY29sb3IgaW5kZXggdmFsdWUKICogQHJldHVybiB7TnVtYmVyfSB0cnVlY29sb3IgdmFsdWUgYXMgYSBudW1iZXIKICovCmV4cG9ydCBmdW5jdGlvbiBnZXRBY2FkQ29sb3IoaW5kZXgpIHsKICByZXR1cm4gQVVUT19DQURfQ09MT1JfSU5ERVhbaW5kZXhdOwp9CgovKioKICogUGFyc2VzIHRoZSAyRCBvciAzRCBjb29yZGluYXRlLCB2ZWN0b3IsIG9yIHBvaW50LiBXaGVuIGNvbXBsZXRlLAogKiB0aGUgc2Nhbm5lciByZW1haW5zIG9uIHRoZSBsYXN0IGdyb3VwIG9mIHRoZSBjb29yZGluYXRlLgogKiBAcGFyYW0geyp9IHNjYW5uZXIKICovCmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBvaW50KHNjYW5uZXIpIHsKICB2YXIgcG9pbnQgPSB7fTsKCiAgLy8gUmVyZWFkIGdyb3VwIGZvciB0aGUgZmlyc3QgY29vcmRpbmF0ZQogIHNjYW5uZXIucmV3aW5kKCk7CiAgdmFyIGN1cnIgPSBzY2FubmVyLm5leHQoKTsKICB2YXIgY29kZSA9IGN1cnIuY29kZTsKICBwb2ludC54ID0gY3Vyci52YWx1ZTsKICBjb2RlICs9IDEwOwogIGN1cnIgPSBzY2FubmVyLm5leHQoKTsKICBpZiAoY3Vyci5jb2RlICE9PSBjb2RlKSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGNvZGUgZm9yIHBvaW50IHZhbHVlIHRvIGJlICcgKyBjb2RlICsgJyBidXQgZ290ICcgKyBjdXJyLmNvZGUgKyAnLicpOwogIHBvaW50LnkgPSBjdXJyLnZhbHVlOwogIGNvZGUgKz0gMTA7CiAgY3VyciA9IHNjYW5uZXIubmV4dCgpOwogIGlmIChjdXJyLmNvZGUgIT09IGNvZGUpIHsKICAgIC8vIE9ubHkgdGhlIHggYW5kIHkgYXJlIHNwZWNpZmllZC4gRG9uJ3QgcmVhZCB6LgogICAgc2Nhbm5lci5yZXdpbmQoKTsgLy8gTGV0IHRoZSBjYWxsaW5nIGNvZGUgYWR2YW5jZSBvZmYgdGhlIHBvaW50CiAgICByZXR1cm4gcG9pbnQ7CiAgfQogIHBvaW50LnogPSBjdXJyLnZhbHVlOwogIHJldHVybiBwb2ludDsKfQoKLyoqIFNvbWUgZW50aXRpZXMgbWF5IGNvbnRhaW4gZW1iZWRkZWQgb2JqZWN0IHdoaWNoIGlzIHN0YXJ0ZWQgYnkgZ3JvdXAgMTAxLiBBbGwgdGhlIHJlc3QgZGF0YSB1bnRpbAogKiBlbmQgb2YgZW50aXR5IHNob3VsZCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgZW50aXR5IGF0dHJpYnV0ZXMuIFRoZXJlIGlzIG5vIGRvY3VtZW50YXRpb24gZm9yIHRoaXMKICogZmVhdHVyZS4KICogQHBhcmFtIHNjYW5uZXIKICovCmV4cG9ydCBmdW5jdGlvbiBza2lwRW1iZWRkZWRPYmplY3Qoc2Nhbm5lcikgewogIC8qIEVuc3VyZSBwcm9wZXIgc3RhcnQgZ3JvdXAuICovCiAgc2Nhbm5lci5yZXdpbmQoKTsKICBsZXQgY3VyciA9IHNjYW5uZXIubmV4dCgpOwogIGlmIChjdXJyLmNvZGUgIT09IDEwMSkgewogICAgdGhyb3cgbmV3IEVycm9yKCJCYWQgY2FsbCBmb3Igc2tpcEVtYmVkZGVkT2JqZWN0KCkiKTsKICB9CiAgZG8gewogICAgY3VyciA9IHNjYW5uZXIubmV4dCgpOwogIH0gd2hpbGUgKGN1cnIuY29kZSAhPT0gMCk7CiAgc2Nhbm5lci5yZXdpbmQoKTsKfQoKLyoqCiAqIEF0dGVtcHRzIHRvIHBhcnNlIGNvZGVzIGNvbW1vbiB0byBhbGwgZW50aXRpZXMuIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ3JvdXAKICogd2FzIGhhbmRsZWQgYnkgdGhpcyBmdW5jdGlvbi4KICogQHBhcmFtIHsqfSBlbnRpdHkgLSB0aGUgZW50aXR5IGN1cnJlbnRseSBiZWluZyBwYXJzZWQKICogQHBhcmFtIHsqfSBjdXJyIC0gdGhlIGN1cnJlbnQgZ3JvdXAgYmVpbmcgcGFyc2VkCiAqLwpleHBvcnQgZnVuY3Rpb24gY2hlY2tDb21tb25FbnRpdHlQcm9wZXJ0aWVzKGVudGl0eSwgY3Vyciwgc2Nhbm5lcikgewogIGxldCB4ZGF0YVBhcnNlciA9IG51bGw7CiAgd2hpbGUgKGN1cnIuY29kZSA+PSAxMDAwKSB7CiAgICBpZiAoeGRhdGFQYXJzZXIgPT0gbnVsbCkgewogICAgICB4ZGF0YVBhcnNlciA9IG5ldyBFeHRlbmRlZERhdGFQYXJzZXIoKTsKICAgIH0KICAgIGlmICh4ZGF0YVBhcnNlci5GZWVkKGN1cnIpKSB7CiAgICAgIHhkYXRhUGFyc2VyLkZpbmlzaChlbnRpdHkpOwogICAgICB4ZGF0YVBhcnNlciA9IG51bGw7CiAgICB9IGVsc2UgewogICAgICBjdXJyID0gc2Nhbm5lci5uZXh0KCk7CiAgICB9CiAgfQogIGlmICh4ZGF0YVBhcnNlcikgewogICAgeGRhdGFQYXJzZXIuRmluaXNoKGVudGl0eSk7CiAgICAvKiBHcm91cHMgZm9sbG93aW5nIFhEQVRBIHNob3VsZCBiZSBwYXJzZWQgb24gbmV4dCBpdGVyYXRpb24uICovCiAgICBzY2FubmVyLnJld2luZCgpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIHN3aXRjaCAoY3Vyci5jb2RlKSB7CiAgICBjYXNlIDA6CiAgICAgIGVudGl0eS50eXBlID0gY3Vyci52YWx1ZTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDU6CiAgICAgIGVudGl0eS5oYW5kbGUgPSBjdXJyLnZhbHVlOwogICAgICBicmVhazsKICAgIGNhc2UgNjoKICAgICAgZW50aXR5LmxpbmVUeXBlID0gY3Vyci52YWx1ZTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDg6CiAgICAgIC8vIExheWVyIG5hbWUKICAgICAgZW50aXR5LmxheWVyID0gY3Vyci52YWx1ZTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDQ4OgogICAgICBlbnRpdHkubGluZVR5cGVTY2FsZSA9IGN1cnIudmFsdWU7CiAgICAgIGJyZWFrOwogICAgY2FzZSA2MDoKICAgICAgZW50aXR5LnZpc2libGUgPSBjdXJyLnZhbHVlID09PSAwOwogICAgICBicmVhazsKICAgIGNhc2UgNjI6CiAgICAgIC8vIEFjYWQgSW5kZXggQ29sb3IuIDAgaW5oZXJpdHMgQnlCbG9jay4gMjU2IGluaGVyaXRzIEJ5TGF5ZXIuIERlZmF1bHQgaXMgYnlsYXllcgogICAgICBlbnRpdHkuY29sb3JJbmRleCA9IGN1cnIudmFsdWU7CiAgICAgIGVudGl0eS5jb2xvciA9IGdldEFjYWRDb2xvcihNYXRoLmFicyhjdXJyLnZhbHVlKSk7CiAgICAgIGJyZWFrOwogICAgY2FzZSA2NzoKICAgICAgZW50aXR5LmluUGFwZXJTcGFjZSA9IGN1cnIudmFsdWUgIT09IDA7CiAgICAgIGJyZWFrOwogICAgY2FzZSAxMDA6CiAgICAgIC8vaWdub3JlCiAgICAgIGJyZWFrOwogICAgY2FzZSAzMzA6CiAgICAgIGVudGl0eS5vd25lckhhbmRsZSA9IGN1cnIudmFsdWU7CiAgICAgIGJyZWFrOwogICAgY2FzZSAzNDc6CiAgICAgIGVudGl0eS5tYXRlcmlhbE9iamVjdEhhbmRsZSA9IGN1cnIudmFsdWU7CiAgICAgIGJyZWFrOwogICAgY2FzZSAzNzA6CiAgICAgIC8vRnJvbSBodHRwczovL3d3dy53b3V0d2FyZS5jb20vRm9ydW0vVG9waWMvOTU1L2xpbmV3ZWlnaHQ/cmV0dXJuVXJsPSUyRkZvcnVtJTJGVXNlclBvc3RzJTNGdXNlcklkJTNENDc4MjYyMzE5CiAgICAgIC8vIEFuIGludGVnZXIgcmVwcmVzZW50aW5nIDEwMHRoIG9mIG1tLCBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczoKICAgICAgLy8gMCwgNSwgOSwgMTMsIDE1LCAxOCwgMjAsIDI1LCAzMCwgMzUsIDQwLCA1MCwgNTMsIDYwLCA3MCwgODAsIDkwLCAxMDAsIDEwNiwgMTIwLCAxNDAsIDE1OCwgMjAwLCAyMTEuCiAgICAgIC8vIC0zID0gU1RBTkRBUkQsIC0yID0gQllMQVlFUiwgLTEgPSBCWUJMT0NLCiAgICAgIGVudGl0eS5saW5ld2VpZ2h0ID0gY3Vyci52YWx1ZTsKICAgICAgYnJlYWs7CiAgICBjYXNlIDQyMDoKICAgICAgLy8gVHJ1ZUNvbG9yIENvbG9yCiAgICAgIGVudGl0eS5jb2xvciA9IGN1cnIudmFsdWU7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKfQ=="},{"version":3,"names":["AUTO_CAD_COLOR_INDEX","ExtendedDataParser","getAcadColor","index","parsePoint","scanner","point","rewind","curr","next","code","x","value","Error","y","z","skipEmbeddedObject","checkCommonEntityProperties","entity","xdataParser","Feed","Finish","type","handle","lineType","layer","lineTypeScale","visible","colorIndex","color","Math","abs","inPaperSpace","ownerHandle","materialObjectHandle","lineweight"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI ALL PROJECTS/GERB-INDIA(CLIENT)/GerbIndiaDashboard-CMTI-Full/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/parser/ParseHelpers.js"],"sourcesContent":["import AUTO_CAD_COLOR_INDEX from './AutoCadColorIndex';\nimport ExtendedDataParser from './ExtendedDataParser';\n\n/**\n * Returns the truecolor value of the given AutoCad color index value\n * @return {Number} truecolor value as a number\n */\nexport function getAcadColor(index) {\n    return AUTO_CAD_COLOR_INDEX[index];\n}\n\n/**\n * Parses the 2D or 3D coordinate, vector, or point. When complete,\n * the scanner remains on the last group of the coordinate.\n * @param {*} scanner\n */\nexport function parsePoint(scanner) {\n    var point = {};\n\n    // Reread group for the first coordinate\n    scanner.rewind();\n    var curr = scanner.next();\n\n    var code = curr.code;\n    point.x = curr.value;\n\n    code += 10;\n    curr = scanner.next();\n    if(curr.code !== code)\n        throw new Error('Expected code for point value to be ' + code +\n        ' but got ' + curr.code + '.');\n    point.y = curr.value;\n\n    code += 10;\n    curr = scanner.next();\n    if(curr.code !== code)\n    {\n        // Only the x and y are specified. Don't read z.\n        scanner.rewind(); // Let the calling code advance off the point\n        return point;\n    }\n    point.z = curr.value;\n\n    return point;\n}\n\n/** Some entities may contain embedded object which is started by group 101. All the rest data until\n * end of entity should not be interpreted as entity attributes. There is no documentation for this\n * feature.\n * @param scanner\n */\nexport function skipEmbeddedObject(scanner) {\n    /* Ensure proper start group. */\n    scanner.rewind()\n    let curr = scanner.next()\n    if (curr.code !== 101) {\n        throw new Error(\"Bad call for skipEmbeddedObject()\")\n    }\n    do {\n        curr = scanner.next()\n    } while (curr.code !== 0)\n    scanner.rewind()\n}\n\n/**\n * Attempts to parse codes common to all entities. Returns true if the group\n * was handled by this function.\n * @param {*} entity - the entity currently being parsed\n * @param {*} curr - the current group being parsed\n */\nexport function checkCommonEntityProperties(entity, curr, scanner) {\n    let xdataParser = null\n    while (curr.code >= 1000) {\n        if (xdataParser == null) {\n            xdataParser = new ExtendedDataParser()\n        }\n        if (xdataParser.Feed(curr)) {\n            xdataParser.Finish(entity)\n            xdataParser = null\n        } else {\n            curr = scanner.next()\n        }\n    }\n    if (xdataParser) {\n        xdataParser.Finish(entity)\n        /* Groups following XDATA should be parsed on next iteration. */\n        scanner.rewind()\n        return true\n    }\n\n    switch(curr.code) {\n        case 0:\n            entity.type = curr.value;\n            break;\n        case 5:\n            entity.handle = curr.value;\n            break;\n        case 6:\n            entity.lineType = curr.value;\n            break;\n        case 8: // Layer name\n            entity.layer = curr.value;\n            break;\n        case 48:\n            entity.lineTypeScale = curr.value;\n            break;\n        case 60:\n            entity.visible = curr.value === 0;\n            break;\n        case 62: // Acad Index Color. 0 inherits ByBlock. 256 inherits ByLayer. Default is bylayer\n            entity.colorIndex = curr.value;\n            entity.color = getAcadColor(Math.abs(curr.value));\n            break;\n        case 67:\n            entity.inPaperSpace = curr.value !== 0;\n            break;\n        case 100:\n            //ignore\n            break;\n        case 330:\n            entity.ownerHandle = curr.value;\n            break;\n        case 347:\n            entity.materialObjectHandle = curr.value;\n            break;\n        case 370:\n            //From https://www.woutware.com/Forum/Topic/955/lineweight?returnUrl=%2FForum%2FUserPosts%3FuserId%3D478262319\n            // An integer representing 100th of mm, must be one of the following values:\n            // 0, 5, 9, 13, 15, 18, 20, 25, 30, 35, 40, 50, 53, 60, 70, 80, 90, 100, 106, 120, 140, 158, 200, 211.\n            // -3 = STANDARD, -2 = BYLAYER, -1 = BYBLOCK\n            entity.lineweight = curr.value;\n            break;\n        case 420: // TrueColor Color\n            entity.color = curr.value;\n            break;\n        default:\n            return false;\n    }\n    return true;\n}\n"],"mappings":"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"}]}