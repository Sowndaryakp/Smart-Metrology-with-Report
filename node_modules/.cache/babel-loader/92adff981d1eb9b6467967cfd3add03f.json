{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\src\\components\\DataTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\src\\components\\DataTable.vue","mtime":1718001648140},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["axios","name","props","uploadedFileContent","Array","fileName","String","inspection_report_number","project_number","project_name","group","part_number","part_name","selectedFileName","uploadedFileContentnew","data","selectedHandle","websocket","currentDate","methods","fetchDeviceDetails","response","fetch","json","devices","length","firstDevice","console","log","error","handleRowClick","handle","$emit","editRow","index","$set","saveEditedRow","onSubmitData","dataToSubmit","filter","row","measured_value","forEach","undefined","updateMeasuredValue","handleValuePair","split","map","item","trim","find","pair","startsWith","measuredValue","selectedIndex","findIndex","selectedRow","$refs","tableRows","cells","textContent","handleDxfFileLoaded","initializeWebSocket","close","WebSocket","onopen","onclose","onerror","onmessage","event","updateCurrentDate","now","Date","options","weekday","year","month","day","hour","minute","second","hour12","toLocaleDateString","fetchData","get","watch","newHandle","newFileName","mounted","status","setInterval"],"sources":["src/components/DataTable.vue"],"sourcesContent":["<template>\r\n  <div class=\"data-table\">\r\n    <div class=\"report-header\">\r\n      <p>{{ currentDate }}</p>\r\n      <h4>REPORT</h4>\r\n      <img src=\"@/assets/images/cmti.png\" alt=\"Logo\" class=\"Logo\" height=\"70\" width=\"120\" />\r\n    </div>\r\n    <div class=\"report-body\">\r\n  <div class=\"report-section\">\r\n    <table class=\"table-data\">\r\n      <tr>\r\n        <th class=\"table-data1\">INSPECTION REPORT</th>\r\n        <td><input type=\"text\" v-model=\"inspection_report_number\" placeholder=\"Enter inspection report\"></td>\r\n      </tr>\r\n      <tr>\r\n        <th>PROJECT NUMBER</th>\r\n        <td><input type=\"text\" v-model=\"project_number\" placeholder=\"Enter project number\"></td>\r\n      </tr>\r\n      <tr>\r\n        <th>PART NUMBER</th>\r\n        <td><input type=\"text\" v-model=\"part_number\" placeholder=\"Enter part numer\"></td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n\r\n  <div class=\"report-section\">\r\n    <table>\r\n      <tr>\r\n        <th>GROUP</th>\r\n        <td><input type=\"text\" v-model=\"group\" placeholder=\"Enter group\"></td>\r\n      </tr>\r\n      <tr>\r\n        <th>PROJECT NAME</th>\r\n        <td><input type=\"text\" v-model=\"project_name\" placeholder=\"Enter project name\"></td>\r\n      </tr>\r\n      <tr>\r\n        <th>PART NAME</th>\r\n        <td><input type=\"text\" v-model=\"part_name\" placeholder=\"Enter part name\"></td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n</div>\r\n\r\n    <div v-if=\"uploadedFileContent && uploadedFileContent.length > 0\">\r\n      <table class=\"dimension-table\">\r\n        <thead>\r\n          <tr class=\"header\">\r\n            <th>Sl No</th>\r\n            <!-- <th>Handle</th> -->\r\n            <th>Actual Measurement</th>\r\n            <th>Upper Tolerance</th>\r\n            <th>Lower Tolerance</th>\r\n            <th>Measured Value</th>\r\n            <!-- <th>Status</th> -->\r\n            <!-- <th>Actions</th>  -->\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(dim, index) in uploadedFileContent\" :key=\"index\" :class=\"{ 'selected-row': dim.handle === selectedHandle }\" @click=\"handleRowClick(dim.handle)\" @dblclick=\"editRow(index)\" ref=\"tableRows\">\r\n            <td>\r\n              <span v-if=\"!dim.editing\">{{ dim.sl_no }}</span>\r\n              <input v-else v-model=\"dim.sl_no\" type=\"text\">\r\n            </td>\r\n            <!-- <td>\r\n              <span v-if=\"!dim.editing\">{{   }}</span>\r\n              <input v-else v-model=\"dim.handle\" type=\"text\">\r\n            </td> -->\r\n            <td>\r\n              <span v-if=\"!dim.editing\">{{ dim.actual_measurement }}</span>\r\n              <input v-else v-model=\"dim.actual_measurement\" type=\"text\">\r\n            </td>\r\n            <td>\r\n              <span v-if=\"!dim.editing\">{{ dim.upper_tolerance }}</span>\r\n              <input v-else v-model=\"dim.upper_tolerance\" type=\"text\">\r\n            </td>\r\n            <td>\r\n              <span v-if=\"!dim.editing\">{{ dim.lower_tolerance }}</span>\r\n              <input v-else v-model=\"dim.lower_tolerance\" type=\"text\">\r\n            </td>\r\n            <td>\r\n              <span v-if=\"!dim.editing\">{{ dim.measured_value }}</span>\r\n              <input v-else v-model=\"dim.measured_value\" type=\"text\">\r\n            </td>\r\n            <!-- <td>\r\n              <span v-if=\"!dim.editing\">{{ dim.status }}</span>\r\n              <input v-else v-model=\"dim.status\" type=\"text\"> \r\n            </td>\r\n            <td>\r\n              <button v-if=\"!dim.editing\" @click=\"editRow(index)\" class=\"edit-button\">Edit</button>\r\n              <button v-else @click=\"saveEditedRow(index)\" class=\"save-button\">Save</button>\r\n            </td> -->\r\n\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <button @click=\"onSubmitData\" class=\"set-button\">\r\n        <img class=\"set-img\" width=\"28\" height=\"24\" src=\"https://img.icons8.com/sf-black-filled/64/FFFFFF/save.png\" alt=\"save\"/>\r\n        Save Data\r\n      </button>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'DataTable',\r\n  props: {\r\n    uploadedFileContent: Array,\r\n    fileName: String,\r\n    inspection_report_number: String, // New props\r\n    project_number: String, // New props\r\n    project_name: String, // New props\r\n    group: String, // New props\r\n    part_number: String, // New props\r\n    part_name: String, // New props\r\n    selectedFileName: String,\r\n    uploadedFileContentnew:String\r\n  },\r\n  data() {\r\n    return {\r\n      selectedHandle: null,\r\n      websocket: null, // Store the WebSocket connection,\r\n      inspection_report_number: String, // New props\r\n      project_number: String, // New props\r\n      project_name: String, // New props\r\n      group: String, // New props\r\n      part_number: String, // New props\r\n      part_name: String, // New props\r\n      currentDate: '',\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchDeviceDetails() {\r\n      try {\r\n        const response = await fetch(\"http://172.18.100.240:9999/devices\");\r\n        const data = await response.json();\r\n\r\n        if (data && data.devices && data.devices.length > 0) {\r\n          const firstDevice = data.devices[0];\r\n          this.inspection_report_number = firstDevice.inspection_report_number || '';\r\n          this.project_number = firstDevice.project_number || '';\r\n          // Assign values to other data properties for PROJECT NAME, GROUP, PART NUMBER, PART NAME\r\n        } else {\r\n          console.log(\"No devices received from the server.\");\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error fetching device details: \", error);\r\n      }\r\n    },\r\n    handleRowClick(handle) {\r\n      this.selectedHandle = handle;\r\n      this.$emit(\"handle-click\", handle);\r\n      this.$emit(\"handle-click-dxf\", handle); // Emit a custom event for the DXF diagram\r\n    },\r\n\r\n    editRow(index) {\r\n      this.$set(this.uploadedFileContent[index], 'editing', true);\r\n    },\r\n\r\n    saveEditedRow(index) {\r\n      this.$set(this.uploadedFileContent[index], 'editing', false);\r\n    },\r\n\r\n    onSubmitData() {\r\n      const dataToSubmit = {\r\n        inspection_report_number: this.inspection_report_number,\r\n        project_number: this.project_number,\r\n        project_name: this.project_name,\r\n        group: this.group,\r\n        part_number: this.part_number,\r\n        part_name: this.part_name,\r\n        uploadedFileContent: this.uploadedFileContent\r\n      };\r\n      this.$emit('submit-data', dataToSubmit);\r\n      console.log(\"DataTable ALL data Comming \", dataToSubmit);\r\n      // Filter out only the selected rows and emit their data\r\n      const uploadedFileContent = this.uploadedFileContent.filter(row => row.measured_value !== null);\r\n      // Set measured value to null for the remaining rows\r\n      this.uploadedFileContent.forEach(row => {\r\n        if (row.measured_value === undefined) {\r\n          row.measured_value = 0;\r\n        }\r\n      });\r\n      // Emit event with the data of selected rows\r\n      this.$emit('set-data', dataToSubmit);\r\n      this.$emit('save-request');\r\n      console.log(\"DataTable set data:\", uploadedFileContent);\r\n      console.log(\"SETTING THE DATA\");\r\n    },\r\n    updateMeasuredValue(data) {\r\n      const handleValuePair = data.split(',').map(item => item.trim());\r\n      const handle = handleValuePair.find(pair => pair.startsWith('Handle')).split(':')[1].trim();\r\n      const measuredValue = handleValuePair.find(pair => pair.startsWith('measured_value')).split(':')[1].trim();\r\n      // Find the index of the selected row\r\n      const selectedIndex = this.uploadedFileContent.findIndex(row => row.handle === handle);\r\n      if (selectedIndex !== -1) {\r\n        // Update the measured_value in the uploadedFileContent\r\n        this.uploadedFileContent[selectedIndex].measured_value = measuredValue;\r\n        // Use the ref to update the corresponding row in the table\r\n        const selectedRow = this.$refs.tableRows[selectedIndex];\r\n        if (selectedRow) {\r\n          selectedRow.cells[4].textContent = measuredValue; // Assuming measured_value is the 5th column\r\n        }\r\n      }\r\n    },\r\n    handleDxfFileLoaded(data) {\r\n      // Update uploadedFileContent when the DXF file is loaded\r\n      this.uploadedFileContent = data;\r\n    },\r\n    initializeWebSocket(handle) {\r\n      if (this.websocket) {\r\n        this.websocket.close();\r\n      }\r\n      // WebSocket connection to send the selected handle to the backend\r\n      this.websocket = new WebSocket(`ws://172.18.100.240:9999/ws/${handle}`);\r\n      // Handle WebSocket events\r\n      this.websocket.onopen = () => {\r\n        console.log(\"WebSocket connection opened\");\r\n      };\r\n      this.websocket.onclose = () => {\r\n        console.log(\"WebSocket connection closed\");\r\n      };\r\n      this.websocket.onerror = (error) => {\r\n        console.error(\"WebSocket error:\", error);\r\n      };\r\n      this.websocket.onmessage = (event) => {\r\n        // Update the measured value when new data is received\r\n        this.updateMeasuredValue(event.data);\r\n      };\r\n    },\r\n    updateCurrentDate() {\r\n      const now = new Date();\r\n      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true };\r\n      this.currentDate = now.toLocaleDateString('en-US', options); // Format date and time\r\n    },\r\n    async fetchData() {\r\n      console.log(\"filenameeeeeeeeeee\")\r\n  console.log(this.uploadedFileContentnew)\r\n      try {\r\n        console.log(\"filenameeeukjhkjkjeeeeeeee\")\r\n  console.log(this.uploadedFileContentnew)\r\n        const response = await axios.get(`http://172.18.100.240:9999/get-data/${this.uploadedFileContentnew}`);\r\n        const data = response.data[0]; // Assuming the response contains only one object\r\n        // Update data properties with fetched values\r\n        this.inspection_report_number = data.inspection_report_number;\r\n        this.project_number = data.project_number;\r\n        this.project_name = data.project_name;\r\n        this.group = data.group;\r\n        this.part_number = data.part_number;\r\n        this.part_name = data.part_name;\r\nconsole.log(\"file :----------\", this.uploadedFileContentnew)\r\n        // Log the values in the console\r\n    console.log('Inspection Report Number:', this.inspection_report_number);\r\n    console.log('Project Number:', this.project_number);\r\n    console.log('Project Name:', this.project_name);\r\n    console.log('Group:', this.group);\r\n    console.log('Part Number:', this.part_number);\r\n    console.log('Part Name:', this.part_name);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    selectedHandle(newHandle) {\r\n      if (newHandle) {\r\n        this.initializeWebSocket(newHandle);\r\n      }\r\n    },\r\n    selectedFileName(newFileName) {\r\n      if (newFileName) {\r\n        this.fetchData();\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n     this.fetchData();\r\n     // Initialize uploadedFileContent with empty \"status\" property for each item\r\n      this.uploadedFileContent = this.uploadedFileContent.map(item => ({\r\n       ...item,\r\n       status: \"\" // Add status parameter with an empty value\r\n     }));\r\n    this.updateCurrentDate();\r\n    // Refresh current date every second\r\n    setInterval(this.updateCurrentDate, 1000);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@font-face {\r\n    font-family: 'CustomFont'; /* Specify the name of your font */\r\n    src: url('../assets/fonts/Montserrat-SemiBold.ttf') format('truetype'); /* Adjust the path to your font file */\r\n    /* You can include additional font variations (e.g., bold, italic) if available */\r\n}\r\n@font-face {\r\n    font-family: 'CustomFont2'; /* Specify the name of your font */\r\n    src: url('../assets/fonts/Designer.otf') format('opentype'); /* Adjust the path to your font file */\r\n    /* You can include additional font variations (e.g., bold, italic) if available */\r\n}\r\n@font-face {\r\n    font-family: 'CustomFont3'; /* Specify the name of your font */\r\n    src: url('../assets/fonts/StretchPro.otf') format('opentype'); /* Adjust the path to your font file */\r\n    /* You can include additional font variations (e.g., bold, italic) if available */\r\n}\r\n.data-table {\r\n  position: relative;\r\n  max-width: 800px;\r\n  max-height: 710px;\r\n  overflow: auto;\r\n  box-sizing: border-box;\r\n  padding: 10px;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n  font-family: 'CustomFont', Arial, sans-serif;\r\n}\r\n\r\n.dimension-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.dimension-table th,\r\n.dimension-table td {\r\n  border: 1px solid #ccc;\r\n  padding: 8px;\r\n}\r\n\r\n.dimension-table th {\r\n  background-color: #f2f2f2;\r\n}\r\n\r\n.dimension-table tr.selected-row {\r\n  background-color: rgb(92, 160, 192);\r\n}\r\n\r\n.set-button {\r\n  background-color: #25d13c;\r\n  color: white;\r\n  padding: 8px 16px;\r\n  margin-top: 10px;\r\n  cursor: pointer;\r\n  border: none;\r\n  border-radius: 5px;\r\n  width: 140px;\r\n  height: 50px;\r\n}\r\n\r\n.set-button:hover {\r\n  background-color: #67aaee;\r\n}\r\n\r\n.dimension-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  table-layout: fixed; /* Add this line to ensure fixed table layout */\r\n}\r\n\r\n.dimension-table th,\r\n.dimension-table td {\r\n  border: 1px solid #ccc;\r\n  padding: 9px;\r\n  overflow: hidden; /* Add this line to prevent content overflow */\r\n}\r\n\r\n.edit-button {\r\n  background-color: #06ccfd; /* Green */\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 4px 2px;\r\n  transition-duration: 0.4s;\r\n  cursor: pointer;\r\n}\r\n\r\n.edit-button:hover {\r\n  background-color: #4592a0; /* Darker Green */\r\n}\r\n\r\n.save-button {\r\n  background-color: #06ba00; /* Blue */\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 14px;\r\n  margin: 4px 2px;\r\n  transition-duration: 0.4s;\r\n  cursor: pointer;\r\n}\r\n\r\n.save-button:hover {\r\n  background-color: #0077A3; /* Darker Blue */\r\n}\r\n\r\n.header{\r\n  background-color: #85d6f3;\r\n}\r\n\r\n#inspection-report {\r\n  font-family: Arial, sans-serif;\r\n  width: 100%;\r\n}\r\n\r\ntable, th, td {\r\n  border: 1px solid black;\r\n  border-collapse: collapse;\r\n  padding: 5px;\r\n}\r\n\r\nth {\r\n  text-align: left;\r\n}\r\n\r\n#cmm-report {\r\n  font-family: Arial, sans-serif;\r\n  width: 100%;\r\n}\r\n\r\n.report-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-top: -30px;\r\n  margin-bottom: -60px;\r\n}\r\n\r\n\r\n.report-body {\r\n  display: flex;\r\n  margin: 18px 2px ;\r\n}\r\n\r\n\r\n/*giving space between the left and right\r\n/* .report-section {\r\n  flex: 1;\r\n  margin-right: 20px; \r\n} */\r\n\r\n.report-section:last-child {\r\n  margin-right: 0; /* Remove margin from the last section to prevent extra space */\r\n}\r\n\r\n.report-section table {\r\n  width: 100%; /* Ensure the table fills the available space */\r\n}\r\n\r\n.report-section th {\r\n  text-align: left;\r\n}\r\n\r\n.report-section input {\r\n  width: calc(100% - 6px); /* Adjust input width considering padding and borders */\r\n  padding: 6px;\r\n  box-sizing: border-box;\r\n}\r\n.report-body tr:nth-child(odd) {\r\n  background-color: #f2f2f2;\r\n}\r\n</style>\r\n"],"mappings":"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"}]}