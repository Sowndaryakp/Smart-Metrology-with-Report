{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\DxfViewer.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\DxfViewer.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["three","BatchingKey","DxfWorker","MaterialKey","ColorCode","DxfScene","OrbitControls","RBTree","MessageLevel","Object","freeze","INFO","WARN","ERROR","DxfViewer","constructor","domContainer","options","create","DefaultOptions","assign","clearColor","getHex","scene","Scene","renderer","WebGLRenderer","alpha","canvasAlpha","premultipliedAlpha","canvasPremultipliedAlpha","antialias","depth","preserveDrawingBuffer","e","console","log","setPixelRatio","window","devicePixelRatio","camera","OrthographicCamera","position","z","x","y","simpleColorMaterial","simplePointMaterial","i","InstanceType","MAX","_CreateSimpleColorMaterial","_CreateSimplePointMaterial","setClearColor","clearAlpha","autoResize","canvasWidth","clientWidth","canvasHeight","clientHeight","style","resizeObserver","setSize","canvas","domElement","display","ResizeObserver","entries","_OnResize","observe","appendChild","addEventListener","_OnPointerEvent","bind","Render","materials","m1","m2","key","Compare","layers","Map","blocks","worker","HasRenderer","Boolean","GetRenderer","GetCanvas","GetDxf","parsedDxf","SetSize","width","height","_EnsureRenderer","hScale","vScale","cam","centerX","left","right","centerY","bottom","top","camWidth","camHeight","updateProjectionMatrix","controls","update","_Emit","Load","url","fonts","progressCbk","workerFactory","undefined","Error","Clear","dxf","Destroy","origin","bounds","hasMissingChars","layer","set","name","Layer","displayName","color","batch","batches","blockName","geometryType","GeometryType","BLOCK_INSTANCE","POINT_INSTANCE","block","get","Block","PushBatch","Batch","length","size","vertices","byteLength","indices","transforms","_LoadBatch","FitView","minX","maxX","minY","maxY","_Message","_CreateControls","render","GetLayers","result","lyr","values","push","_TransformColor","ShowLayer","show","obj","objects","visible","dispose","clear","Dispose","each","material","SetView","disconnect","m","center","aspect","zoom","rotation","updateMatrix","padding","Number","MIN_VALUE","GetScene","GetCamera","GetOrigin","GetBounds","Subscribe","eventName","eventHandler","EVENT_NAME_PREFIX","Unsubscribe","removeEventListener","enableRotate","mouseButtons","LEFT","MOUSE","PAN","MIDDLE","DOLLY","touches","ONE","TOUCH","TWO","DOLLY_PAN","zoomSpeed","mouseZoomSpeedFactor","target","Vector3","data","dispatchEvent","CustomEvent","detail","message","level","canvasRect","getBoundingClientRect","canvasCoord","clientX","clientY","type","domEvent","_CanvasToSceneCoord","v","unproject","entry","Math","floor","contentRect","CreateObjects","layerName","add","PushObject","_GetSimpleColorMaterial","instanceType","NONE","find","_CreateSimpleColorMaterialInstance","insert","shaders","_GenerateShaders","RawShaderMaterial","uniforms","value","Color","vertexShader","vertex","fragmentShader","fragment","depthTest","depthWrite","glslVersion","GLSL3","side","DoubleSide","src","clone","_GetSimplePointMaterial","POINTS","_CreateSimplePointMaterialInstance","pointSize","fullInstanceAttr","FULL","fullInstanceTransform","pointInstanceAttr","POINT","pointInstanceTransform","pointSizeUniform","pointSizeAssigment","colorCorrection","blackWhiteInversion","bkgLum","Luminance","fgLum","MIN_TARGET_RATIO","contrast","ContrastRatio","diff","targetLum","Lighten","Darken","sceneOptions","retainParsedDxf","fileEncoding","SetupWorker","self","viewer","hasOwnProperty","verticesArray","Float32Array","verticesOffset","BYTES_PER_ELEMENT","verticesSize","pointShapeHasDot","BufferAttribute","InstancedBufferAttribute","chunks","rawChunk","indicesArray","Uint16Array","indicesOffset","indicesSize","transformsArray","transformsOffset","transformsSize","buf","InstancedInterleavedBuffer","transforms0","InterleavedBufferAttribute","transforms1","layerColor","GetInstanceType","instanceBatch","_CreateBlockInstanceObjects","_CreateObjects","_instanceBatch$GetIns","_GetInstanceColor","materialFactory","call","objConstructor","Points","LINES","INDEXED_LINES","LineSegments","TRIANGLES","INDEXED_TRIANGLES","Mesh","CreateObject","geometry","InstancedBufferGeometry","BufferGeometry","setAttribute","_SetInstanceTransformAttribute","setIndex","frustumCulled","matrixAutoUpdate","chunk","isInstancedBufferGeometry","defColor","BY_BLOCK","BY_LAYER","LinearColor","c","pow","SRgbColor","r","g","b","c1","c2","HlsToRgb","h","l","s","hue2rgb","p","q","t","min","RgbToHls","max","d","factor","hls"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI ALL PROJECTS/GERB-INDIA(CLIENT)/GerbIndiaDashboard-CMTI-Full/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/DxfViewer.js"],"sourcesContent":["import * as three from \"three\"\nimport {BatchingKey} from \"./BatchingKey\"\nimport {DxfWorker} from \"./DxfWorker\"\nimport {MaterialKey} from \"./MaterialKey\"\nimport {ColorCode, DxfScene} from \"./DxfScene\"\nimport {OrbitControls} from \"./OrbitControls\"\nimport {RBTree} from \"./RBTree\"\n\n/** Level in \"message\" events. */\nconst MessageLevel = Object.freeze({\n    INFO: \"info\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n})\n\n/** The representation class for the viewer, based on Three.js WebGL renderer. */\nexport class DxfViewer {\n\n    /** @param domContainer Container element to create the canvas in. Usually empty div. Should not\n     *  have padding if auto-resize feature is used.\n     * @param options Some options can be overridden if specified. See DxfViewer.DefaultOptions.\n     */\n    constructor(domContainer, options = null) {\n        this.domContainer = domContainer\n        this.options = Object.create(DxfViewer.DefaultOptions)\n        if (options) {\n            Object.assign(this.options, options)\n        }\n        options = this.options\n\n        this.clearColor = this.options.clearColor.getHex()\n\n        this.scene = new three.Scene()\n\n        try {\n            this.renderer = new three.WebGLRenderer({\n                alpha: options.canvasAlpha,\n                premultipliedAlpha: options.canvasPremultipliedAlpha,\n                antialias: options.antialias,\n                depth: false,\n                preserveDrawingBuffer: options.preserveDrawingBuffer\n            })\n        } catch (e) {\n            console.log(\"Failed to create renderer: \" + e)\n            this.renderer = null\n            return\n        }\n        const renderer = this.renderer\n        renderer.setPixelRatio(window.devicePixelRatio)\n\n        const camera = this.camera = new three.OrthographicCamera(-1, 1, 1, -1, 0.1, 2);\n        camera.position.z = 1\n        camera.position.x = 0\n        camera.position.y = 0\n\n        this.simpleColorMaterial = []\n        this.simplePointMaterial = []\n        for (let i = 0; i < InstanceType.MAX; i++) {\n            this.simpleColorMaterial[i] = this._CreateSimpleColorMaterial(i)\n            this.simplePointMaterial[i] = this._CreateSimplePointMaterial(i)\n        }\n\n        renderer.setClearColor(options.clearColor, options.clearAlpha)\n\n        if (options.autoResize) {\n            this.canvasWidth = domContainer.clientWidth\n            this.canvasHeight = domContainer.clientHeight\n            domContainer.style.position = \"relative\"\n        } else {\n            this.canvasWidth = options.canvasWidth\n            this.canvasHeight = options.canvasHeight\n            this.resizeObserver = null\n        }\n        renderer.setSize(this.canvasWidth, this.canvasHeight)\n\n        this.canvas = renderer.domElement\n        domContainer.style.display = \"block\"\n        if (options.autoResize) {\n            this.canvas.style.position = \"absolute\"\n            this.resizeObserver = new ResizeObserver(entries => this._OnResize(entries[0]))\n            this.resizeObserver.observe(domContainer)\n        }\n        domContainer.appendChild(this.canvas)\n\n        this.canvas.addEventListener(\"pointerdown\", this._OnPointerEvent.bind(this))\n        this.canvas.addEventListener(\"pointerup\", this._OnPointerEvent.bind(this))\n\n        this.Render()\n\n        /* Indexed by MaterialKey, value is {key, material}. */\n        this.materials = new RBTree((m1, m2) => m1.key.Compare(m2.key))\n        /* Indexed by layer name, value is Layer instance. */\n        this.layers = new Map()\n        /* Indexed by block name, value is Block instance. */\n        this.blocks = new Map()\n\n        /** Set during data loading. */\n        this.worker = null\n    }\n\n    /** @return {boolean} True if renderer exists. May be false in case when WebGL context is lost\n     * (e.g. after wake up from sleep). In such case page should be reloaded.\n     */\n    HasRenderer() {\n        return Boolean(this.renderer)\n    }\n\n    /**\n     * @returns {three.WebGLRenderer | null} Returns the created Three.js renderer.\n     */\n    GetRenderer(){\n        return this.renderer;\n    }\n\n    GetCanvas() {\n        return this.canvas\n    }\n\n    GetDxf() {\n        return this.parsedDxf\n    }\n\n    SetSize(width, height) {\n        this._EnsureRenderer()\n\n        const hScale = width / this.canvasWidth\n        const vScale = height / this.canvasHeight\n\n        const cam = this.camera\n        const centerX = (cam.left + cam.right) / 2\n        const centerY = (cam.bottom + cam.top) / 2\n        const camWidth = cam.right - cam.left\n        const camHeight = cam.top - cam.bottom\n        cam.left = centerX - hScale * camWidth / 2\n        cam.right = centerX + hScale * camWidth / 2\n        cam.bottom = centerY - vScale * camHeight / 2\n        cam.top = centerY + vScale * camHeight / 2\n        cam.updateProjectionMatrix()\n\n        this.canvasWidth = width\n        this.canvasHeight = height\n        this.renderer.setSize(width, height)\n        if (this.controls) {\n            this.controls.update()\n        }\n        this._Emit(\"resized\", {width, height})\n        this._Emit(\"viewChanged\")\n        this.Render()\n    }\n\n    /** Load DXF into the viewer. Old content is discarded, state is reset.\n     * @param url {string} DXF file URL.\n     * @param fonts {?string[]} List of font URLs. Files should have typeface.js format. Fonts are\n     *  used in the specified order, each one is checked until necessary glyph is found. Text is not\n     *  rendered if fonts are not specified.\n     * @param progressCbk {?Function} (phase, processedSize, totalSize)\n     *  Possible phase values:\n     *  * \"font\"\n     *  * \"fetch\"\n     *  * \"parse\"\n     *  * \"prepare\"\n     * @param workerFactory {?Function} Factory for worker creation. The worker script should\n     *  invoke DxfViewer.SetupWorker() function.\n     */\n    async Load({url, fonts = null, progressCbk = null, workerFactory = null}) {\n        if (url === null || url === undefined) {\n            throw new Error(\"`url` parameter is not specified\")\n        }\n\n        this._EnsureRenderer()\n\n        this.Clear()\n\n        this.worker = new DxfWorker(workerFactory ? workerFactory() : null)\n        const {scene, dxf} = await this.worker.Load(url, fonts, this.options, progressCbk)\n        await this.worker.Destroy()\n        this.worker = null\n        this.parsedDxf = dxf\n\n        this.origin = scene.origin\n        this.bounds = scene.bounds\n        this.hasMissingChars = scene.hasMissingChars\n\n        for (const layer of scene.layers) {\n            this.layers.set(layer.name, new Layer(layer.name, layer.displayName, layer.color))\n        }\n\n        /* Load all blocks on the first pass. */\n        for (const batch of scene.batches) {\n            if (batch.key.blockName !== null &&\n                batch.key.geometryType !== BatchingKey.GeometryType.BLOCK_INSTANCE &&\n                batch.key.geometryType !== BatchingKey.GeometryType.POINT_INSTANCE) {\n\n                let block = this.blocks.get(batch.key.blockName)\n                if (!block) {\n                    block = new Block()\n                    this.blocks.set(batch.key.blockName, block)\n                }\n                block.PushBatch(new Batch(this, scene, batch))\n            }\n        }\n\n        console.log(`DXF scene:\n                     ${scene.batches.length} batches,\n                     ${this.layers.size} layers,\n                     ${this.blocks.size} blocks,\n                     vertices ${scene.vertices.byteLength} B,\n                     indices ${scene.indices.byteLength} B\n                     transforms ${scene.transforms.byteLength} B`)\n\n        /* Instantiate all entities. */\n        for (const batch of scene.batches) {\n            this._LoadBatch(scene, batch)\n        }\n\n        this._Emit(\"loaded\")\n\n        if (scene.bounds) {\n            this.FitView(scene.bounds.minX - scene.origin.x, scene.bounds.maxX - scene.origin.x,\n                         scene.bounds.minY - scene.origin.y, scene.bounds.maxY - scene.origin.y)\n        } else {\n            this._Message(\"Empty document\", MessageLevel.WARN)\n        }\n\n        if (this.hasMissingChars) {\n            this._Message(\"Some characters cannot be properly displayed due to missing fonts\",\n                          MessageLevel.WARN)\n        }\n\n        this._CreateControls()\n        this.Render()\n    }\n\n    Render() {\n        this._EnsureRenderer()\n        this.renderer.render(this.scene, this.camera)\n    }\n\n    /** @return {Iterable<{name:String, color:number}>} List of layer names. */\n    GetLayers() {\n        const result = []\n        for (const lyr of this.layers.values()) {\n            result.push({\n                name: lyr.name,\n                displayName: lyr.displayName,\n                color: this._TransformColor(lyr.color)\n            })\n        }\n        return result\n    }\n\n    ShowLayer(name, show) {\n        this._EnsureRenderer()\n        const layer = this.layers.get(name)\n        if (!layer) {\n            return\n        }\n        for (const obj of layer.objects) {\n            obj.visible = show\n        }\n        this.Render()\n    }\n\n    /** Reset the viewer state. */\n    Clear() {\n        this._EnsureRenderer()\n        if (this.worker) {\n            this.worker.Destroy(true)\n            this.worker = null\n        }\n        if (this.controls) {\n            this.controls.dispose()\n            this.controls = null\n        }\n        this.scene.clear()\n        for (const layer of this.layers.values()) {\n            layer.Dispose()\n        }\n        this.layers.clear()\n        this.blocks.clear()\n        this.materials.each(e => e.material.dispose())\n        this.materials.clear()\n        this.SetView({x: 0, y: 0}, 2)\n        this._Emit(\"cleared\")\n        this.Render()\n    }\n\n    /** Free all resources. The viewer object should not be used after this method was called. */\n    Destroy() {\n        if (!this.HasRenderer()) {\n            return\n        }\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect()\n        }\n        this.Clear()\n        this._Emit(\"destroyed\")\n        for (const m of this.simplePointMaterial) {\n            m.dispose()\n        }\n        for (const m of this.simpleColorMaterial) {\n            m.dispose()\n        }\n        this.simplePointMaterial = null\n        this.simpleColorMaterial = null\n        this.renderer.dispose()\n        this.renderer = null\n    }\n\n    SetView(center, width) {\n        const aspect = this.canvasWidth / this.canvasHeight\n        const height = width / aspect\n        const cam = this.camera\n        cam.left = -width / 2\n        cam.right = width / 2\n        cam.top = height / 2\n        cam.bottom = -height / 2\n        cam.zoom = 1\n        cam.position.set(center.x, center.y, 1)\n        cam.rotation.set(0, 0, 0)\n        cam.updateMatrix()\n        cam.updateProjectionMatrix()\n        this._Emit(\"viewChanged\")\n    }\n\n    /** Set view to fit the specified bounds. */\n    FitView(minX, maxX, minY, maxY, padding = 0.1) {\n        const aspect = this.canvasWidth / this.canvasHeight\n        let width = maxX - minX\n        const height = maxY - minY\n        const center = {x: minX + width / 2, y: minY + height / 2}\n        if (height * aspect > width) {\n            width = height * aspect\n        }\n        if (width <= Number.MIN_VALUE * 2) {\n            width = 1\n        }\n        this.SetView(center, width * (1 + padding))\n    }\n\n    /** @return {Scene} three.js scene for the viewer. Can be used to add custom entities on the\n     *      scene. Remember to apply scene origin available via GetOrigin() method.\n     */\n    GetScene() {\n        return this.scene\n    }\n\n    /** @return {OrthographicCamera} three.js camera for the viewer. */\n    GetCamera() {\n        return this.camera\n    }\n\n    /** @return {Vector2} Scene origin in global drawing coordinates. */\n    GetOrigin() {\n        return this.origin\n    }\n\n    /**\n     * @return {?{maxX: number, maxY: number, minX: number, minY: number}} Scene bounds in model\n     *      space coordinates. Null if empty scene.\n     */\n    GetBounds() {\n        return this.bounds\n    }\n\n    /** Subscribe to the specified event. The following events are defined:\n     *  * \"loaded\" - new scene loaded.\n     *  * \"cleared\" - current scene cleared.\n     *  * \"destroyed\" - viewer instance destroyed.\n     *  * \"resized\" - viewport size changed. Details: {width, height}\n     *  * \"pointerdown\" - Details: {domEvent, position:{x,y}}, position is in scene coordinates.\n     *  * \"pointerup\"\n     *  * \"viewChanged\"\n     *  * \"message\" - Some message from the viewer. {message: string, level: string}.\n     *\n     * @param eventName {string}\n     * @param eventHandler {function} Accepts event object.\n     */\n    Subscribe(eventName, eventHandler) {\n        this._EnsureRenderer()\n        this.canvas.addEventListener(EVENT_NAME_PREFIX + eventName, eventHandler)\n    }\n\n    /** Unsubscribe from previously subscribed event. The arguments should match previous\n     * Subscribe() call.\n     *\n     * @param eventName {string}\n     * @param eventHandler {function}\n     */\n    Unsubscribe(eventName, eventHandler) {\n        this._EnsureRenderer()\n        this.canvas.removeEventListener(EVENT_NAME_PREFIX + eventName, eventHandler)\n    }\n\n    // /////////////////////////////////////////////////////////////////////////////////////////////\n\n    _EnsureRenderer() {\n        if (!this.HasRenderer()) {\n            throw new Error(\"WebGL renderer not available. \" +\n                            \"Probable WebGL context loss, try refreshing the page.\")\n        }\n    }\n\n    _CreateControls() {\n        const controls = this.controls = new OrbitControls(this.camera, this.canvas)\n        controls.enableRotate = false\n        controls.mouseButtons = {\n            LEFT: three.MOUSE.PAN,\n            MIDDLE: three.MOUSE.DOLLY\n        }\n        controls.touches = {\n            ONE: three.TOUCH.PAN,\n            TWO: three.TOUCH.DOLLY_PAN\n        }\n        controls.zoomSpeed = 3\n        controls.mouseZoomSpeedFactor = 0.05\n        controls.target = new three.Vector3(this.camera.position.x, this.camera.position.y, 0)\n        controls.addEventListener(\"change\", () => {\n            this._Emit(\"viewChanged\")\n            this.Render()\n        })\n        controls.update()\n    }\n\n    _Emit(eventName, data = null) {\n        this.canvas.dispatchEvent(new CustomEvent(EVENT_NAME_PREFIX + eventName, { detail: data }))\n    }\n\n    _Message(message, level = MessageLevel.INFO) {\n        this._Emit(\"message\", {message, level})\n    }\n\n    _OnPointerEvent(e) {\n        const canvasRect = e.target.getBoundingClientRect()\n        const canvasCoord = {x: e.clientX - canvasRect.left, y: e.clientY - canvasRect.top}\n        this._Emit(e.type, {\n            domEvent: e,\n            canvasCoord,\n            position: this._CanvasToSceneCoord(canvasCoord.x, canvasCoord.y)\n        })\n    }\n\n    /** @return {{x,y}} Scene coordinate corresponding to the specified canvas pixel coordinates. */\n    _CanvasToSceneCoord(x, y) {\n        const v = new three.Vector3(x * 2 / this.canvasWidth - 1,\n                                    -y * 2 / this.canvasHeight + 1,\n                                    1).unproject(this.camera)\n        return {x: v.x, y: v.y}\n    }\n\n    _OnResize(entry) {\n        this.SetSize(Math.floor(entry.contentRect.width), Math.floor(entry.contentRect.height))\n    }\n\n    _LoadBatch(scene, batch) {\n        if (batch.key.blockName !== null &&\n            batch.key.geometryType !== BatchingKey.GeometryType.BLOCK_INSTANCE &&\n            batch.key.geometryType !== BatchingKey.GeometryType.POINT_INSTANCE) {\n            /* Block definition. */\n            return\n        }\n        const objects = new Batch(this, scene, batch).CreateObjects()\n\n        const layer = this.layers.get(batch.key.layerName)\n\n        for (const obj of objects) {\n            this.scene.add(obj)\n            if (layer) {\n                layer.PushObject(obj)\n            }\n        }\n    }\n\n    _GetSimpleColorMaterial(color, instanceType = InstanceType.NONE) {\n        const key = new MaterialKey(instanceType, null, color, 0)\n        let entry = this.materials.find({key})\n        if (entry !== null) {\n            return entry.material\n        }\n        entry = {\n            key,\n            material: this._CreateSimpleColorMaterialInstance(color, instanceType)\n        }\n        this.materials.insert(entry)\n        return entry.material\n    }\n\n    _CreateSimpleColorMaterial(instanceType = InstanceType.NONE) {\n        const shaders = this._GenerateShaders(instanceType, false)\n        return new three.RawShaderMaterial({\n            uniforms: {\n                color: {\n                    value: new three.Color(0xff00ff)\n                }\n            },\n            vertexShader: shaders.vertex,\n            fragmentShader: shaders.fragment,\n            depthTest: false,\n            depthWrite: false,\n            glslVersion: three.GLSL3,\n            side: three.DoubleSide\n        })\n    }\n\n    /** @param color {number} Color RGB numeric value.\n     * @param instanceType {number}\n     */\n    _CreateSimpleColorMaterialInstance(color, instanceType = InstanceType.NONE) {\n        const src = this.simpleColorMaterial[instanceType]\n        /* Should reuse compiled shaders. */\n        const m = src.clone()\n        m.uniforms.color = { value: new three.Color(color) }\n        return m\n    }\n\n    _GetSimplePointMaterial(color, instanceType = InstanceType.NONE) {\n        const key = new MaterialKey(instanceType, BatchingKey.GeometryType.POINTS, color, 0)\n        let entry = this.materials.find({key})\n        if (entry !== null) {\n            return entry.material\n        }\n        entry = {\n            key,\n            material: this._CreateSimplePointMaterialInstance(color, this.options.pointSize,\n                                                              instanceType)\n        }\n        this.materials.insert(entry)\n        return entry.material\n    }\n\n    _CreateSimplePointMaterial(instanceType = InstanceType.NONE) {\n        const shaders = this._GenerateShaders(instanceType, true)\n        return new three.RawShaderMaterial({\n            uniforms: {\n                color: {\n                    value: new three.Color(0xff00ff)\n                },\n                pointSize: {\n                    value: 2\n                }\n            },\n            vertexShader: shaders.vertex,\n            fragmentShader: shaders.fragment,\n            depthTest: false,\n            depthWrite: false,\n            glslVersion: three.GLSL3\n        })\n    }\n\n    /** @param color {number} Color RGB numeric value.\n     * @param size {number} Rasterized point size in pixels.\n     * @param instanceType {number}\n     */\n    _CreateSimplePointMaterialInstance(color, size = 2, instanceType = InstanceType.NONE) {\n        const src = this.simplePointMaterial[instanceType]\n        /* Should reuse compiled shaders. */\n        const m = src.clone()\n        m.uniforms.color = { value: new three.Color(color) }\n        m.uniforms.size = { value: size }\n        return m\n    }\n\n    _GenerateShaders(instanceType, pointSize) {\n        const fullInstanceAttr = instanceType === InstanceType.FULL ?\n            `\n            /* First row. */\n            in vec3 instanceTransform0;\n            /* Second row. */\n            in vec3 instanceTransform1;\n            ` : \"\"\n        const fullInstanceTransform = instanceType === InstanceType.FULL ?\n            `\n            pos.xy = mat2(instanceTransform0[0], instanceTransform1[0],\n                          instanceTransform0[1], instanceTransform1[1]) * pos.xy +\n                     vec2(instanceTransform0[2], instanceTransform1[2]);\n            ` : \"\"\n\n        const pointInstanceAttr = instanceType === InstanceType.POINT ?\n            `\n            in vec2 instanceTransform;\n            ` : \"\"\n        const pointInstanceTransform = instanceType === InstanceType.POINT ?\n            `\n            pos.xy += instanceTransform;\n            ` : \"\"\n\n        const pointSizeUniform = pointSize ? \"uniform float pointSize;\" : \"\"\n        const pointSizeAssigment = pointSize ? \"gl_PointSize = pointSize;\" : \"\"\n\n        return {\n            vertex: `\n\n            precision highp float;\n            precision highp int;\n            in vec2 position;\n            ${fullInstanceAttr}\n            ${pointInstanceAttr}\n            uniform mat4 modelViewMatrix;\n            uniform mat4 projectionMatrix;\n            ${pointSizeUniform}\n\n            void main() {\n                vec4 pos = vec4(position, 0.0, 1.0);\n                ${fullInstanceTransform}\n                ${pointInstanceTransform}\n                gl_Position = projectionMatrix * modelViewMatrix * pos;\n                ${pointSizeAssigment}\n            }\n            `,\n            fragment: `\n\n            precision highp float;\n            precision highp int;\n            uniform vec3 color;\n            out vec4 fragColor;\n\n            void main() {\n                fragColor = vec4(color, 1.0);\n            }\n            `\n        }\n    }\n\n    /** Ensure the color is contrast enough with current background color.\n     * @param color {number} RGB value.\n     * @return {number} RGB value to use for rendering.\n     */\n    _TransformColor(color) {\n        if (!this.options.colorCorrection && !this.options.blackWhiteInversion) {\n            return color\n        }\n        /* Just black and white inversion. */\n        const bkgLum = Luminance(this.clearColor)\n        if (color === 0xffffff && bkgLum >= 0.8) {\n            return 0\n        }\n        if (color === 0 && bkgLum <= 0.2) {\n            return 0xffffff\n        }\n        if (!this.options.colorCorrection) {\n            return color\n        }\n        const fgLum = Luminance(color)\n        const MIN_TARGET_RATIO = 1.5\n        const contrast = ContrastRatio(color, this.clearColor)\n        const diff = contrast >= 1 ? contrast : 1 / contrast\n        if (diff < MIN_TARGET_RATIO) {\n            let targetLum\n            if (bkgLum > 0.5) {\n                targetLum = bkgLum / 2\n            } else {\n                targetLum = bkgLum * 2\n            }\n            if (targetLum > fgLum) {\n                color = Lighten(color, targetLum / fgLum)\n            } else {\n                color = Darken(color, fgLum / targetLum)\n            }\n        }\n        return color\n    }\n}\n\nDxfViewer.MessageLevel = MessageLevel\n\nDxfViewer.DefaultOptions = {\n    canvasWidth: 400,\n    canvasHeight: 300,\n    /** Automatically resize canvas when the container is resized. This options utilizes\n     *  ResizeObserver API which is still not fully standardized. The specified canvas size is\n     *  ignored if the option is enabled.\n     */\n    autoResize: false,\n    /** Frame buffer clear color. */\n    clearColor: new three.Color(\"#000\"),\n    /** Frame buffer clear color alpha value. */\n    clearAlpha: 1.0,\n    /** Use alpha channel in a framebuffer. */\n    canvasAlpha: false,\n    /** Assume premultiplied alpha in a framebuffer. */\n    canvasPremultipliedAlpha: true,\n    /** Use antialiasing. May degrade performance on poor hardware. */\n    antialias: true,\n    /** Correct entities colors to ensure that they are always visible with the current background\n     * color.\n     */\n    colorCorrection: false,\n    /** Simpler version of colorCorrection - just invert pure white or black entities if they are\n     * invisible on current background color.\n     */\n    blackWhiteInversion: true,\n    /** Size in pixels for rasterized points (dot mark). */\n    pointSize: 2,\n    /** Scene generation options. */\n    sceneOptions: DxfScene.DefaultOptions,\n    /** Retain the simple object representing the parsed DXF - will consume a lot of additional\n     * memory.\n     */\n    retainParsedDxf: false,\n    /** Whether to preserve the buffers until manually cleared or overwritten. */\n    preserveDrawingBuffer: false,\n    /** Encoding to use for decoding DXF file text content. DXF files newer than DXF R2004 (AC1018)\n     * use UTF-8 encoding. Older files use some code page which is specified in $DWGCODEPAGE header\n     * variable. Currently parser is implemented in such a way that encoding must be specified\n     * before the content is parsed so there is no chance to use this variable dynamically. This may\n     * be a subject for future changes. The specified value should be suitable for passing as\n     * `TextDecoder` constructor `label` parameter.\n     */\n    fileEncoding: \"utf-8\"\n}\n\nDxfViewer.SetupWorker = function () {\n    new DxfWorker(self, true)\n}\n\nconst InstanceType = Object.freeze({\n    /** Not instanced. */\n    NONE: 0,\n    /** Full affine transform per instance. */\n    FULL: 1,\n    /** Point instances, 2D-translation vector per instance. */\n    POINT: 2,\n\n    /** Number of types. */\n    MAX: 3\n})\n\nclass Batch {\n    /**\n     * @param viewer {DxfViewer}\n     * @param scene Serialized scene.\n     * @param batch Serialized scene batch.\n     */\n    constructor(viewer, scene, batch) {\n        this.viewer = viewer\n        this.key = batch.key\n\n        if (batch.hasOwnProperty(\"verticesOffset\")) {\n            const verticesArray =\n                new Float32Array(scene.vertices,\n                                 batch.verticesOffset * Float32Array.BYTES_PER_ELEMENT,\n                                 batch.verticesSize)\n            if (this.key.geometryType !== BatchingKey.GeometryType.POINT_INSTANCE ||\n                scene.pointShapeHasDot) {\n                this.vertices = new three.BufferAttribute(verticesArray, 2)\n            }\n            if (this.key.geometryType === BatchingKey.GeometryType.POINT_INSTANCE) {\n                this.transforms = new three.InstancedBufferAttribute(verticesArray, 2)\n            }\n        }\n\n        if (batch.hasOwnProperty(\"chunks\")) {\n            this.chunks = []\n            for (const rawChunk of batch.chunks) {\n\n                const verticesArray =\n                    new Float32Array(scene.vertices,\n                                     rawChunk.verticesOffset * Float32Array.BYTES_PER_ELEMENT,\n                                     rawChunk.verticesSize)\n                const indicesArray =\n                    new Uint16Array(scene.indices,\n                                    rawChunk.indicesOffset * Uint16Array.BYTES_PER_ELEMENT,\n                                    rawChunk.indicesSize)\n                this.chunks.push({\n                    vertices: new three.BufferAttribute(verticesArray, 2),\n                    indices: new three.BufferAttribute(indicesArray, 1)\n                })\n            }\n        }\n\n        if (batch.hasOwnProperty(\"transformsOffset\")) {\n            const transformsArray =\n                new Float32Array(scene.transforms,\n                                 batch.transformsOffset * Float32Array.BYTES_PER_ELEMENT,\n                                 batch.transformsSize)\n            /* Each transform is 3x2 matrix which is split into two 3D vectors which will occupy two\n             * attribute slots.\n             */\n            const buf = new three.InstancedInterleavedBuffer(transformsArray, 6)\n            this.transforms0 = new three.InterleavedBufferAttribute(buf, 3, 0)\n            this.transforms1 = new three.InterleavedBufferAttribute(buf, 3, 3)\n        }\n\n        if (this.key.geometryType === BatchingKey.GeometryType.BLOCK_INSTANCE ||\n            this.key.geometryType === BatchingKey.GeometryType.POINT_INSTANCE) {\n\n            const layer = this.viewer.layers.get(this.key.layerName)\n            if (layer) {\n                this.layerColor = layer.color\n            } else {\n                this.layerColor = 0\n            }\n        }\n    }\n\n    GetInstanceType() {\n        switch (this.key.geometryType) {\n        case BatchingKey.GeometryType.BLOCK_INSTANCE:\n            return InstanceType.FULL\n        case BatchingKey.GeometryType.POINT_INSTANCE:\n            return InstanceType.POINT\n        default:\n            return InstanceType.NONE\n        }\n    }\n\n    /** Create scene objects corresponding to batch data.\n     * @param instanceBatch {?Batch} Batch with instance transform. Null for non-instanced object.\n     */\n    *CreateObjects(instanceBatch = null) {\n        if (this.key.geometryType === BatchingKey.GeometryType.BLOCK_INSTANCE ||\n            this.key.geometryType === BatchingKey.GeometryType.POINT_INSTANCE) {\n\n            if (instanceBatch !== null) {\n                throw new Error(\"Unexpected instance batch specified for instance batch\")\n            }\n            yield* this._CreateBlockInstanceObjects()\n            return\n        }\n        yield* this._CreateObjects(instanceBatch)\n    }\n\n    *_CreateObjects(instanceBatch) {\n        const color = instanceBatch ?\n            instanceBatch._GetInstanceColor(this.key.color) : this.key.color\n\n        //XXX line type\n        const materialFactory =\n            this.key.geometryType === BatchingKey.GeometryType.POINTS ||\n            this.key.geometryType === BatchingKey.GeometryType.POINT_INSTANCE ?\n                this.viewer._GetSimplePointMaterial : this.viewer._GetSimpleColorMaterial\n\n        const material = materialFactory.call(this.viewer, this.viewer._TransformColor(color),\n                                              instanceBatch?.GetInstanceType() ?? InstanceType.NONE)\n\n        let objConstructor\n        switch (this.key.geometryType) {\n        case BatchingKey.GeometryType.POINTS:\n        /* This method also called for creating dots for shaped point instances. */\n        case BatchingKey.GeometryType.POINT_INSTANCE:\n            objConstructor = three.Points\n            break\n        case BatchingKey.GeometryType.LINES:\n        case BatchingKey.GeometryType.INDEXED_LINES:\n            objConstructor = three.LineSegments\n            break\n        case BatchingKey.GeometryType.TRIANGLES:\n        case BatchingKey.GeometryType.INDEXED_TRIANGLES:\n            objConstructor = three.Mesh\n            break\n        default:\n            throw new Error(\"Unexpected geometry type:\" + this.key.geometryType)\n        }\n\n        function CreateObject(vertices, indices) {\n            const geometry = instanceBatch ?\n                new three.InstancedBufferGeometry() : new three.BufferGeometry()\n            geometry.setAttribute(\"position\", vertices)\n            instanceBatch?._SetInstanceTransformAttribute(geometry)\n            if (indices) {\n                geometry.setIndex(indices)\n            }\n            const obj = new objConstructor(geometry, material)\n            obj.frustumCulled = false\n            obj.matrixAutoUpdate = false\n            return obj\n        }\n\n        if (this.chunks) {\n            for (const chunk of this.chunks) {\n                yield CreateObject(chunk.vertices, chunk.indices)\n            }\n        } else {\n            yield CreateObject(this.vertices)\n        }\n    }\n\n    /**\n     * @param geometry {InstancedBufferGeometry}\n     */\n    _SetInstanceTransformAttribute(geometry) {\n        if (!geometry.isInstancedBufferGeometry) {\n            throw new Error(\"InstancedBufferGeometry expected\")\n        }\n        if (this.key.geometryType === BatchingKey.GeometryType.POINT_INSTANCE) {\n            geometry.setAttribute(\"instanceTransform\", this.transforms)\n        } else {\n            geometry.setAttribute(\"instanceTransform0\", this.transforms0)\n            geometry.setAttribute(\"instanceTransform1\", this.transforms1)\n        }\n    }\n\n    *_CreateBlockInstanceObjects() {\n        const block = this.viewer.blocks.get(this.key.blockName)\n        if (!block) {\n            return\n        }\n        for (const batch of block.batches) {\n            yield* batch.CreateObjects(this)\n        }\n        if (this.hasOwnProperty(\"vertices\")) {\n            /* Dots for point shapes. */\n            yield* this._CreateObjects()\n        }\n    }\n\n    /**\n     * @param defColor {number} Color value for block definition batch.\n     * @return {number} RGB color value for a block instance.\n     */\n    _GetInstanceColor(defColor) {\n        if (defColor === ColorCode.BY_BLOCK) {\n            return this.key.color\n        } else if (defColor === ColorCode.BY_LAYER) {\n            return this.layerColor\n        } else {\n            return defColor\n        }\n    }\n}\n\nclass Layer {\n    constructor(name, displayName, color) {\n        this.name = name\n        this.displayName = displayName\n        this.color = color\n        this.objects = []\n    }\n\n    PushObject(obj) {\n        this.objects.push(obj)\n    }\n\n    Dispose() {\n        for (const obj of this.objects) {\n            obj.geometry.dispose()\n        }\n        this.objects = null\n    }\n}\n\nclass Block {\n    constructor() {\n        this.batches = []\n    }\n\n    /** @param batch {Batch} */\n    PushBatch(batch) {\n        this.batches.push(batch)\n    }\n}\n\n/** Custom viewer event names are prefixed with this string. */\nconst EVENT_NAME_PREFIX = \"__dxf_\"\n\n/** Transform sRGB color component to linear color space. */\nfunction LinearColor(c) {\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4)\n}\n\n/** Transform linear color component to sRGB color space. */\nfunction SRgbColor(c) {\n    return c < 0.003 ? c * 12.92 : Math.pow(c, 1 / 2.4) * 1.055 - 0.055\n}\n\n/** Get relative luminance value for a color.\n * https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n * @param color {number} RGB color value.\n * @return {number} Luminance value in range [0; 1].\n */\nfunction Luminance(color) {\n    const r = LinearColor(((color & 0xff0000) >>> 16) / 255)\n    const g = LinearColor(((color & 0xff00) >>> 8) / 255)\n    const b = LinearColor((color & 0xff) / 255)\n\n    return r * 0.2126 + g * 0.7152 + b * 0.0722\n}\n\n/**\n * Get contrast ratio for a color pair.\n * https://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n * @param c1\n * @param c2\n * @return {number} Contrast ratio between the colors. Greater than one if the first color color is\n *  brighter than the second one.\n */\nfunction ContrastRatio(c1, c2) {\n    return (Luminance(c1) + 0.05) / (Luminance(c2) + 0.05)\n}\n\nfunction HlsToRgb({h, l, s}) {\n    let r, g, b\n    if (s === 0) {\n        /* Achromatic */\n        r = g = b = l\n    } else {\n        function hue2rgb(p, q, t) {\n            if (t < 0) {\n                t += 1\n            }\n            if (t > 1) {\n                t -= 1\n            }\n            if (t < 1/6) {\n                return p + (q - p) * 6 * t\n            }\n            if (t < 1/2) {\n                return q\n            }\n            if (t < 2/3) {\n                return p + (q - p) * (2/3 - t) * 6\n            }\n            return p\n        }\n\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n        const p = 2 * l - q\n        r = hue2rgb(p, q, h + 1/3)\n        g = hue2rgb(p, q, h)\n        b = hue2rgb(p, q, h - 1/3)\n    }\n\n    return (Math.min(Math.floor(SRgbColor(r) * 256), 255) << 16) |\n           (Math.min(Math.floor(SRgbColor(g) * 256), 255) << 8) |\n            Math.min(Math.floor(SRgbColor(b) * 256), 255)\n}\n\nfunction RgbToHls(color) {\n    const r = LinearColor(((color & 0xff0000) >>> 16) / 255)\n    const g = LinearColor(((color & 0xff00) >>> 8) / 255)\n    const b = LinearColor((color & 0xff) / 255)\n\n    const max = Math.max(r, g, b)\n    const min = Math.min(r, g, b)\n    let h, s\n    const l = (max + min) / 2\n\n    if (max === min) {\n        /* Achromatic */\n        h = s = 0\n    } else {\n        const d = max - min\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n        switch (max) {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n            break;\n        case g:\n            h = (b - r) / d + 2\n            break\n        case b:\n            h = (r - g) / d + 4\n            break\n        }\n        h /= 6\n    }\n\n    return {h, l, s}\n}\n\nfunction Lighten(color, factor) {\n    const hls = RgbToHls(color)\n    hls.l *= factor\n    if (hls.l > 1) {\n        hls.l = 1\n    }\n    return HlsToRgb(hls)\n}\n\nfunction Darken(color, factor) {\n    const hls = RgbToHls(color)\n    hls.l /= factor\n    return HlsToRgb(hls)\n}\n"],"mappings":"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"}]}