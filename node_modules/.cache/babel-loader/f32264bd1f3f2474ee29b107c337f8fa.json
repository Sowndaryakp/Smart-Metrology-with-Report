{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\math\\utils.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\math\\utils.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gInRocmVlIjsKCi8qKiBGaW5kIGludGVyc2VjdGlvbiBwb2ludHMgb2YgdHdvIHNlZ21lbnRzIGluIGEgcGFyYW1ldHJpYyBmb3JtLgogKiBAcGFyYW0ge1ZlY3RvcjJ9IGExIEZpcnN0IHNlZ21lbnQgc3RhcnQgcG9pbnQuCiAqIEBwYXJhbSB7VmVjdG9yMn0gYTIgRmlyc3Qgc2VnbWVudCBlbmQgcG9pbnQuCiAqIEBwYXJhbSB7VmVjdG9yMn0gYjEgU2Vjb25kIHNlZ21lbnQgc3RhcnQgcG9pbnQuCiAqIEBwYXJhbSB7VmVjdG9yMn0gYjIgU2Vjb25kIHNlZ21lbnQgZW5kIHBvaW50LgogKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlIEZvcmNlIGludGVyc2VjdGlvbiBjYWxjdWxhdGlvbiBldmVuIGlmIGludGVyc2VjdGlvbiBwb2ludCBpcyBvdXQgb2YKICogIHNlZ21lbnQgcmFuZ2UuCiAqIEByZXR1cm4gez9udW1iZXJbM119IFBhcmFtZXRlcnMgZm9yIHRoZSBmaXJzdCBhbmQgc2Vjb25kIHNlZ21lbnQgaW4gdGhlIGludGVyc2VjdGlvbiBwb2ludAogKiAgKHBhcmFtZXRlciB2YWx1ZSAwIGNvcnJlc3BvbmRzIHRvIGEgc3RhcnQgcG9pbnQsIDEgLSB0byBhbiBlbmQgcG9pbnQpLiBUaGlyZCBudW1iZXIgaXMgc2VnbWVudHMKICogIGRpcmVjdGlvbiB2ZWN0b3JzIHBzZXVkby1jcm9zcy1wcm9kdWN0LiBOdWxsIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi4KICovCmV4cG9ydCBmdW5jdGlvbiBJbnRlcnNlY3RTZWdtZW50c1BhcmFtZXRyaWMoYTEsIGEyLCBiMSwgYjIsIGZvcmNlID0gZmFsc2UpIHsKICBjb25zdCBhID0gYTIuY2xvbmUoKS5zdWIoYTEpOwogIGNvbnN0IGIgPSBiMi5jbG9uZSgpLnN1YihiMSk7CiAgaWYgKGEubGVuZ3RoU3EoKSA9PSAwIHx8IGIubGVuZ3RoU3EoKSA9PSAwKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgY29uc3QgUyA9IGEuY3Jvc3MoYik7CiAgaWYgKE1hdGguYWJzKFMpIDw9IE51bWJlci5FUFNJTE9OKSB7CiAgICAvKiBDb25zaWRlciBwYXJhbGxlbC4gKi8KICAgIHJldHVybiBudWxsOwogIH0KICBjb25zdCBjID0gYjEuY2xvbmUoKS5zdWIoYTEpOwogIGNvbnN0IHQgPSBjLmNyb3NzKGIpIC8gUzsKICBpZiAoIWZvcmNlICYmICh0IDwgMCB8fCB0ID4gMSkpIHsKICAgIC8qIEludGVyc2VjdGlvbiBwb2ludCBpcyBvdXQgdGhlIGZpcnN0IHNlZ21lbnQgZW5kcG9pbnRzLiAqLwogICAgcmV0dXJuIG51bGw7CiAgfQogIGNvbnN0IHUgPSBjLmNyb3NzKGEpIC8gUzsKICBpZiAoIWZvcmNlICYmICh1IDwgMCB8fCB1ID4gMSkpIHsKICAgIC8qIEludGVyc2VjdGlvbiBwb2ludCBpcyBvdXQgdGhlIHNlY29uZCBzZWdtZW50IGVuZHBvaW50cy4gKi8KICAgIHJldHVybiBudWxsOwogIH0KICByZXR1cm4gW3QsIHUsIFNdOwp9CgovKiogIEZpbmQgaW50ZXJzZWN0aW9uIHBvaW50cyBvZiB0d28gc2VnbWVudHMuCiAqIEBwYXJhbSB7VmVjdG9yMn0gYTEgRmlyc3Qgc2VnbWVudCBzdGFydCBwb2ludC4KICogQHBhcmFtIHtWZWN0b3IyfSBhMiBGaXJzdCBzZWdtZW50IGVuZCBwb2ludC4KICogQHBhcmFtIHtWZWN0b3IyfSBiMSBTZWNvbmQgc2VnbWVudCBzdGFydCBwb2ludC4KICogQHBhcmFtIHtWZWN0b3IyfSBiMiBTZWNvbmQgc2VnbWVudCBlbmQgcG9pbnQuCiAqIEByZXR1cm4gez9WZWN0b3IyfSBJbnRlcnNlY3Rpb24gcG9pbnQgY29vcmRpbmF0ZSwgbnVsbCBpZiBubyBpbnRlcnNlY3Rpb24uCiAqLwpleHBvcnQgZnVuY3Rpb24gSW50ZXJzZWN0U2VnbWVudHMoYTEsIGEyLCBiMSwgYjIpIHsKICBjb25zdCBwYXJhbXMgPSBJbnRlcnNlY3RTZWdtZW50c1BhcmFtZXRyaWMoYTEsIGEyLCBiMSwgYjIpOwogIGlmICghcGFyYW1zKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgcmV0dXJuIGEyLmNsb25lKCkuc3ViKGExKS5tdWx0aXBseVNjYWxhcihwYXJhbXNbMF0pLmFkZChhMSk7Cn0="},{"version":3,"names":["Vector2","IntersectSegmentsParametric","a1","a2","b1","b2","force","a","clone","sub","b","lengthSq","S","cross","Math","abs","Number","EPSILON","c","t","u","IntersectSegments","params","multiplyScalar","add"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI ALL PROJECTS/GERB-INDIA(CLIENT)/GerbIndiaDashboard-CMTI-Full/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/math/utils.js"],"sourcesContent":["import { Vector2 } from \"three\"\n\n\n/** Find intersection points of two segments in a parametric form.\n * @param {Vector2} a1 First segment start point.\n * @param {Vector2} a2 First segment end point.\n * @param {Vector2} b1 Second segment start point.\n * @param {Vector2} b2 Second segment end point.\n * @param {boolean} force Force intersection calculation even if intersection point is out of\n *  segment range.\n * @return {?number[3]} Parameters for the first and second segment in the intersection point\n *  (parameter value 0 corresponds to a start point, 1 - to an end point). Third number is segments\n *  direction vectors pseudo-cross-product. Null if there is no intersection.\n */\nexport function IntersectSegmentsParametric(a1, a2, b1, b2, force = false) {\n    const a = a2.clone().sub(a1)\n    const b = b2.clone().sub(b1)\n\n    if (a.lengthSq() == 0 || b.lengthSq() == 0) {\n        return null\n    }\n\n    const S = a.cross(b)\n    if (Math.abs(S) <= Number.EPSILON) {\n        /* Consider parallel. */\n        return null\n    }\n\n    const c = b1.clone().sub(a1)\n\n    const t = c.cross(b) / S\n    if (!force && (t < 0 || t > 1)) {\n        /* Intersection point is out the first segment endpoints. */\n        return null\n    }\n\n    const u = c.cross(a) / S\n    if (!force && (u < 0 || u > 1)) {\n        /* Intersection point is out the second segment endpoints. */\n        return null\n    }\n\n    return [t, u, S]\n}\n\n/**  Find intersection points of two segments.\n * @param {Vector2} a1 First segment start point.\n * @param {Vector2} a2 First segment end point.\n * @param {Vector2} b1 Second segment start point.\n * @param {Vector2} b2 Second segment end point.\n * @return {?Vector2} Intersection point coordinate, null if no intersection.\n */\nexport function IntersectSegments(a1, a2, b1, b2) {\n    const params = IntersectSegmentsParametric(a1, a2, b1, b2)\n    if (!params) {\n        return null\n    }\n    return a2.clone().sub(a1).multiplyScalar(params[0]).add(a1)\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,KAAK,GAAG,KAAK,EAAE;EACvE,MAAMC,CAAC,GAAGJ,EAAE,CAACK,KAAK,CAAC,CAAC,CAACC,GAAG,CAACP,EAAE,CAAC;EAC5B,MAAMQ,CAAC,GAAGL,EAAE,CAACG,KAAK,CAAC,CAAC,CAACC,GAAG,CAACL,EAAE,CAAC;EAE5B,IAAIG,CAAC,CAACI,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAID,CAAC,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;IACxC,OAAO,IAAI;EACf;EAEA,MAAMC,CAAC,GAAGL,CAAC,CAACM,KAAK,CAACH,CAAC,CAAC;EACpB,IAAII,IAAI,CAACC,GAAG,CAACH,CAAC,CAAC,IAAII,MAAM,CAACC,OAAO,EAAE;IAC/B;IACA,OAAO,IAAI;EACf;EAEA,MAAMC,CAAC,GAAGd,EAAE,CAACI,KAAK,CAAC,CAAC,CAACC,GAAG,CAACP,EAAE,CAAC;EAE5B,MAAMiB,CAAC,GAAGD,CAAC,CAACL,KAAK,CAACH,CAAC,CAAC,GAAGE,CAAC;EACxB,IAAI,CAACN,KAAK,KAAKa,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,EAAE;IAC5B;IACA,OAAO,IAAI;EACf;EAEA,MAAMC,CAAC,GAAGF,CAAC,CAACL,KAAK,CAACN,CAAC,CAAC,GAAGK,CAAC;EACxB,IAAI,CAACN,KAAK,KAAKc,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,CAAC,CAAC,EAAE;IAC5B;IACA,OAAO,IAAI;EACf;EAEA,OAAO,CAACD,CAAC,EAAEC,CAAC,EAAER,CAAC,CAAC;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,iBAAiBA,CAACnB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAC9C,MAAMiB,MAAM,GAAGrB,2BAA2B,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;EAC1D,IAAI,CAACiB,MAAM,EAAE;IACT,OAAO,IAAI;EACf;EACA,OAAOnB,EAAE,CAACK,KAAK,CAAC,CAAC,CAACC,GAAG,CAACP,EAAE,CAAC,CAACqB,cAAc,CAACD,MAAM,CAAC,CAAC,CAAC,CAAC,CAACE,GAAG,CAACtB,EAAE,CAAC;AAC/D"}]}