{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\DxfViewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\src\\components\\DxfViewer.vue","mtime":1710400638000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgRHhmVmlld2VyIH0gZnJvbSAiZHhmLXZpZXdlciI7CmltcG9ydCAqIGFzIHRocmVlIGZyb20gInRocmVlIjsKaW1wb3J0IER4ZlZpZXdlcldvcmtlciBmcm9tICJ3b3JrZXItbG9hZGVyIS4vRHhmVmlld2VyV29ya2VyIjsKCi8qKiBFdmVudHM6IGFsbCBEeGZWaWV3ZXIgc3VwcG9ydGVkIGV2ZW50cyAoc2VlIER4ZlZpZXdlci5TdWJzY3JpYmUoKSksIHByZWZpeGVkIHdpdGggImR4Zi0iLiAqLwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkR4ZlZpZXdlciIsCiAgcHJvcHM6IHsKICAgIGR4ZlVybDogewogICAgICBkZWZhdWx0OiBudWxsCiAgICB9LAogICAgLyoqIExpc3Qgb2YgZm9udCBVUkxzLiBGaWxlcyBzaG91bGQgaGF2ZSBUVEYgZm9ybWF0LiBGb250cyBhcmUgdXNlZCBpbiB0aGUgc3BlY2lmaWVkIG9yZGVyLAogICAgICogZWFjaCBvbmUgaXMgY2hlY2tlZCB1bnRpbCBuZWNlc3NhcnkgZ2x5cGggaXMgZm91bmQuIFRleHQgaXMgbm90IHJlbmRlcmVkIGlmIGZvbnRzIGFyZSBub3QKICAgICAqIHNwZWNpZmllZC4KICAgICAqLwogICAgZm9udHM6IHsKICAgICAgZGVmYXVsdDogbnVsbAogICAgfSwKICAgIG9wdGlvbnM6IHsKICAgICAgZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgY2xlYXJDb2xvcjogbmV3IHRocmVlLkNvbG9yKCIjZmZmIiksCiAgICAgICAgICBhdXRvUmVzaXplOiB0cnVlLAogICAgICAgICAgY29sb3JDb3JyZWN0aW9uOiB0cnVlLAogICAgICAgICAgc2NlbmVPcHRpb25zOiB7CiAgICAgICAgICAgIHdpcmVmcmFtZU1lc2g6IHRydWUKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgcHJvZ3Jlc3M6IG51bGwsCiAgICAgIHByb2dyZXNzVGV4dDogbnVsbCwKICAgICAgY3VyUHJvZ3Jlc3NQaGFzZTogbnVsbCwKICAgICAgZXJyb3I6IG51bGwKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgYXN5bmMgZHhmVXJsKGR4ZlVybCkgewogICAgICBpZiAoZHhmVXJsICE9PSBudWxsKSB7CiAgICAgICAgYXdhaXQgdGhpcy5Mb2FkKGR4ZlVybCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5keGZWaWV3ZXIuQ2xlYXIoKTsKICAgICAgICB0aGlzLmVycm9yID0gbnVsbDsKICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMucHJvZ3Jlc3MgPSBudWxsOwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBMb2FkKHVybCkgewogICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7CiAgICAgIHRoaXMuZXJyb3IgPSBudWxsOwogICAgICB0cnkgewogICAgICAgIGF3YWl0IHRoaXMuZHhmVmlld2VyLkxvYWQoewogICAgICAgICAgdXJsLAogICAgICAgICAgZm9udHM6IHRoaXMuZm9udHMsCiAgICAgICAgICBwcm9ncmVzc0NiazogdGhpcy5fT25Qcm9ncmVzcy5iaW5kKHRoaXMpLAogICAgICAgICAgd29ya2VyRmFjdG9yeTogRHhmVmlld2VyV29ya2VyCiAgICAgICAgfSk7CiAgICAgICAgLy8gRW1pdCBhIGN1c3RvbSBldmVudCB3aGVuIGEgaGFuZGxlIGlzIGNsaWNrZWQKICAgICAgICB0aGlzLmR4ZlZpZXdlci5TdWJzY3JpYmUoImhhbmRsZUNsaWNrIiwgaGFuZGxlID0+IHsKICAgICAgICAgIHRoaXMuJGVtaXQoImhhbmRsZS1jbGljayIsIGhhbmRsZSk7CiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTsKICAgICAgICB0aGlzLmVycm9yID0gZXJyb3IudG9TdHJpbmcoKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlOwogICAgICAgIHRoaXMucHJvZ3Jlc3NUZXh0ID0gbnVsbDsKICAgICAgICB0aGlzLnByb2dyZXNzID0gbnVsbDsKICAgICAgICB0aGlzLmN1clByb2dyZXNzUGhhc2UgPSBudWxsOwogICAgICB9CiAgICB9LAogICAgQ2hhbmdlRGltZW5zaW9uQ29sb3IoaGFuZGxlLCBjb2xvcikgewogICAgICAvLyBJbXBsZW1lbnQgdGhlIGxvZ2ljIHRvIGNoYW5nZSB0aGUgY29sb3Igb2YgdGhlIHNwZWNpZmllZCBkaW1lbnNpb24gaW4gdGhlIERYRiBkaWFncmFtCiAgICAgIC8vIEZvciBleGFtcGxlLCBjaGFuZ2UgdGhlIGNvbG9yIG9yIGFwcGx5IGEgdmlzdWFsIGhpZ2hsaWdodCB0byB0aGUgZGltZW5zaW9uCiAgICAgIGNvbnNvbGUubG9nKGBEaW1lbnNpb24gd2l0aCBoYW5kbGUgJHtoYW5kbGV9IGNvbG9yIGNoYW5nZWQgdG8gJHtjb2xvcn1gKTsKICAgIH0sCiAgICBIaWdobGlnaHRIYW5kbGUoaGFuZGxlKSB7CiAgICAgIC8vIEltcGxlbWVudCB0aGUgbG9naWMgdG8gaGlnaGxpZ2h0IHRoZSBzcGVjaWZpZWQgaGFuZGxlIGluIHRoZSBEWEYgZGlhZ3JhbQogICAgICAvLyBGb3IgZXhhbXBsZSwgY2hhbmdlIHRoZSBjb2xvciBvciBhcHBseSBhIHZpc3VhbCBoaWdobGlnaHQgdG8gdGhlIGhhbmRsZQogICAgICBjb25zb2xlLmxvZyhgSGFuZGxlICR7aGFuZGxlfSBoaWdobGlnaHRlZCBpbiB0aGUgRFhGIGRpYWdyYW0uYCk7CiAgICB9LAogICAgLyoqIEByZXR1cm4ge0R4ZlZpZXdlcn0gKi8KICAgIEdldFZpZXdlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuZHhmVmlld2VyOwogICAgfSwKICAgIF9PblByb2dyZXNzKHBoYXNlLCBzaXplLCB0b3RhbFNpemUpIHsKICAgICAgaWYgKHBoYXNlICE9PSB0aGlzLmN1clByb2dyZXNzUGhhc2UpIHsKICAgICAgICBzd2l0Y2ggKHBoYXNlKSB7CiAgICAgICAgICBjYXNlICJmb250IjoKICAgICAgICAgICAgdGhpcy5wcm9ncmVzc1RleHQgPSAiRmV0Y2hpbmcgZm9udHMuLi4iOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgImZldGNoIjoKICAgICAgICAgICAgdGhpcy5wcm9ncmVzc1RleHQgPSAiRmV0Y2hpbmcgZmlsZS4uLiI7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAicGFyc2UiOgogICAgICAgICAgICB0aGlzLnByb2dyZXNzVGV4dCA9ICJQYXJzaW5nIGZpbGUuLi4iOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgInByZXBhcmUiOgogICAgICAgICAgICB0aGlzLnByb2dyZXNzVGV4dCA9ICJQcmVwYXJpbmcgcmVuZGVyaW5nIGRhdGEuLi4iOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgdGhpcy5jdXJQcm9ncmVzc1BoYXNlID0gcGhhc2U7CiAgICAgIH0KICAgICAgaWYgKHRvdGFsU2l6ZSA9PT0gbnVsbCkgewogICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAtMTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnByb2dyZXNzID0gc2l6ZSAvIHRvdGFsU2l6ZTsKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuZHhmVmlld2VyID0gbmV3IER4ZlZpZXdlcih0aGlzLiRyZWZzLmNhbnZhc0NvbnRhaW5lciwgdGhpcy5vcHRpb25zKTsKICAgIGNvbnN0IFN1YnNjcmliZSA9IGV2ZW50TmFtZSA9PiB7CiAgICAgIHRoaXMuZHhmVmlld2VyLlN1YnNjcmliZShldmVudE5hbWUsIGUgPT4gdGhpcy4kZW1pdCgiZHhmLSIgKyBldmVudE5hbWUsIGUpKTsKICAgIH07CiAgICBmb3IgKGNvbnN0IGV2ZW50TmFtZSBvZiBbImxvYWRlZCIsICJjbGVhcmVkIiwgImRlc3Ryb3llZCIsICJyZXNpemVkIiwgInBvaW50ZXJkb3duIiwgInBvaW50ZXJ1cCIsICJ2aWV3Q2hhbmdlZCIsICJtZXNzYWdlIl0pIHsKICAgICAgU3Vic2NyaWJlKGV2ZW50TmFtZSk7CiAgICB9CiAgfSwKICBkZXN0cm95ZWQoKSB7CiAgICB0aGlzLmR4ZlZpZXdlci5EZXN0cm95KCk7CiAgICB0aGlzLmR4ZlZpZXdlciA9IG51bGw7CiAgfQp9Ow=="},{"version":3,"names":["DxfViewer","three","DxfViewerWorker","name","props","dxfUrl","default","fonts","options","clearColor","Color","autoResize","colorCorrection","sceneOptions","wireframeMesh","data","isLoading","progress","progressText","curProgressPhase","error","watch","Load","dxfViewer","Clear","methods","url","progressCbk","_OnProgress","bind","workerFactory","Subscribe","handle","$emit","console","warn","toString","ChangeDimensionColor","color","log","HighlightHandle","GetViewer","phase","size","totalSize","mounted","$refs","canvasContainer","eventName","e","destroyed","Destroy"],"sources":["src/components/DxfViewer.vue"],"sourcesContent":["<template>\n    <div class=\"canvasContainer\" ref=\"canvasContainer\">\n        <q-inner-loading :showing=\"isLoading\" color=\"primary\" style=\"z-index: 10\"/>\n        <div v-if=\"progress !== null\" class=\"progress\">\n            <q-linear-progress color=\"primary\" :indeterminate=\"progress < 0\" :value=\"progress\" />\n            <div v-if=\"progressText !== null\" class=\"progressText\">{{progressText}}</div>\n        </div>\n        <div v-if=\"error !== null\" class=\"error\" :title=\"error\">\n            <q-icon name=\"warning\" class=\"text-red\" style=\"font-size: 4rem;\" /> Error occurred: {{error}}\n        </div>\n    </div>\n    </template>\n    \n    <script>\n    import {DxfViewer} from \"dxf-viewer\"\n    import * as three from \"three\"\n    import DxfViewerWorker from \"worker-loader!./DxfViewerWorker\"\n    \n    /** Events: all DxfViewer supported events (see DxfViewer.Subscribe()), prefixed with \"dxf-\". */\n    export default {\n        name: \"DxfViewer\",\n    \n        props: {\n            dxfUrl: {\n                default: null\n            },\n            /** List of font URLs. Files should have TTF format. Fonts are used in the specified order,\n             * each one is checked until necessary glyph is found. Text is not rendered if fonts are not\n             * specified.\n             */\n            fonts: {\n                default: null\n            },\n            options: {\n                default() {\n                    return {\n                        clearColor: new three.Color(\"#fff\"),\n                        autoResize: true,\n                        colorCorrection: true,\n                        sceneOptions: {\n                            wireframeMesh: true\n                        }\n                    }\n                }\n            }\n        },\n    \n        data() {\n            return {\n                isLoading: false,\n                progress: null,\n                progressText: null,\n                curProgressPhase: null,\n                error: null\n            }\n        },\n    \n        watch: {\n            async dxfUrl(dxfUrl) {\n                if (dxfUrl !== null) {\n                    await this.Load(dxfUrl)\n                } else {\n                    this.dxfViewer.Clear()\n                    this.error = null\n                    this.isLoading = false\n                    this.progress = null\n                }\n            }\n        },\n    \n        methods: {\n        async Load(url) {\n          this.isLoading = true;\n          this.error = null;\n          try {\n            await this.dxfViewer.Load({\n              url,\n              fonts: this.fonts,\n              progressCbk: this._OnProgress.bind(this),\n              workerFactory: DxfViewerWorker\n            });\n            // Emit a custom event when a handle is clicked\n            this.dxfViewer.Subscribe(\"handleClick\", (handle) => {\n              this.$emit(\"handle-click\", handle);\n            });\n          } catch (error) {\n            console.warn(error);\n            this.error = error.toString();\n          } finally {\n            this.isLoading = false;\n            this.progressText = null;\n            this.progress = null;\n            this.curProgressPhase = null;\n          }\n        },\n        ChangeDimensionColor(handle, color) {\n          // Implement the logic to change the color of the specified dimension in the DXF diagram\n          // For example, change the color or apply a visual highlight to the dimension\n          console.log(`Dimension with handle ${handle} color changed to ${color}`);\n        },\n    \n        HighlightHandle(handle) {\n          // Implement the logic to highlight the specified handle in the DXF diagram\n          // For example, change the color or apply a visual highlight to the handle\n          console.log(`Handle ${handle} highlighted in the DXF diagram.`);\n        },\n    \n            /** @return {DxfViewer} */\n            GetViewer() {\n                return this.dxfViewer\n            },\n            \n            _OnProgress(phase, size, totalSize) {\n                if (phase !== this.curProgressPhase) {\n                    switch(phase) {\n                    case \"font\":\n                        this.progressText = \"Fetching fonts...\"\n                        break\n                    case \"fetch\":\n                        this.progressText = \"Fetching file...\"\n                        break\n                    case \"parse\":\n                        this.progressText = \"Parsing file...\"\n                        break\n                    case \"prepare\":\n                        this.progressText = \"Preparing rendering data...\"\n                        break\n                    }\n                    this.curProgressPhase = phase\n                }\n                if (totalSize === null) {\n                    this.progress = -1\n                } else {\n                    this.progress = size / totalSize\n                }\n            }\n        },\n        \n        mounted() {\n            this.dxfViewer = new DxfViewer(this.$refs.canvasContainer, this.options)\n            const Subscribe = eventName => {\n                this.dxfViewer.Subscribe(eventName, e => this.$emit(\"dxf-\" + eventName, e))\n            }\n            for (const eventName of [\"loaded\", \"cleared\", \"destroyed\", \"resized\", \"pointerdown\",\n                                     \"pointerup\", \"viewChanged\", \"message\"]) {\n                Subscribe(eventName)\n            }\n        },\n    \n        destroyed() {\n            this.dxfViewer.Destroy()\n            this.dxfViewer = null\n        }\n    }\n    </script>\n    \n    <style scoped lang=\"less\">\n    \n    .canvasContainer {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        min-width: 100px;\n        min-height: 100px;\n    \n        .progress {\n            position: absolute;\n            z-index: 20;\n            width: 90%;\n            margin: 20px 5%;\n    \n            .progressText {\n                margin: 10px 20px;\n                font-size: 14px;\n                color: #262d33;\n                text-align: center;\n            }\n        }\n    \n        .error {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            z-index: 20;\n            padding: 30px;\n    \n            img {\n                width: 24px;\n                height: 24px;\n                vertical-align: middle;\n                margin: 4px;\n            }\n        }\n    }\n    \n    </style>\n    "],"mappings":"AAcA,SAAAA,SAAA;AACA,YAAAC,KAAA;AACA,OAAAC,eAAA;;AAEA;AACA;EACAC,IAAA;EAEAC,KAAA;IACAC,MAAA;MACAC,OAAA;IACA;IACA;AACA;AACA;AACA;IACAC,KAAA;MACAD,OAAA;IACA;IACAE,OAAA;MACAF,QAAA;QACA;UACAG,UAAA,MAAAR,KAAA,CAAAS,KAAA;UACAC,UAAA;UACAC,eAAA;UACAC,YAAA;YACAC,aAAA;UACA;QACA;MACA;IACA;EACA;EAEAC,KAAA;IACA;MACAC,SAAA;MACAC,QAAA;MACAC,YAAA;MACAC,gBAAA;MACAC,KAAA;IACA;EACA;EAEAC,KAAA;IACA,MAAAhB,aAAA;MACA,IAAAA,MAAA;QACA,WAAAiB,IAAA,CAAAjB,MAAA;MACA;QACA,KAAAkB,SAAA,CAAAC,KAAA;QACA,KAAAJ,KAAA;QACA,KAAAJ,SAAA;QACA,KAAAC,QAAA;MACA;IACA;EACA;EAEAQ,OAAA;IACA,MAAAH,KAAAI,GAAA;MACA,KAAAV,SAAA;MACA,KAAAI,KAAA;MACA;QACA,WAAAG,SAAA,CAAAD,IAAA;UACAI,GAAA;UACAnB,KAAA,OAAAA,KAAA;UACAoB,WAAA,OAAAC,WAAA,CAAAC,IAAA;UACAC,aAAA,EAAA5B;QACA;QACA;QACA,KAAAqB,SAAA,CAAAQ,SAAA,gBAAAC,MAAA;UACA,KAAAC,KAAA,iBAAAD,MAAA;QACA;MACA,SAAAZ,KAAA;QACAc,OAAA,CAAAC,IAAA,CAAAf,KAAA;QACA,KAAAA,KAAA,GAAAA,KAAA,CAAAgB,QAAA;MACA;QACA,KAAApB,SAAA;QACA,KAAAE,YAAA;QACA,KAAAD,QAAA;QACA,KAAAE,gBAAA;MACA;IACA;IACAkB,qBAAAL,MAAA,EAAAM,KAAA;MACA;MACA;MACAJ,OAAA,CAAAK,GAAA,0BAAAP,MAAA,qBAAAM,KAAA;IACA;IAEAE,gBAAAR,MAAA;MACA;MACA;MACAE,OAAA,CAAAK,GAAA,WAAAP,MAAA;IACA;IAEA;IACAS,UAAA;MACA,YAAAlB,SAAA;IACA;IAEAK,YAAAc,KAAA,EAAAC,IAAA,EAAAC,SAAA;MACA,IAAAF,KAAA,UAAAvB,gBAAA;QACA,QAAAuB,KAAA;UACA;YACA,KAAAxB,YAAA;YACA;UACA;YACA,KAAAA,YAAA;YACA;UACA;YACA,KAAAA,YAAA;YACA;UACA;YACA,KAAAA,YAAA;YACA;QACA;QACA,KAAAC,gBAAA,GAAAuB,KAAA;MACA;MACA,IAAAE,SAAA;QACA,KAAA3B,QAAA;MACA;QACA,KAAAA,QAAA,GAAA0B,IAAA,GAAAC,SAAA;MACA;IACA;EACA;EAEAC,QAAA;IACA,KAAAtB,SAAA,OAAAvB,SAAA,MAAA8C,KAAA,CAAAC,eAAA,OAAAvC,OAAA;IACA,MAAAuB,SAAA,GAAAiB,SAAA;MACA,KAAAzB,SAAA,CAAAQ,SAAA,CAAAiB,SAAA,EAAAC,CAAA,SAAAhB,KAAA,UAAAe,SAAA,EAAAC,CAAA;IACA;IACA,WAAAD,SAAA,iEACA;MACAjB,SAAA,CAAAiB,SAAA;IACA;EACA;EAEAE,UAAA;IACA,KAAA3B,SAAA,CAAA4B,OAAA;IACA,KAAA5B,SAAA;EACA;AACA"}]}