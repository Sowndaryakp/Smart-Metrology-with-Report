{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\DynamicBuffer.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\DynamicBuffer.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI Projects\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoqIFR5cGVkLWFycmF5LWJhc2VkIGJ1ZmZlciB3aGljaCBjYW4gYmUgZHluYW1pY2FsbHkgZXh0ZW5kZWQuICovCmV4cG9ydCBjbGFzcyBEeW5hbWljQnVmZmVyIHsKICAvKioKICAgKiBAcGFyYW0gdHlwZSBBcnJheSB0eXBlLCBzZWUgTmF0aXZlVHlwZS4KICAgKiBAcGFyYW0gaW5pdGlhbENhcGFjaXR5IEluaXRpYWwgY2FwYWNpdHksIG51bWJlciBvZiBlbGVtZW50cy4KICAgKi8KICBjb25zdHJ1Y3Rvcih0eXBlLCBpbml0aWFsQ2FwYWNpdHkgPSAxNikgewogICAgdGhpcy50eXBlID0gdHlwZTsKICAgIHRoaXMuY2FwYWNpdHkgPSBpbml0aWFsQ2FwYWNpdHk7CiAgICB0aGlzLnNpemUgPSAwOwogICAgdGhpcy5idWZmZXIgPSBuZXcgKE5hdGl2ZUFycmF5KHR5cGUpKShpbml0aWFsQ2FwYWNpdHkpOwogIH0KICBHZXRTaXplKCkgewogICAgcmV0dXJuIHRoaXMuc2l6ZTsKICB9CgogIC8qKgogICAqIEFwcGVuZCBuZXcgdmFsdWUgdG8gdGhlIGJ1ZmZlciBlbmQuCiAgICogQHJldHVybiBBcHBlbmRlZCB2YWx1ZSBwb3NpdGlvbiBpbiB0aGUgYnVmZmVyLgogICAqLwogIFB1c2godmFsdWUpIHsKICAgIHRoaXMuX0NoZWNrR3JvdygpOwogICAgY29uc3QgcG9zID0gdGhpcy5zaXplOwogICAgdGhpcy5idWZmZXJbcG9zXSA9IHZhbHVlOwogICAgdGhpcy5zaXplKys7CiAgICByZXR1cm4gcG9zOwogIH0KICBHZXQoaW5kZXgpIHsKICAgIGlmIChpbmRleCA+PSB0aGlzLnNpemUpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmRleCBvdXQgb2YgcmFuZ2U6ICR7aW5kZXh9LyR7dGhpcy5zaXplfWApOwogICAgfQogICAgcmV0dXJuIHRoaXMuYnVmZmVyW2luZGV4XTsKICB9CgogIC8qKiBDb3B5IGNvbnRlbnQgdG8gdGhlIHNwZWNpZmllZCBidWZmZXIuCiAgICogQHBhcmFtIGRzdEJ1ZmZlciBEZXN0aW5hdGlvbiBidWZmZXIsIHNob3VsZCBiZSB0eXBlZCBhcnJheSBvZiB0aGUgc2FtZSB0eXBlLgogICAqIEBwYXJhbSBkc3RPZmZzZXQge251bWJlcn0gT2Zmc2V0IGluIGVsZW1lbnRzIGluIHRoZSBkZXN0aW5hdGlvbiBidWZmZXIuCiAgICogQHBhcmFtIHNyY09mZnNldCB7bnVtYmVyfSBPZmZzZXQgaW4gZWxlbWVudHMgaW4gdGhpcyBidWZmZXIuCiAgICogQHBhcmFtIHNpemUge251bWJlcn0gTnVtYmVyIG9mIGVsZW1lbnRzIHRvIGNvcHksIC0xIChkZWZhdWx0KSB0byBjb3B5IHRpbGwgdGhpcyBidWZmZXIgZW5kLgogICAqLwogIENvcHlUbyhkc3RCdWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0ID0gMCwgc2l6ZSA9IC0xKSB7CiAgICBpZiAoc2l6ZSA9PT0gLTEpIHsKICAgICAgc2l6ZSA9IHRoaXMuc2l6ZSAtIHNyY09mZnNldDsKICAgIH0KICAgIGNvbnN0IHNyYyA9IG5ldyAoTmF0aXZlQXJyYXkodGhpcy50eXBlKSkodGhpcy5idWZmZXIuYnVmZmVyLCBzcmNPZmZzZXQsIHNpemUpOwogICAgZHN0QnVmZmVyLnNldChzcmMsIGRzdE9mZnNldCk7CiAgfQogIF9DaGVja0dyb3coKSB7CiAgICBpZiAodGhpcy5zaXplIDwgdGhpcy5jYXBhY2l0eSkgewogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLmNhcGFjaXR5ICo9IDI7CiAgICBjb25zdCBuZXdCdWZmZXIgPSBuZXcgKE5hdGl2ZUFycmF5KHRoaXMudHlwZSkpKHRoaXMuY2FwYWNpdHkpOwogICAgbmV3QnVmZmVyLnNldCh0aGlzLmJ1ZmZlcik7CiAgICB0aGlzLmJ1ZmZlciA9IG5ld0J1ZmZlcjsKICB9Cn0KZXhwb3J0IGNvbnN0IE5hdGl2ZVR5cGUgPSB7CiAgSU5UODogMCwKICBVSU5UODogMSwKICBVSU5UOF9DTEFNUEVEOiAyLAogIElOVDE2OiAzLAogIFVJTlQxNjogNCwKICBJTlQzMjogNSwKICBVSU5UMzI6IDYsCiAgSU5UNjQ6IDcsCiAgVUlOVDY0OiA4LAogIEZMT0FUMzI6IDksCiAgRkxPQVQ2NDogMTAKfTsKCi8qKiBHZXQgVHlwZWRBcnJheSB0eXBlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNwZWNpZmllZCBOYXRpdmVUeXBlLiAqLwpleHBvcnQgZnVuY3Rpb24gTmF0aXZlQXJyYXkodHlwZSkgewogIHN3aXRjaCAodHlwZSkgewogICAgY2FzZSBOYXRpdmVUeXBlLklOVDg6CiAgICAgIHJldHVybiBJbnQ4QXJyYXk7CiAgICBjYXNlIE5hdGl2ZVR5cGUuVUlOVDg6CiAgICAgIHJldHVybiBVaW50OEFycmF5OwogICAgY2FzZSBOYXRpdmVUeXBlLlVJTlQ4X0NMQU1QRUQ6CiAgICAgIHJldHVybiBVaW50OENsYW1wZWRBcnJheTsKICAgIGNhc2UgTmF0aXZlVHlwZS5JTlQxNjoKICAgICAgcmV0dXJuIEludDE2QXJyYXk7CiAgICBjYXNlIE5hdGl2ZVR5cGUuVUlOVDE2OgogICAgICByZXR1cm4gVWludDE2QXJyYXk7CiAgICBjYXNlIE5hdGl2ZVR5cGUuSU5UMzI6CiAgICAgIHJldHVybiBJbnQzMkFycmF5OwogICAgY2FzZSBOYXRpdmVUeXBlLlVJTlQzMjoKICAgICAgcmV0dXJuIFVpbnQzMkFycmF5OwogICAgY2FzZSBOYXRpdmVUeXBlLkZMT0FUMzI6CiAgICAgIHJldHVybiBGbG9hdDMyQXJyYXk7CiAgICBjYXNlIE5hdGl2ZVR5cGUuRkxPQVQ2NDoKICAgICAgcmV0dXJuIEZsb2F0NjRBcnJheTsKICAgIGRlZmF1bHQ6CiAgICAgIHRocm93IG5ldyBFcnJvcigiVW5yZWNvZ25pemVkIG5hdGl2ZSB0eXBlOiAiICsgdHlwZSk7CiAgfQp9"},{"version":3,"names":["DynamicBuffer","constructor","type","initialCapacity","capacity","size","buffer","NativeArray","GetSize","Push","value","_CheckGrow","pos","Get","index","Error","CopyTo","dstBuffer","dstOffset","srcOffset","src","set","newBuffer","NativeType","INT8","UINT8","UINT8_CLAMPED","INT16","UINT16","INT32","UINT32","INT64","UINT64","FLOAT32","FLOAT64","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI Projects/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/DynamicBuffer.js"],"sourcesContent":["/** Typed-array-based buffer which can be dynamically extended. */\nexport class DynamicBuffer {\n    /**\n     * @param type Array type, see NativeType.\n     * @param initialCapacity Initial capacity, number of elements.\n     */\n    constructor(type, initialCapacity = 16) {\n        this.type = type\n        this.capacity = initialCapacity\n        this.size = 0\n        this.buffer = new (NativeArray(type))(initialCapacity)\n    }\n\n    GetSize() {\n        return this.size\n    }\n\n    /**\n     * Append new value to the buffer end.\n     * @return Appended value position in the buffer.\n     */\n    Push(value) {\n        this._CheckGrow()\n        const pos = this.size\n        this.buffer[pos] = value\n        this.size++\n        return pos\n    }\n\n    Get(index) {\n        if (index >= this.size) {\n            throw new Error(`Index out of range: ${index}/${this.size}`)\n        }\n        return this.buffer[index]\n    }\n\n    /** Copy content to the specified buffer.\n     * @param dstBuffer Destination buffer, should be typed array of the same type.\n     * @param dstOffset {number} Offset in elements in the destination buffer.\n     * @param srcOffset {number} Offset in elements in this buffer.\n     * @param size {number} Number of elements to copy, -1 (default) to copy till this buffer end.\n     */\n    CopyTo(dstBuffer, dstOffset, srcOffset = 0, size = -1) {\n        if (size === -1) {\n            size = this.size - srcOffset\n        }\n        const src = new (NativeArray(this.type))(this.buffer.buffer, srcOffset, size)\n        dstBuffer.set(src, dstOffset)\n    }\n\n    _CheckGrow() {\n        if (this.size < this.capacity) {\n            return\n        }\n        this.capacity *= 2\n        const newBuffer = new (NativeArray(this.type))(this.capacity)\n        newBuffer.set(this.buffer)\n        this.buffer = newBuffer\n    }\n}\n\nexport const NativeType = {\n    INT8: 0,\n    UINT8: 1,\n    UINT8_CLAMPED: 2,\n    INT16: 3,\n    UINT16: 4,\n    INT32: 5,\n    UINT32: 6,\n    INT64: 7,\n    UINT64: 8,\n    FLOAT32: 9,\n    FLOAT64: 10\n}\n\n/** Get TypedArray type corresponding to the specified NativeType. */\nexport function NativeArray(type) {\n    switch (type) {\n    case NativeType.INT8:\n        return Int8Array\n    case NativeType.UINT8:\n        return Uint8Array\n    case NativeType.UINT8_CLAMPED:\n        return Uint8ClampedArray\n    case NativeType.INT16:\n        return Int16Array\n    case NativeType.UINT16:\n        return Uint16Array\n    case NativeType.INT32:\n        return Int32Array\n    case NativeType.UINT32:\n        return Uint32Array\n    case NativeType.FLOAT32:\n        return Float32Array\n    case NativeType.FLOAT64:\n        return Float64Array\n    default:\n        throw new Error(\"Unrecognized native type: \" + type)\n    }\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,CAAC;EACvB;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,IAAI,EAAEC,eAAe,GAAG,EAAE,EAAE;IACpC,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,QAAQ,GAAGD,eAAe;IAC/B,IAAI,CAACE,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,MAAM,GAAG,KAAKC,WAAW,CAACL,IAAI,CAAC,EAAEC,eAAe,CAAC;EAC1D;EAEAK,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACH,IAAI;EACpB;;EAEA;AACJ;AACA;AACA;EACII,IAAIA,CAACC,KAAK,EAAE;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;IACjB,MAAMC,GAAG,GAAG,IAAI,CAACP,IAAI;IACrB,IAAI,CAACC,MAAM,CAACM,GAAG,CAAC,GAAGF,KAAK;IACxB,IAAI,CAACL,IAAI,EAAE;IACX,OAAOO,GAAG;EACd;EAEAC,GAAGA,CAACC,KAAK,EAAE;IACP,IAAIA,KAAK,IAAI,IAAI,CAACT,IAAI,EAAE;MACpB,MAAM,IAAIU,KAAK,CAAE,uBAAsBD,KAAM,IAAG,IAAI,CAACT,IAAK,EAAC,CAAC;IAChE;IACA,OAAO,IAAI,CAACC,MAAM,CAACQ,KAAK,CAAC;EAC7B;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIE,MAAMA,CAACC,SAAS,EAAEC,SAAS,EAAEC,SAAS,GAAG,CAAC,EAAEd,IAAI,GAAG,CAAC,CAAC,EAAE;IACnD,IAAIA,IAAI,KAAK,CAAC,CAAC,EAAE;MACbA,IAAI,GAAG,IAAI,CAACA,IAAI,GAAGc,SAAS;IAChC;IACA,MAAMC,GAAG,GAAG,KAAKb,WAAW,CAAC,IAAI,CAACL,IAAI,CAAC,EAAE,IAAI,CAACI,MAAM,CAACA,MAAM,EAAEa,SAAS,EAAEd,IAAI,CAAC;IAC7EY,SAAS,CAACI,GAAG,CAACD,GAAG,EAAEF,SAAS,CAAC;EACjC;EAEAP,UAAUA,CAAA,EAAG;IACT,IAAI,IAAI,CAACN,IAAI,GAAG,IAAI,CAACD,QAAQ,EAAE;MAC3B;IACJ;IACA,IAAI,CAACA,QAAQ,IAAI,CAAC;IAClB,MAAMkB,SAAS,GAAG,KAAKf,WAAW,CAAC,IAAI,CAACL,IAAI,CAAC,EAAE,IAAI,CAACE,QAAQ,CAAC;IAC7DkB,SAAS,CAACD,GAAG,CAAC,IAAI,CAACf,MAAM,CAAC;IAC1B,IAAI,CAACA,MAAM,GAAGgB,SAAS;EAC3B;AACJ;AAEA,OAAO,MAAMC,UAAU,GAAG;EACtBC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE,CAAC;EACRC,aAAa,EAAE,CAAC;EAChBC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE;AACb,CAAC;;AAED;AACA,OAAO,SAAS3B,WAAWA,CAACL,IAAI,EAAE;EAC9B,QAAQA,IAAI;IACZ,KAAKqB,UAAU,CAACC,IAAI;MAChB,OAAOW,SAAS;IACpB,KAAKZ,UAAU,CAACE,KAAK;MACjB,OAAOW,UAAU;IACrB,KAAKb,UAAU,CAACG,aAAa;MACzB,OAAOW,iBAAiB;IAC5B,KAAKd,UAAU,CAACI,KAAK;MACjB,OAAOW,UAAU;IACrB,KAAKf,UAAU,CAACK,MAAM;MAClB,OAAOW,WAAW;IACtB,KAAKhB,UAAU,CAACM,KAAK;MACjB,OAAOW,UAAU;IACrB,KAAKjB,UAAU,CAACO,MAAM;MAClB,OAAOW,WAAW;IACtB,KAAKlB,UAAU,CAACU,OAAO;MACnB,OAAOS,YAAY;IACvB,KAAKnB,UAAU,CAACW,OAAO;MACnB,OAAOS,YAAY;IACvB;MACI,MAAM,IAAI5B,KAAK,CAAC,4BAA4B,GAAGb,IAAI,CAAC;EACxD;AACJ"}]}