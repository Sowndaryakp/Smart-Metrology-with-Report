{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\parser\\entities\\hatch.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\dxf-viewer\\src\\parser\\entities\\hatch.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI ALL PROJECTS\\GERB-INDIA(CLIENT)\\GerbIndiaDashboard-CMTI-Full\\SmartMetrology\\smart-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["helpers","EntityParser","ForEntityName","prototype","parseEntity","scanner","curr","entity","type","value","numBoundaryLoops","numDefinitionLines","numSeedPoints","next","code","loop","ParseBoundaryLoop","boundaryLoops","push","line","ParseDefinitionLine","definitionLines","pt","ParseSeedPoint","seedPoints","patternName","isSolid","hatchStyle","patternType","patternAngle","Math","PI","patternScale","checkCommonEntityProperties","ParsePolyline","pl","vertices","isClosed","hasBulge","numVertices","i","p","parsePoint","bulge","ParseEdge","e","isSpline","controlPoints","start","fitPoints","end","knotValues","radius","startAngle","endAngle","rational","isCcw","periodic","degreeOfSplineCurve","polylineParsed","numEdges","numSourceRefs","polyline","edge","edges","sourceRefs","rewind","angle","base","x","y","offset","numDashes","dashes"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI ALL PROJECTS/GERB-INDIA(CLIENT)/GerbIndiaDashboard-CMTI-Full/SmartMetrology/smart-frontend/node_modules/dxf-viewer/src/parser/entities/hatch.js"],"sourcesContent":["import * as helpers from '../ParseHelpers'\n\nexport default function EntityParser() {}\n\nEntityParser.ForEntityName = 'HATCH';\n\nEntityParser.prototype.parseEntity = function(scanner, curr) {\n    var entity;\n    entity = { type: curr.value };\n\n    let numBoundaryLoops = 0;\n    let numDefinitionLines = 0;\n    let numSeedPoints = 0;\n\n    curr = scanner.next();\n    while(curr !== 'EOF') {\n        if (curr.code === 0) break;\n\n        while (numBoundaryLoops > 0) {\n            const loop = ParseBoundaryLoop(curr, scanner)\n            if (loop) {\n                entity.boundaryLoops.push(loop);\n                numBoundaryLoops--;\n                curr = scanner.next();\n            } else {\n                numBoundaryLoops = 0\n            }\n        }\n\n        while (numDefinitionLines > 0) {\n            const line = ParseDefinitionLine(curr, scanner)\n            if (line) {\n                entity.definitionLines.push(line);\n                numDefinitionLines--;\n                curr = scanner.next();\n            } else {\n                numDefinitionLines = 0\n            }\n        }\n\n        while (numSeedPoints > 0) {\n            const pt = ParseSeedPoint(curr, scanner);\n            if (pt) {\n                entity.seedPoints.push(pt);\n                numSeedPoints--;\n                curr = scanner.next();\n            } else {\n                numSeedPoints = 0\n            }\n        }\n\n        if (curr.code === 0) break;\n\n        switch(curr.code) {\n\n        case 2: // Hatch pattern name\n            entity.patternName = curr.value;\n            break;\n\n        case 70: //Solid fill flag (solid fill = 1; pattern fill = 0)\n            entity.isSolid = curr.value != 0;\n            break;\n\n        case 91: // Number of boundary paths (loops)\n            numBoundaryLoops = curr.value;\n            if (numBoundaryLoops > 0) {\n                entity.boundaryLoops = []\n            }\n            break;\n\n        // Hatch style:\n        // 0 = Hatch “odd parity” area (Normal style)\n        // 1 = Hatch outermost area only (Outer style)\n        // 2 = Hatch through entire area (Ignore style)\n        case 75:\n            entity.hatchStyle = curr.value;\n            break;\n\n        //Hatch pattern type:\n        // 0 = User-defined; 1 = Predefined; 2 = Custom\n        case 76:\n            entity.patternType = curr.value;\n            break;\n\n        case 52: // Hatch pattern angle (pattern fill only)\n            entity.patternAngle = curr.value * Math.PI / 180;\n            break;\n\n        case 41: // Hatch pattern scale or spacing (pattern fill only)\n            entity.patternScale = curr.value;\n            break;\n\n        case 78: // Number of pattern definition lines\n            numDefinitionLines = curr.value;\n            if (numDefinitionLines > 0) {\n                entity.definitionLines = []\n            }\n            break;\n\n        case 98: // Number of seed points\n            numSeedPoints = curr.value;\n            if (numSeedPoints > 0) {\n                entity.seedPoints = []\n            }\n            break;\n\n        default: // check common entity attributes\n            helpers.checkCommonEntityProperties(entity, curr, scanner);\n            break;\n        }\n        curr = scanner.next();\n    }\n\n    return entity;\n};\n\nfunction ParseBoundaryLoop(curr, scanner) {\n    let entity = null\n\n    const ParsePolyline = () => {\n        const pl = {vertices: [], isClosed: false};\n        let hasBulge = false;\n        let numVertices = 0;\n        while (true) {\n            if (numVertices > 0) {\n                for (let i = 0; i < numVertices; i++) {\n                    if (curr.code != 10) {\n                        break\n                    }\n                    const p = helpers.parsePoint(scanner)\n                    curr = scanner.next();\n                    if (curr.code == 42) {\n                        p.bulge = curr.value\n                        curr = scanner.next();\n                    }\n                    pl.vertices.push(p)\n                }\n                return pl\n            }\n\n            switch (curr.code) {\n            case 72:\n                hasBulge = curr.value;\n                break;\n            case 73:\n                pl.isClosed = curr.value;\n                break;\n            case 93:\n                numVertices = curr.value;\n                break;\n            default:\n                return pl;\n            }\n            curr = scanner.next();\n        }\n    }\n\n    const ParseEdge = () => {\n        if (curr.code != 72) {\n            return null\n        }\n        const e = {type: curr.value}\n        curr = scanner.next();\n        const isSpline = e.type == 4\n\n        while (true) {\n            switch (curr.code) {\n            case 10:\n                if (isSpline) {\n                    if (!e.controlPoints) {\n                        e.controlPoints = [];\n                    }\n                    e.controlPoints.push(helpers.parsePoint(scanner));\n                } else {\n                    e.start = helpers.parsePoint(scanner);\n                }\n                break;\n            case 11:\n                if (isSpline) {\n                    if (!e.fitPoints) {\n                        e.fitPoints = [];\n                    }\n                    e.fitPoints.push(helpers.parsePoint(scanner));\n                } else {\n                    e.end = helpers.parsePoint(scanner);\n                }\n                break;\n            case 40:\n                if (isSpline) {\n                    if (!e.knotValues) {\n                        e.knotValues = [];\n                    }\n                    e.knotValues.push(curr.value);\n                } else {\n                    e.radius = curr.value;\n                }\n                break;\n            case 50:\n                e.startAngle = curr.value * Math.PI / 180;\n                break;\n            case 51:\n                e.endAngle = curr.value * Math.PI / 180;\n                break;\n            case 73:\n                if (isSpline) {\n                    e.rational = curr.value;\n                } else {\n                    e.isCcw = curr.value;\n                }\n                break;\n            case 74:\n                e.periodic = curr.value;\n                break;\n            case 94:\n                e.degreeOfSplineCurve = curr.value;\n                break;\n\n            //XXX ignore some groups for now, mostly spline\n            case 95:\n            case 96:\n            case 40:\n            case 42:\n            case 97:\n                break;\n            default:\n                return e\n            }\n            curr = scanner.next();\n        }\n    }\n\n    let polylineParsed = false;\n    let numEdges = 0;\n    let numSourceRefs = 0;\n\n    while (true) {\n\n        if (!entity) {\n            if (curr.code != 92) {\n                return null;\n            }\n            entity = {type: curr.value};\n            curr = scanner.next();\n        }\n\n        if ((entity.type & 2) && !polylineParsed) {\n            entity.polyline = ParsePolyline()\n            polylineParsed = true\n        }\n\n        while (numEdges) {\n            const edge = ParseEdge();\n            if (edge) {\n                entity.edges.push(edge);\n                numEdges--;\n            } else {\n                numEdges = 0;\n            }\n        }\n\n        while (numSourceRefs) {\n            if (curr.code == 330) {\n                entity.sourceRefs.push(curr.value);\n                numSourceRefs--;\n                curr = scanner.next();\n            } else {\n                numSourceRefs = 0\n            }\n        }\n\n        switch (curr.code) {\n        case 93:\n            numEdges = curr.value;\n            if (numEdges > 0) {\n                entity.edges = []\n            }\n            break;\n        case 97:\n            numSourceRefs = curr.value;\n            if (numSourceRefs > 0) {\n                entity.sourceRefs = []\n            }\n            break;\n        default:\n            scanner.rewind();\n            return entity;\n        }\n        curr = scanner.next();\n    }\n}\n\nfunction ParseDefinitionLine(curr, scanner) {\n    /* Assuming always starts from group 53. */\n    if (curr.code != 53) {\n        return null\n    }\n    const entity = {\n        angle: curr.value * Math.PI / 180,\n        base: {x: 0, y: 0},\n        offset: {x: 0, y: 0}\n    };\n    curr = scanner.next();\n\n    let numDashes = 0;\n    while (true) {\n        switch (curr.code) {\n        case 43:\n            entity.base.x = curr.value;\n            break;\n        case 44:\n            entity.base.y = curr.value;\n            break;\n        case 45:\n            entity.offset.x = curr.value;\n            break;\n        case 46:\n            entity.offset.y = curr.value;\n            break;\n        case 49:\n            if (numDashes > 0) {\n                entity.dashes.push(curr.value);\n                numDashes--;\n            }\n            break;\n        case 79:\n            numDashes = curr.value;\n            if (curr.value) {\n                entity.dashes = []\n            }\n            break;\n        default:\n            scanner.rewind();\n            return entity;\n        }\n        curr = scanner.next();\n    }\n}\n\nfunction ParseSeedPoint(curr, scanner) {\n    if (curr.code != 10) {\n        return null\n    }\n    return helpers.parsePoint(scanner);\n}\n"],"mappings":"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"}]}