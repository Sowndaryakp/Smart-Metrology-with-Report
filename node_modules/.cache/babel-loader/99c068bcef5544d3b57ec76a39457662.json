{"remainingRequest":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\dxf-viewer\\src\\parser\\DxfParser.js","dependencies":[{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\dxf-viewer\\src\\parser\\DxfParser.js","mtime":1704432456000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\babel.config.js","mtime":1694764762000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1704432454000},{"path":"C:\\Users\\SDC-8\\Desktop\\Sowndarya\\CMTI- Running Projects\\PiWeb Running\\PiWeb-CMTI-Pdf trying\\1stApril\\Trying\\PiWeb-CMTI (2)\\PiWeb-CMTI\\node_modules\\babel-loader\\lib\\index.js","mtime":1704432454000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["DxfArrayScanner","AUTO_CAD_COLOR_INDEX","Face","Arc","AttDef","Attribute","Circle","Dimension","Ellipse","Insert","Line","LWPolyline","MText","Point","Polyline","Solid","Spline","Text","Hatch","dimStyleCodes","log","setLevel","registerDefaultEntityHandlers","dxfParser","registerEntityHandler","DxfParser","_entityHandlers","prototype","parse","source","done","Error","handlerType","instance","ForEntityName","parseSync","_parse","console","error","parseStream","stream","dxfString","self","on","onData","onEnd","onError","chunk","dxf","err","scanner","curr","lastHandle","dxfLinesArray","split","hasNext","parseAll","next","isEOF","code","value","debugCode","debug","header","parseHeader","blocks","parseBlocks","entities","parseEntities","tables","parseTables","warn","groupIs","currVarName","currVarValue","x","y","z","block","parseBlock","ensureHandle","name","handle","logUnhandledGroup","xrefPath","name2","layer","position","parsePoint","paperSpace","type","ownerHandle","tableDefinition","tableDefinitions","tableName","parseTable","END_OF_TABLE_VALUE","table","expectedCount","actualCount","dxfSymbolName","tableRecordsProperty","parseTableRecords","tableRecords","constructor","Array","length","Object","keys","parseViewPortRecords","viewPorts","viewPort","lowerLeftCorner","upperRightCorner","center","snapBasePoint","snapSpacing","gridSpacing","viewDirectionFromTarget","viewTarget","lensLength","frontClippingPlane","backClippingPlane","viewHeight","snapRotationAngle","viewTwistAngle","orthographicType","ucsOrigin","ucsXAxis","ucsYAxis","renderMode","defaultLightingType","defaultLightingOn","ambientColor","push","parseLineTypes","ltypes","ltypeName","ltype","description","pattern","patternLength","parseLayers","layers","layerName","visible","colorIndex","Math","abs","color","getAcadColor","frozen","undefined","parseDimStyles","dimStyles","styleName","style","has","get","parseStyles","styles","subClassMarker","standardFlag","fixedTextHeight","widthFactor","obliqueAngle","textGenerationFlag","lastHeight","font","bigFont","extendedFont","VPORT","LTYPE","LAYER","DIMSTYLE","STYLE","forBlock","endingOnValue","entity","handler","parseEntity","lastReadGroup","point","rewind","TypeError","index","BLOCK_ANONYMOUS_FLAG","BLOCK_NON_CONSTANT_FLAG","BLOCK_XREF_FLAG","BLOCK_XREF_OVERLAY_FLAG","BLOCK_EXTERNALLY_DEPENDENT_FLAG","BLOCK_RESOLVED_OR_DEPENDENT_FLAG","BLOCK_REFERENCED_XREF"],"sources":["C:/Users/SDC-8/Desktop/Sowndarya/CMTI- Running Projects/PiWeb Running/PiWeb-CMTI-Pdf trying/1stApril/Trying/PiWeb-CMTI (2)/PiWeb-CMTI/node_modules/dxf-viewer/src/parser/DxfParser.js"],"sourcesContent":["import DxfArrayScanner from './DxfArrayScanner';\nimport AUTO_CAD_COLOR_INDEX from './AutoCadColorIndex';\n\nimport Face from './entities/3dface';\nimport Arc from './entities/arc';\nimport AttDef from './entities/attdef';\nimport Attribute from './entities/attribute'\nimport Circle from './entities/circle';\nimport Dimension from './entities/dimension';\nimport Ellipse from './entities/ellipse';\nimport Insert from './entities/insert';\nimport Line from './entities/line';\nimport LWPolyline from './entities/lwpolyline';\nimport MText from './entities/mtext';\nimport Point from './entities/point';\nimport Polyline from './entities/polyline';\nimport Solid from './entities/solid';\nimport Spline from './entities/spline';\nimport Text from './entities/text';\nimport Hatch from './entities/hatch';\nimport dimStyleCodes from './DimStyleCodes';\n//import Vertex from './entities/';\n\nimport log from 'loglevel';\n\n//log.setLevel('trace');\n//log.setLevel('debug');\n//log.setLevel('info');\n//log.setLevel('warn');\nlog.setLevel('error');\n//log.setLevel('silent');\n\nfunction registerDefaultEntityHandlers(dxfParser) {\n    // Supported entities here (some entity code is still being refactored into this flow)\n    dxfParser.registerEntityHandler(Face);\n    dxfParser.registerEntityHandler(Arc);\n    dxfParser.registerEntityHandler(AttDef);\n    dxfParser.registerEntityHandler(Attribute);\n    dxfParser.registerEntityHandler(Circle);\n    dxfParser.registerEntityHandler(Dimension);\n    dxfParser.registerEntityHandler(Ellipse);\n    dxfParser.registerEntityHandler(Insert);\n    dxfParser.registerEntityHandler(Line);\n    dxfParser.registerEntityHandler(LWPolyline);\n    dxfParser.registerEntityHandler(MText);\n    dxfParser.registerEntityHandler(Point);\n    dxfParser.registerEntityHandler(Polyline);\n    dxfParser.registerEntityHandler(Solid);\n    dxfParser.registerEntityHandler(Spline);\n    dxfParser.registerEntityHandler(Text);\n    dxfParser.registerEntityHandler(Hatch);\n    //dxfParser.registerEntityHandler(require('./entities/vertex'));\n}\n\nexport default function DxfParser() {\n    this._entityHandlers = {};\n\n    registerDefaultEntityHandlers(this);\n}\n\nDxfParser.prototype.parse = function(source, done) {\n    throw new Error(\"read() not implemented. Use readSync()\");\n};\n\nDxfParser.prototype.registerEntityHandler = function(handlerType) {\n    var instance = new handlerType();\n    this._entityHandlers[handlerType.ForEntityName] = instance;\n}\n\nDxfParser.prototype.parseSync = function(source) {\n    if(typeof(source) === 'string') {\n        return this._parse(source);\n    }else {\n        console.error('Cannot read DXF source of type `' + typeof(source));\n        return null;\n    }\n};\n\nDxfParser.prototype.parseStream = function(stream, done) {\n\n    var dxfString = \"\";\n    var self = this;\n\n    stream.on('data', onData);\n    stream.on('end', onEnd);\n    stream.on('error', onError);\n\n    function onData(chunk) {\n        dxfString += chunk;\n    }\n\n    function onEnd() {\n        try {\n            var dxf = self._parse(dxfString);\n        } catch(err) {\n            return done(err);\n        }\n        done(null, dxf);\n    }\n\n    function onError(err) {\n        done(err);\n    }\n};\n\nDxfParser.prototype._parse = function(dxfString) {\n    var scanner, curr, dxf = {}, lastHandle = 0;\n    var dxfLinesArray = dxfString.split(/\\r\\n|\\r|\\n/g);\n\n    scanner = new DxfArrayScanner(dxfLinesArray);\n    if (!scanner.hasNext()) {\n        throw Error('Empty file');\n    }\n\n    var self = this;\n\n    var parseAll = function() {\n        curr = scanner.next();\n        while(!scanner.isEOF()) {\n            if(curr.code === 0 && curr.value === 'SECTION') {\n                curr = scanner.next();\n\n                // Be sure we are reading a section code\n                if (curr.code !== 2) {\n                    console.error('Unexpected code %s after 0:SECTION', debugCode(curr));\n                    curr = scanner.next();\n                    continue;\n                }\n\n                if (curr.value === 'HEADER') {\n                    log.debug('> HEADER');\n                    dxf.header = parseHeader();\n                    log.debug('<');\n                } else if (curr.value === 'BLOCKS') {\n                    log.debug('> BLOCKS');\n                    dxf.blocks = parseBlocks();\n                    log.debug('<');\n                } else if(curr.value === 'ENTITIES') {\n                    log.debug('> ENTITIES');\n                    dxf.entities = parseEntities(false);\n                    log.debug('<');\n                } else if(curr.value === 'TABLES') {\n                    log.debug('> TABLES');\n                    dxf.tables = parseTables();\n                    log.debug('<');\n                } else if(curr.value === 'EOF') {\n                    log.debug('EOF');\n                } else {\n                    log.warn('Skipping section \\'%s\\'', curr.value);\n                }\n            } else {\n                curr = scanner.next();\n            }\n            // If is a new section\n        }\n    };\n\n    var groupIs = function(code, value) {\n        return curr.code === code && curr.value === value;\n    };\n\n    /**\n     *\n     * @return {object} header\n     */\n    var parseHeader = function() {\n        // interesting variables:\n        //  $ACADVER, $VIEWDIR, $VIEWSIZE, $VIEWCTR, $TDCREATE, $TDUPDATE\n        // http://www.autodesk.com/techpubs/autocad/acadr14/dxf/header_section_al_u05_c.htm\n        // Also see VPORT table entries\n        var currVarName = null, currVarValue = null;\n        var header = {};\n        // loop through header variables\n        curr = scanner.next();\n\n        while(true) {\n            if(groupIs(0, 'ENDSEC')) {\n                if(currVarName) header[currVarName] = currVarValue;\n                break;\n            } else if(curr.code === 9) {\n                if(currVarName) header[currVarName] = currVarValue;\n                currVarName = curr.value;\n                // Filter here for particular variables we are interested in\n            } else {\n                if(curr.code === 10) {\n                    currVarValue = { x: curr.value };\n                } else if(curr.code === 20) {\n                    currVarValue.y = curr.value;\n                } else if(curr.code === 30) {\n                    currVarValue.z = curr.value;\n                } else {\n                    currVarValue = curr.value;\n                }\n            }\n            curr = scanner.next();\n        }\n        // console.log(util.inspect(header, { colors: true, depth: null }));\n        curr = scanner.next(); // swallow up ENDSEC\n        return header;\n    };\n\n\n    /**\n     *\n     */\n    var parseBlocks = function() {\n        var blocks = {}, block;\n\n        curr = scanner.next();\n\n        while(curr.value !== 'EOF') {\n            if(groupIs(0, 'ENDSEC')) {\n                break;\n            }\n\n            if(groupIs(0, 'BLOCK')) {\n                log.debug('block {');\n                block = parseBlock();\n                log.debug('}');\n                ensureHandle(block);\n                if(!block.name)\n                    log.error('block with handle \"' + block.handle + '\" is missing a name.');\n                else\n                    blocks[block.name] = block;\n            } else {\n                logUnhandledGroup(curr);\n                curr = scanner.next();\n            }\n        }\n        return blocks;\n    };\n\n    var parseBlock = function() {\n        var block = {};\n        curr = scanner.next();\n\n        while(curr.value !== 'EOF') {\n            switch(curr.code) {\n                case 1:\n                    block.xrefPath = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 2:\n                    block.name = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 3:\n                    block.name2 = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 5:\n                    block.handle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 8:\n                    block.layer = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 10:\n                    block.position = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 67:\n                    block.paperSpace = (curr.value && curr.value == 1) ? true : false;\n                    curr = scanner.next();\n                    break;\n                case 70:\n                    if (curr.value != 0) {\n                        //if(curr.value & BLOCK_ANONYMOUS_FLAG) console.log('  Anonymous block');\n                        //if(curr.value & BLOCK_NON_CONSTANT_FLAG) console.log('  Non-constant attributes');\n                        //if(curr.value & BLOCK_XREF_FLAG) console.log('  Is xref');\n                        //if(curr.value & BLOCK_XREF_OVERLAY_FLAG) console.log('  Is xref overlay');\n                        //if(curr.value & BLOCK_EXTERNALLY_DEPENDENT_FLAG) console.log('  Is externally dependent');\n                        //if(curr.value & BLOCK_RESOLVED_OR_DEPENDENT_FLAG) console.log('  Is resolved xref or dependent of an xref');\n                        //if(curr.value & BLOCK_REFERENCED_XREF) console.log('  This definition is a referenced xref');\n                        block.type = curr.value;\n                    }\n                    curr = scanner.next();\n                    break;\n                case 100:\n                    // ignore class markers\n                    curr = scanner.next();\n                    break;\n                case 330:\n                    block.ownerHandle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    if(curr.value == 'ENDBLK')\n                        break;\n                    block.entities = parseEntities(true);\n                    break;\n                default:\n                    logUnhandledGroup(curr);\n                    curr = scanner.next();\n            }\n\n            if(groupIs(0, 'ENDBLK')) {\n                curr = scanner.next();\n                break;\n            }\n        }\n        return block;\n    };\n\n    /**\n     * parseTables\n     * @return {Object} Object representing tables\n     */\n    var parseTables = function() {\n        var tables = {};\n        curr = scanner.next();\n        while(curr.value !== 'EOF') {\n            if(groupIs(0, 'ENDSEC'))\n                break;\n\n            if(groupIs(0, 'TABLE')) {\n                curr = scanner.next();\n\n                var tableDefinition = tableDefinitions[curr.value];\n                if(tableDefinition) {\n                    log.debug(curr.value + ' Table {');\n                    tables[tableDefinitions[curr.value].tableName] = parseTable();\n                    log.debug('}');\n                } else {\n                    log.debug('Unhandled Table ' + curr.value);\n                }\n            } else {\n                // else ignored\n                curr = scanner.next();\n            }\n        }\n\n        curr = scanner.next();\n        return tables;\n    };\n\n    const END_OF_TABLE_VALUE = 'ENDTAB';\n\n    var parseTable = function() {\n        var tableDefinition = tableDefinitions[curr.value],\n            table = {},\n            expectedCount = 0,\n            actualCount;\n\n        curr = scanner.next();\n        while(!groupIs(0, END_OF_TABLE_VALUE)) {\n\n            switch(curr.code) {\n                case 5:\n                    table.handle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 330:\n                    table.ownerHandle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 100:\n                    if(curr.value === 'AcDbSymbolTable') {\n                        // ignore\n                        curr = scanner.next();\n                    }else{\n                        logUnhandledGroup(curr);\n                        curr = scanner.next();\n                    }\n                    break;\n                case 70:\n                    expectedCount = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    if(curr.value === tableDefinition.dxfSymbolName) {\n                        table[tableDefinition.tableRecordsProperty] = tableDefinition.parseTableRecords();\n                    } else {\n                        logUnhandledGroup(curr);\n                        curr = scanner.next();\n                    }\n                    break;\n                default:\n                    logUnhandledGroup(curr);\n                    curr = scanner.next();\n            }\n        }\n        var tableRecords = table[tableDefinition.tableRecordsProperty];\n        if (tableRecords) {\n            if(tableRecords.constructor === Array){\n                actualCount = tableRecords.length;\n            } else if(typeof(tableRecords) === 'object') {\n                actualCount = Object.keys(tableRecords).length;\n            }\n            if(expectedCount !== actualCount) {\n                log.warn(`Parsed ${actualCount} ${tableDefinition.dxfSymbolName}'s but expected ${expectedCount}`);\n            }\n        } else {\n            table[tableDefinition.tableRecordsProperty] = []\n        }\n        curr = scanner.next();\n        return table;\n    };\n\n    var parseViewPortRecords = function() {\n        var viewPorts = [], // Multiple table entries may have the same name indicating a multiple viewport configuration\n            viewPort = {};\n\n        log.debug('ViewPort {');\n        curr = scanner.next();\n        while(!groupIs(0, END_OF_TABLE_VALUE)) {\n\n            switch(curr.code) {\n                case 2: // layer name\n                    viewPort.name = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 10:\n                    viewPort.lowerLeftCorner = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 11:\n                    viewPort.upperRightCorner = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 12:\n                    viewPort.center = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 13:\n                    viewPort.snapBasePoint = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 14:\n                    viewPort.snapSpacing = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 15:\n                    viewPort.gridSpacing = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 16:\n                    viewPort.viewDirectionFromTarget = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 17:\n                    viewPort.viewTarget = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 42:\n                    viewPort.lensLength = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 43:\n                    viewPort.frontClippingPlane = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 44:\n                    viewPort.backClippingPlane = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 45:\n                    viewPort.viewHeight = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 50:\n                    viewPort.snapRotationAngle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 51:\n                    viewPort.viewTwistAngle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 79:\n                    viewPort.orthographicType = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 110:\n                    viewPort.ucsOrigin = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 111:\n                    viewPort.ucsXAxis = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 112:\n                    viewPort.ucsYAxis = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 110:\n                    viewPort.ucsOrigin = parsePoint();\n                    curr = scanner.next();\n                    break;\n                case 281:\n                    viewPort.renderMode = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 281:\n                    // 0 is one distant light, 1 is two distant lights\n                    viewPort.defaultLightingType = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 292:\n                    viewPort.defaultLightingOn = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 330:\n                    viewPort.ownerHandle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 63: // These are all ambient color. Perhaps should be a gradient when multiple are set.\n                case 421:\n                case 431:\n                    viewPort.ambientColor = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    // New ViewPort\n                    if(curr.value === 'VPORT') {\n                        log.debug('}');\n                        viewPorts.push(viewPort);\n                        log.debug('ViewPort {');\n                        viewPort = {};\n                        curr = scanner.next();\n                    }\n                    break;\n                default:\n                    logUnhandledGroup(curr);\n                    curr = scanner.next();\n                    break;\n            }\n        }\n        // Note: do not call scanner.next() here,\n        //  parseTable() needs the current group\n        log.debug('}');\n        viewPorts.push(viewPort);\n\n        return viewPorts;\n    };\n\n    var parseLineTypes = function() {\n        var ltypes = {},\n            ltypeName,\n            ltype = {},\n            length;\n\n        log.debug('LType {');\n        curr = scanner.next();\n        while(!groupIs(0, 'ENDTAB')) {\n\n            switch(curr.code) {\n                case 2:\n                    ltype.name = curr.value;\n                    ltypeName = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 3:\n                    ltype.description = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 73: // Number of elements for this line type (dots, dashes, spaces);\n                    length = curr.value;\n                    if(length > 0) ltype.pattern = [];\n                    curr = scanner.next();\n                    break;\n                case 40: // total pattern length\n                    ltype.patternLength = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 49:\n                    ltype.pattern.push(curr.value);\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    log.debug('}');\n                    if (length > 0 && length !== ltype.pattern.length) {\n                        log.warn('lengths do not match on LTYPE pattern');\n                    }\n                    ltypes[ltypeName] = ltype;\n                    ltype = {};\n                    log.debug('LType {');\n                    curr = scanner.next();\n                    break;\n                default:\n                    curr = scanner.next();\n            }\n        }\n\n        log.debug('}');\n        ltypes[ltypeName] = ltype;\n        return ltypes;\n    };\n\n    var parseLayers = function() {\n        var layers = {},\n            layerName,\n            layer = {};\n\n        log.debug('Layer {');\n        curr = scanner.next();\n        while(!groupIs(0, 'ENDTAB')) {\n\n            switch(curr.code) {\n                case 2: // layer name\n                    layer.name = curr.value;\n                    layerName = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 62: // color, visibility\n                    layer.visible = curr.value >= 0;\n                    // TODO 0 and 256 are BYBLOCK and BYLAYER respectively. Need to handle these values for layers?.\n                    layer.colorIndex = Math.abs(curr.value);\n                    layer.color = getAcadColor(layer.colorIndex);\n                    curr = scanner.next();\n                    break;\n                case 70: // frozen layer\n                    layer.frozen = ((curr.value & 1) !== 0 || (curr.value & 2) !== 0);\n                    curr = scanner.next();\n                    break;\n                case 420: // TrueColor Color\n                    layer.color = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    // New Layer\n                    if(curr.value === 'LAYER') {\n                        log.debug('}');\n                        layers[layerName] = layer;\n                        log.debug('Layer {');\n                        layer = {};\n                        layerName = undefined;\n                        curr = scanner.next();\n                    }\n                    break;\n                default:\n                    logUnhandledGroup(curr);\n                    curr = scanner.next();\n                    break;\n            }\n        }\n        // Note: do not call scanner.next() here,\n        //  parseLayerTable() needs the current group\n        log.debug('}');\n        layers[layerName] = layer;\n\n        return layers;\n    };\n\n    var parseDimStyles = function() {\n        var dimStyles = {},\n            styleName,\n            style = {};\n\n        log.debug('DimStyle {');\n        curr = scanner.next();\n        while(!groupIs(0, 'ENDTAB')) {\n\n            if (dimStyleCodes.has(curr.code)) {\n                style[dimStyleCodes.get(curr.code)] = curr.value\n                curr = scanner.next();\n            } else {\n                switch(curr.code) {\n                case 2: // style name\n                    style.name = curr.value;\n                    styleName = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    // New style\n                    if(curr.value === 'DIMSTYLE') {\n                        log.debug('}');\n                        dimStyles[styleName] = style;\n                        log.debug('DimStyle {');\n                        style = {};\n                        styleName = undefined;\n                        curr = scanner.next();\n                    }\n                    break;\n                default:\n                    logUnhandledGroup(curr);\n                    curr = scanner.next();\n                    break;\n                }\n            }\n        }\n        // Note: do not call scanner.next() here,\n        //  parseLayerTable() needs the current group\n        log.debug('}');\n        dimStyles[styleName] = style;\n\n        return dimStyles;\n    };\n\n    var parseStyles = function () {\n        var styles = {};\n        var style = {};\n        var styleName;\n\n        log.debug('Style {');\n        curr = scanner.next();\n        while (!groupIs(0, END_OF_TABLE_VALUE)) {\n            switch (curr.code) {\n                case 100:\n                    style.subClassMarker = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 2:\n                    style.styleName = curr.value;\n                    styleName = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 70:\n                    style.standardFlag = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 40:\n                    style.fixedTextHeight = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 41:\n                    style.widthFactor = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 50:\n                    style.obliqueAngle = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 71:\n                    style.textGenerationFlag = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 42:\n                    style.lastHeight = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 3:\n                    style.font = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 4:\n                    style.bigFont = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 1071:\n                    style.extendedFont = curr.value;\n                    curr = scanner.next();\n                    break;\n                case 0:\n                    if (curr.value === 'STYLE') {\n                        log.debug('}');\n                        styles[styleName] = style;\n                        log.debug('Style {');\n                        style = {};\n                        styleName = undefined;\n                        curr = scanner.next();\n                    }\n                    break;\n                default:\n                    logUnhandledGroup(curr);\n                    curr = scanner.next();\n                    break;\n            }\n        }\n        log.debug('}');\n        styles[styleName] = style;\n        return styles;\n    };\n\n    var tableDefinitions = {\n        VPORT: {\n            tableRecordsProperty: 'viewPorts',\n            tableName: 'viewPort',\n            dxfSymbolName: 'VPORT',\n            parseTableRecords: parseViewPortRecords\n        },\n        LTYPE: {\n            tableRecordsProperty: 'lineTypes',\n            tableName: 'lineType',\n            dxfSymbolName: 'LTYPE',\n            parseTableRecords: parseLineTypes\n        },\n        LAYER: {\n            tableRecordsProperty: 'layers',\n            tableName: 'layer',\n            dxfSymbolName: 'LAYER',\n            parseTableRecords: parseLayers\n        },\n        DIMSTYLE: {\n            tableRecordsProperty: 'dimStyles',\n            tableName: 'dimstyle',\n            dxfSymbolName: 'DIMSTYLE',\n            parseTableRecords: parseDimStyles\n        },\n        STYLE: {\n            tableRecordsProperty: 'styles',\n            tableName: 'style',\n            dxfSymbolName: 'STYLE',\n            parseTableRecords: parseStyles,\n        },\n    };\n\n    /**\n     * Is called after the parser first reads the 0:ENTITIES group. The scanner\n     * should be on the start of the first entity already.\n     * @return {Array} the resulting entities\n     */\n    var parseEntities = function(forBlock) {\n        var entities = [];\n\n        var endingOnValue = forBlock ? 'ENDBLK' : 'ENDSEC';\n\n        if (!forBlock) {\n            curr = scanner.next();\n        }\n        while(true) {\n\n            if(curr.code === 0) {\n                if(curr.value === endingOnValue) {\n                    break;\n                }\n\n                var entity;\n                var handler = self._entityHandlers[curr.value];\n                if (handler != null) {\n                    log.debug(curr.value + ' {');\n                    entity = handler.parseEntity(scanner, curr);\n                    curr = scanner.lastReadGroup;\n                    log.debug('}');\n                } else {\n                    log.warn('Unhandled entity ' + curr.value);\n                    curr = scanner.next();\n                    continue;\n                }\n                ensureHandle(entity);\n                entities.push(entity);\n            } else {\n                // ignored lines from unsupported entity\n                curr = scanner.next();\n            }\n        }\n        if (endingOnValue == 'ENDSEC') {\n            curr = scanner.next(); // swallow up ENDSEC, but not ENDBLK\n        }\n        return entities;\n    };\n\n    /**\n     * Parses a 2D or 3D point, returning it as an object with x, y, and\n     * (sometimes) z property if it is 3D. It is assumed the current group\n     * is x of the point being read in, and scanner.next() will return the\n     * y. The parser will determine if there is a z point automatically.\n     * @return {Object} The 2D or 3D point as an object with x, y[, z]\n     */\n    var parsePoint = function() {\n        var point = {},\n            code = curr.code;\n\n        point.x = curr.value;\n\n        code += 10;\n        curr = scanner.next();\n        if(curr.code != code)\n            throw new Error('Expected code for point value to be ' + code +\n            ' but got ' + curr.code + '.');\n        point.y = curr.value;\n\n        code += 10;\n        curr = scanner.next();\n        if(curr.code != code)\n        {\n            scanner.rewind();\n            return point;\n        }\n        point.z = curr.value;\n\n        return point;\n    };\n\n    var ensureHandle = function(entity) {\n        if (!entity) {\n            throw new TypeError('entity cannot be undefined or null');\n        }\n\n        if (!entity.handle) {\n            entity.handle = lastHandle++;\n        }\n    }\n\n    parseAll();\n    return dxf;\n};\n\nfunction logUnhandledGroup(curr) {\n    log.debug('unhandled group ' + debugCode(curr));\n}\n\n\nfunction debugCode(curr) {\n    return curr.code + ':' + curr.value;\n}\n\n/**\n * Returns the truecolor value of the given AutoCad color index value\n * @return {Number} truecolor value as a number\n */\nfunction getAcadColor(index) {\n    return AUTO_CAD_COLOR_INDEX[index];\n}\n\nconst BLOCK_ANONYMOUS_FLAG = 1;\nconst BLOCK_NON_CONSTANT_FLAG = 2;\nconst BLOCK_XREF_FLAG = 4;\nconst BLOCK_XREF_OVERLAY_FLAG = 8;\nconst BLOCK_EXTERNALLY_DEPENDENT_FLAG = 16;\nconst BLOCK_RESOLVED_OR_DEPENDENT_FLAG = 32;\nconst BLOCK_REFERENCED_XREF = 64;\n\n\n/* Notes */\n// Code 6 of an entity indicates inheritance of properties (eg. color).\n//   BYBLOCK means inherits from block\n//   BYLAYER (default) mean inherits from layer\n"],"mappings":"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"}]}